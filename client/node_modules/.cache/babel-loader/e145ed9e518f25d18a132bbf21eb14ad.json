{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizOverview.tsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BigTitle } from \"../../UI/Titles\";\nimport { GridWrapper } from \"../../UI/GridWrapper\";\nimport { MyQuizCard } from \"./MyQuizCard\";\nimport { QuizCreationOrEditForm } from \"./quizForm/QuizCreationOrEditForm\";\nimport { Modal } from \"../../UI/Modal\";\nimport { Clickable } from \"../../UI/Clickable\";\nimport { breakpoints } from \"../../../constants/breakpoints\";\nconst OptionsContainer = styled.div`\n  display: flex;\n  width: 80%;\n  justify-content: space-around;\n`;\nconst OptionButton = styled(BigTitle)`\n  opacity: ${props => props.isSelected ? 1 : 0.5};\n\n  :hover {\n    opacity: 1;\n  }\n\n  @media (max-width: ${breakpoints.smallestScreens}) {\n    font-size: 1.3rem;\n  }\n`;\nconst Wrapper = styled(GridWrapper)`\n  flex-wrap: nowrap;\n  flex-direction: column;\n`;\nexport const QuizOverview = ({\n  myQuizzes\n}) => {\n  const [isEditingQuiz, setIsEditingQuiz] = useState(false);\n  const [quizNowEditing, setQuizNowEditing] = useState(null);\n  const [sectionShowing, setSectionShowing] = useState(\"quizList\");\n\n  const startEditingQuiz = quiz => {\n    setQuizNowEditing(quiz);\n    setIsEditingQuiz(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isEditingQuiz ? /*#__PURE__*/React.createElement(Modal, {\n    handleClose: () => setIsEditingQuiz(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(QuizCreationOrEditForm, {\n    usage: \"editing\",\n    currentQuiz: quizNowEditing,\n    onFormClose: () => setIsEditingQuiz(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OptionsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Clickable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(OptionButton, {\n    isSelected: sectionShowing === \"quizList\",\n    onClick: () => setSectionShowing(\"quizList\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"Your quizzes\")), /*#__PURE__*/React.createElement(Clickable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(OptionButton, {\n    isSelected: sectionShowing === \"creationForm\",\n    onClick: () => setSectionShowing(\"creationForm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, \"Create a new quiz\"))), sectionShowing === \"quizList\" ? /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, myQuizzes.map((quiz, index) => /*#__PURE__*/React.createElement(MyQuizCard, {\n    quiz: quiz,\n    key: index,\n    editQuiz: startEditingQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(Modal, {\n    handleClose: () => setSectionShowing(\"quizList\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuizCreationOrEditForm, {\n    onFormClose: () => setSectionShowing(\"quizList\"),\n    usage: \"creation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizOverview.tsx"],"names":["React","useState","styled","BigTitle","GridWrapper","MyQuizCard","QuizCreationOrEditForm","Modal","Clickable","breakpoints","OptionsContainer","div","OptionButton","props","isSelected","smallestScreens","Wrapper","QuizOverview","myQuizzes","isEditingQuiz","setIsEditingQuiz","quizNowEditing","setQuizNowEditing","sectionShowing","setSectionShowing","startEditingQuiz","quiz","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PrivateQuiz } from \"../../../models/PrivateQuiz\";\nimport { BigTitle } from \"../../UI/Titles\";\nimport { GridWrapper } from \"../../UI/GridWrapper\";\nimport { MyQuizCard } from \"./MyQuizCard\";\nimport { QuizCreationOrEditForm } from \"./quizForm/QuizCreationOrEditForm\";\nimport { Modal } from \"../../UI/Modal\";\nimport { Clickable } from \"../../UI/Clickable\";\nimport { Colors } from \"../../../constants/colors\";\nimport { breakpoints } from \"../../../constants/breakpoints\";\n\nconst OptionsContainer = styled.div`\n  display: flex;\n  width: 80%;\n  justify-content: space-around;\n`;\n\nconst OptionButton = styled(BigTitle)`\n  opacity: ${(props: { isSelected: boolean }) => (props.isSelected ? 1 : 0.5)};\n\n  :hover {\n    opacity: 1;\n  }\n\n  @media (max-width: ${breakpoints.smallestScreens}) {\n    font-size: 1.3rem;\n  }\n`;\n\nconst Wrapper = styled(GridWrapper)`\n  flex-wrap: nowrap;\n  flex-direction: column;\n`;\ninterface Props {\n  myQuizzes: PrivateQuiz[];\n}\n\nexport const QuizOverview: React.FC<Props> = ({ myQuizzes }) => {\n  const [isEditingQuiz, setIsEditingQuiz] = useState(false);\n  const [quizNowEditing, setQuizNowEditing] = useState<PrivateQuiz | null>(\n    null\n  );\n  const [sectionShowing, setSectionShowing] = useState<\n    \"quizList\" | \"creationForm\"\n  >(\"quizList\");\n\n  const startEditingQuiz = (quiz: PrivateQuiz) => {\n    setQuizNowEditing(quiz);\n    setIsEditingQuiz(true);\n  };\n\n  return (\n    <>\n      {isEditingQuiz ? (\n        <Modal handleClose={() => setIsEditingQuiz(false)}>\n          <QuizCreationOrEditForm\n            usage=\"editing\"\n            currentQuiz={quizNowEditing as PrivateQuiz}\n            onFormClose={() => setIsEditingQuiz(false)}\n          />\n        </Modal>\n      ) : (\n        <>\n          <OptionsContainer>\n            <Clickable>\n              <OptionButton\n                isSelected={sectionShowing === \"quizList\"}\n                onClick={() => setSectionShowing(\"quizList\")}\n              >\n                Your quizzes\n              </OptionButton>\n            </Clickable>\n            <Clickable>\n              <OptionButton\n                isSelected={sectionShowing === \"creationForm\"}\n                onClick={() => setSectionShowing(\"creationForm\")}\n              >\n                Create a new quiz\n              </OptionButton>\n            </Clickable>\n          </OptionsContainer>\n\n          {sectionShowing === \"quizList\" ? (\n            <Wrapper>\n              {myQuizzes.map((quiz, index) => (\n                <MyQuizCard\n                  quiz={quiz}\n                  key={index}\n                  editQuiz={startEditingQuiz}\n                />\n              ))}\n            </Wrapper>\n          ) : (\n            <Modal handleClose={() => setSectionShowing(\"quizList\")}>\n              <QuizCreationOrEditForm\n                onFormClose={() => setSectionShowing(\"quizList\")}\n                usage=\"creation\"\n              />\n            </Modal>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}