{"ast":null,"code":"import { QuizType, Question } from \"../models/Question\";\nimport { getTriviaApiQuestions } from \"./triviaAPI\";\nimport { getProgrammingQuizApiQuestions } from \"./programmingQuizAPI\";\nexport const getQuestions = async configs => {\n  console.log(\"config obj\", configs);\n  let questions;\n\n  if (configs.quizType === QuizType.TRIVIA) {\n    questions = await getTriviaApiQuestions(configs.numOfQuestions, configs.subject, configs.difficulty);\n  } else {\n    questions = await getProgrammingQuizApiQuestions(configs.numOfQuestions, configs.subject, configs.difficulty);\n  }\n\n  const formattedQuestions = normalizeQuestions(configs.quizType, questions);\n  return formattedQuestions;\n};\nexport const normalizeQuestions = (quizType, arrayOfQuestions) => {\n  return arrayOfQuestions.map(question => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question);\n    } else {\n      return formatProgrammingQuestion(question);\n    }\n  });\n};\n\nconst formatTrivia = q => {\n  return new Question(q.question, q.difficulty.toLowerCase(), q.category, shuffleArray([...q.incorrect_answers, q.correct_answer]), q.correct_answer);\n};\n\nconst formatProgrammingQuestion = q => {\n  let allAnswers = [];\n\n  for (const val of Object.values(q.answers)) {\n    allAnswers.push(val);\n  }\n\n  let rightAnswer;\n\n  for (const [key, val] of Object.entries(q.correct_answers)) {\n    if (val === \"true\") {\n      const rightAnswerLabel = getReplyLabel(key);\n      rightAnswer = q.answers[rightAnswerLabel];\n    }\n  }\n\n  return new Question(q.question, q.difficulty.toLowerCase(), q.category, allAnswers, rightAnswer, q.explanation);\n};\n\nconst shuffleArray = array => array.sort((a, b) => 0.5 - Math.random());\n\nconst getReplyLabel = label => label.split(\"_correct\")[0];\n\nexport const shortenLengthySubjects = subjName => subjName.indexOf(\":\") === -1 ? subjName : subjName.split(\": \")[1];","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/utils/functions.ts"],"names":["QuizType","Question","getTriviaApiQuestions","getProgrammingQuizApiQuestions","getQuestions","configs","console","log","questions","quizType","TRIVIA","numOfQuestions","subject","difficulty","formattedQuestions","normalizeQuestions","arrayOfQuestions","map","question","formatTrivia","formatProgrammingQuestion","q","toLowerCase","category","shuffleArray","incorrect_answers","correct_answer","allAnswers","val","Object","values","answers","push","rightAnswer","key","entries","correct_answers","rightAnswerLabel","getReplyLabel","explanation","array","sort","a","b","Math","random","label","split","shortenLengthySubjects","subjName","indexOf"],"mappings":"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","sourcesContent":["import { QuizType, Question, Subject, APISendable } from \"../models/Question\";\nimport {\n  TriviaResultType,\n  Difficulty,\n  TriviaCategory\n} from \"../models/TriviaApi\";\nimport {\n  ProgrammingQuizResultType,\n  ProgrammingQuizCategory\n} from \"../models/ProgrammingQuizApi\";\nimport { getTriviaApiQuestions } from \"./triviaAPI\";\nimport { getProgrammingQuizApiQuestions } from \"./programmingQuizAPI\";\n\ntype PossibleQuestionFormat = TriviaResultType | ProgrammingQuizResultType;\n\nexport const getQuestions = async (configs: APISendable) => {\n  console.log(\"config obj\", configs);\n  let questions;\n  if (configs.quizType === QuizType.TRIVIA) {\n    questions = await getTriviaApiQuestions(\n      configs.numOfQuestions,\n      configs.subject as TriviaCategory,\n      configs.difficulty\n    );\n  } else {\n    questions = await getProgrammingQuizApiQuestions(\n      configs.numOfQuestions,\n      configs.subject as ProgrammingQuizCategory,\n      configs.difficulty\n    );\n  }\n\n  const formattedQuestions = normalizeQuestions(configs.quizType, questions);\n  return formattedQuestions;\n};\n\nexport const normalizeQuestions = (\n  quizType: QuizType,\n  arrayOfQuestions: any[]\n) => {\n  return arrayOfQuestions.map((question: PossibleQuestionFormat) => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question as TriviaResultType);\n    } else {\n      return formatProgrammingQuestion(question as ProgrammingQuizResultType);\n    }\n  });\n};\n\nconst formatTrivia = (q: TriviaResultType) => {\n  return new Question(\n    q.question,\n    q.difficulty.toLowerCase() as Difficulty,\n    q.category as Subject,\n    shuffleArray([...q.incorrect_answers, q.correct_answer]),\n    q.correct_answer\n  );\n};\n\nconst formatProgrammingQuestion = (q: ProgrammingQuizResultType) => {\n  let allAnswers: string[] = [];\n  for (const val of Object.values(q.answers)) {\n    allAnswers.push(val as string);\n  }\n  let rightAnswer: string;\n  for (const [key, val] of Object.entries(q.correct_answers)) {\n    if (val === \"true\") {\n      const rightAnswerLabel: string = getReplyLabel(key) as string;\n      rightAnswer = q.answers[rightAnswerLabel] as string;\n    }\n  }\n\n  return new Question(\n    q.question,\n    q.difficulty.toLowerCase() as Difficulty,\n    q.category as Subject,\n    allAnswers,\n    rightAnswer!,\n    q.explanation\n  );\n};\n\nconst shuffleArray = (array: any[]) =>\n  array.sort((a, b) => 0.5 - Math.random());\n\nconst getReplyLabel = (label: string) => label.split(\"_correct\")[0];\n\nexport const shortenLengthySubjects = (subjName: string) =>\n  subjName.indexOf(\":\") === -1 ? subjName : subjName.split(\": \")[1];\n"]},"metadata":{},"sourceType":"module"}