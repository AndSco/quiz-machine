{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/quizzes/Quizzes.tsx\";\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport { QuizType } from \"../../models/PublicQuizQuestion\";\nimport { getCustomUsersQuizzes } from \"../../utils/dbFunctions\";\nimport { LoadingContext } from \"../../contexts/loading/Loading\";\nimport { getQuestions } from \"../../utils/functions\";\nconst startingValue = {\n  quizType: QuizType.TRIVIA,\n  currentSubject: \"\",\n  numberOfQuestions: 5,\n  difficultyLevel: \"medium\",\n  quizConfigurationStep: 1,\n  questions: [],\n  configQuiz: (option, inputValue) => {},\n  startedQuiz: false,\n  goToNextQuizConfiguration: () => {},\n  uploadQuestions: () => {},\n  reset: () => {},\n  usersCustomQuizzes: [],\n  getCustomQuizzes: () => {},\n  getPublicQuizQuestions: () => \"success\"\n};\nexport const QuizzesContext = createContext(startingValue);\nexport const QuizzesContextProvider = ({\n  children\n}) => {\n  const [questions, setQuestions] = useState([]);\n  const [quizType, setQuizType] = useState(QuizType.TRIVIA);\n  const [numberOfQuestions, setNumberOfQuestions] = useState(5);\n  const [difficultyLevel, setDifficultyLevel] = useState(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState(\"\");\n  const [quizConfigurationStep, setQuizConfigurationStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n  const [usersCustomQuizzes, setUsersCustomQuizzes] = useState([]);\n  const {\n    startLoading,\n    stopLoading\n  } = useContext(LoadingContext);\n\n  const uploadQuestions = questions => {\n    // if (questions.length === 0) {\n    //   throw new Error(\n    //     \"Not enough quizzes matching these parameters. Try again!\"\n    //   );\n    // }\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  const getPublicQuizQuestions = async () => {\n    try {\n      startLoading();\n      const questionsToUpload = await getQuestions({\n        quizType,\n        difficulty: difficultyLevel,\n        numOfQuestions: numberOfQuestions,\n        subject: currentSubject\n      });\n\n      if (questionsToUpload.length === 0) {\n        throw new Error(\"Not enough quizzes matching these parameters. Try again!\");\n      }\n\n      uploadQuestions(questionsToUpload);\n      stopLoading();\n      return \"success\";\n    } catch (err) {\n      stopLoading(); // throw err;\n\n      console.log(\"from catch\", err.message);\n      return err.message;\n    }\n  };\n\n  const getCustomQuizzes = async () => {\n    startLoading();\n    const dbResponse = await getCustomUsersQuizzes();\n    const customQuizzes = dbResponse.payload;\n    setUsersCustomQuizzes(customQuizzes);\n    stopLoading();\n  };\n\n  useEffect(() => {\n    getCustomQuizzes();\n  }, []);\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setQuizConfigurationStep(1);\n    setNumberOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const configQuiz = (option, inputValue) => {\n    if (option === \"quizType\") {\n      reset();\n      setQuizType(inputValue);\n    }\n\n    if (option === \"difficulty\") {\n      setDifficultyLevel(inputValue);\n    }\n\n    if (option === \"numberOfQuestions\") {\n      setNumberOfQuestions(inputValue);\n    }\n\n    if (option === \"subject\") {\n      setCurrentSubject(inputValue);\n    }\n  };\n\n  const goToNextQuizConfiguration = () => setQuizConfigurationStep(prev => prev + 1);\n\n  const valuesToPass = {\n    quizType,\n    currentSubject,\n    difficultyLevel,\n    numberOfQuestions,\n    questions,\n    quizConfigurationStep,\n    configQuiz,\n    goToNextQuizConfiguration,\n    startedQuiz,\n    uploadQuestions,\n    reset,\n    usersCustomQuizzes,\n    getCustomQuizzes,\n    getPublicQuizQuestions\n  };\n  return /*#__PURE__*/React.createElement(QuizzesContext.Provider, {\n    value: { ...valuesToPass\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/quizzes/Quizzes.tsx"],"names":["React","createContext","useState","useEffect","useContext","QuizType","getCustomUsersQuizzes","LoadingContext","getQuestions","startingValue","quizType","TRIVIA","currentSubject","numberOfQuestions","difficultyLevel","quizConfigurationStep","questions","configQuiz","option","inputValue","startedQuiz","goToNextQuizConfiguration","uploadQuestions","reset","usersCustomQuizzes","getCustomQuizzes","getPublicQuizQuestions","QuizzesContext","QuizzesContextProvider","children","setQuestions","setQuizType","setNumberOfQuestions","setDifficultyLevel","setCurrentSubject","setQuizConfigurationStep","setStartedQuiz","setUsersCustomQuizzes","startLoading","stopLoading","questionsToUpload","difficulty","numOfQuestions","subject","length","Error","err","console","log","message","dbResponse","customQuizzes","payload","prev","valuesToPass"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport { Question, QuizType, Subject } from \"../../models/PublicQuizQuestion\";\nimport { Difficulty } from \"../../models/TriviaApi\";\nimport { PrivateQuiz } from \"../../models/PrivateQuiz\";\nimport { getCustomUsersQuizzes } from \"../../utils/dbFunctions\";\nimport { LoadingContext } from \"../../contexts/loading/Loading\";\nimport { getQuestions } from \"../../utils/functions\";\n\ntype ConfigOption = \"quizType\" | \"difficulty\" | \"numberOfQuestions\" | \"subject\";\n\ninterface iQuizzesContext {\n  quizType: QuizType;\n  currentSubject: Subject;\n  numberOfQuestions: number;\n  difficultyLevel: Difficulty;\n  quizConfigurationStep: number;\n  questions: Question[];\n  configQuiz: (option: ConfigOption, inputValue: any) => void;\n  startedQuiz: boolean;\n  goToNextQuizConfiguration: () => void;\n  uploadQuestions: (questions: Question[]) => void;\n  reset: () => void;\n  usersCustomQuizzes: PrivateQuiz[];\n  getCustomQuizzes: () => void;\n  getPublicQuizQuestions: () => \"success\" | Error;\n}\n\nconst startingValue: iQuizzesContext = {\n  quizType: QuizType.TRIVIA,\n  currentSubject: \"\",\n  numberOfQuestions: 5,\n  difficultyLevel: \"medium\",\n  quizConfigurationStep: 1,\n  questions: [],\n  configQuiz: (option: ConfigOption, inputValue: any) => {},\n  startedQuiz: false,\n  goToNextQuizConfiguration: () => {},\n  uploadQuestions: () => {},\n  reset: () => {},\n  usersCustomQuizzes: [],\n  getCustomQuizzes: () => {},\n  getPublicQuizQuestions: () => \"success\"\n};\n\nexport const QuizzesContext = createContext(startingValue);\n\nexport const QuizzesContextProvider: React.FC = ({ children }) => {\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  const [numberOfQuestions, setNumberOfQuestions] = useState<number>(5);\n  const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n  const [quizConfigurationStep, setQuizConfigurationStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n  const [usersCustomQuizzes, setUsersCustomQuizzes] = useState<PrivateQuiz[]>(\n    []\n  );\n  const { startLoading, stopLoading } = useContext(LoadingContext);\n\n  const uploadQuestions = (questions: Question[]) => {\n    // if (questions.length === 0) {\n    //   throw new Error(\n    //     \"Not enough quizzes matching these parameters. Try again!\"\n    //   );\n    // }\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  const getPublicQuizQuestions = async () => {\n    try {\n      startLoading();\n      const questionsToUpload = await getQuestions({\n        quizType,\n        difficulty: difficultyLevel,\n        numOfQuestions: numberOfQuestions,\n        subject: currentSubject\n      });\n      if (questionsToUpload.length === 0) {\n        throw new Error(\n          \"Not enough quizzes matching these parameters. Try again!\"\n        );\n      }\n      uploadQuestions(questionsToUpload);\n      stopLoading();\n      return \"success\";\n    } catch (err) {\n      stopLoading();\n      // throw err;\n      console.log(\"from catch\", err.message);\n      return err.message;\n    }\n  };\n\n  const getCustomQuizzes = async () => {\n    startLoading();\n    const dbResponse = await getCustomUsersQuizzes();\n    const customQuizzes = dbResponse.payload;\n    setUsersCustomQuizzes(customQuizzes);\n    stopLoading();\n  };\n\n  useEffect(() => {\n    getCustomQuizzes();\n  }, []);\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setQuizConfigurationStep(1);\n    setNumberOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const configQuiz = (option: ConfigOption, inputValue: any) => {\n    if (option === \"quizType\") {\n      reset();\n      setQuizType(inputValue);\n    }\n    if (option === \"difficulty\") {\n      setDifficultyLevel(inputValue);\n    }\n    if (option === \"numberOfQuestions\") {\n      setNumberOfQuestions(inputValue);\n    }\n    if (option === \"subject\") {\n      setCurrentSubject(inputValue);\n    }\n  };\n\n  const goToNextQuizConfiguration = () =>\n    setQuizConfigurationStep(prev => prev + 1);\n\n  const valuesToPass: iQuizzesContext = {\n    quizType,\n    currentSubject,\n    difficultyLevel,\n    numberOfQuestions,\n    questions,\n    quizConfigurationStep,\n    configQuiz,\n    goToNextQuizConfiguration,\n    startedQuiz,\n    uploadQuestions,\n    reset,\n    usersCustomQuizzes,\n    getCustomQuizzes,\n    getPublicQuizQuestions\n  };\n\n  return (\n    <QuizzesContext.Provider value={{ ...valuesToPass }}>\n      {children}\n    </QuizzesContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}