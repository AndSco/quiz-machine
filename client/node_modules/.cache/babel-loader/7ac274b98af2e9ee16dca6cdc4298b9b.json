{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/public/optionSteps/SubjectsStep.tsx\";\nimport React, { useContext } from \"react\";\nimport { BigTitle, Title, SubTitle } from \"../../../UI/Titles\";\nimport { QuizType } from \"../../../../models/PublicQuizQuestion\";\nimport { shortenLengthySubjects, getSubjectBackgroundPic } from \"../../../../utils/functions\";\nimport { ProgrammingCategories, TriviaCategories } from \"../../../../constants/questionCategories\";\nimport { QuizzesContext } from \"../../../../contexts/quizzes/Quizzes\";\nimport { GridWrapper } from \"../../../UI/GridWrapper\";\nimport { GridCard } from \"../../../UI/GridCard\";\nimport { FingerDown } from \"../../../UI/FingerDown\";\nimport { UsersCustomQuizzes } from \"../UsersCustomQuizzes\";\nimport { Thumbnail } from \"../../../UI/Thumbnail\";\n\nconst SubjectElement = ({\n  title,\n  value\n}) => {\n  const {\n    configQuiz,\n    goToNextQuizConfiguration\n  } = useContext(QuizzesContext);\n  return /*#__PURE__*/React.createElement(GridCard, {\n    onClick: () => {\n      configQuiz(\"subject\", value);\n      goToNextQuizConfiguration();\n    },\n    style: {\n      backgroundImage: `url(\"${getSubjectBackgroundPic(value)})\"`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, title));\n};\n\nexport const SubjectsStep = ({\n  quizType\n}) => {\n  if (quizType === QuizType.USERS_QUIZZES) return /*#__PURE__*/React.createElement(UsersCustomQuizzes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 51\n    }\n  });\n  const availableSubjects = quizType === QuizType.TRIVIA ? TriviaCategories : ProgrammingCategories;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BigTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, quizType.toUpperCase(), \" QUIZ\"), /*#__PURE__*/React.createElement(SubTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Choose a topic \", /*#__PURE__*/React.createElement(FingerDown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }\n  })), /*#__PURE__*/React.createElement(GridWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, availableSubjects.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n\n    if (a > b) {\n      return 1;\n    }\n\n    return 0;\n  }).map(subject =>\n  /*#__PURE__*/\n  // <SubjectElement\n  //   key={subject}\n  //   value={subject as Subject}\n  //   title={shortenLengthySubjects(subject as string)!}\n  // />\n  React.createElement(Thumbnail, {\n    purpose: \"apiQuizzes\",\n    key: subject,\n    title: shortenLengthySubjects(subject),\n    value: subject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Thumbnail, {\n    purpose: \"apiQuizzes\",\n    title: \"Random\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/public/optionSteps/SubjectsStep.tsx"],"names":["React","useContext","BigTitle","Title","SubTitle","QuizType","shortenLengthySubjects","getSubjectBackgroundPic","ProgrammingCategories","TriviaCategories","QuizzesContext","GridWrapper","GridCard","FingerDown","UsersCustomQuizzes","Thumbnail","SubjectElement","title","value","configQuiz","goToNextQuizConfiguration","backgroundImage","SubjectsStep","quizType","USERS_QUIZZES","availableSubjects","TRIVIA","toUpperCase","sort","a","b","map","subject"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,QAA1B,QAA0C,oBAA1C;AACA,SAASC,QAAT,QAAkC,uCAAlC;AACA,SACEC,sBADF,EAEEC,uBAFF,QAGO,6BAHP;AAIA,SACEC,qBADF,EAEEC,gBAFF,QAGO,0CAHP;AAIA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,SAAT,QAA0B,uBAA1B;;AAEA,MAAMC,cAA2D,GAAG,CAAC;AACnEC,EAAAA,KADmE;AAEnEC,EAAAA;AAFmE,CAAD,KAG9D;AACJ,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4CnB,UAAU,CAACS,cAAD,CAA5D;AACA,sBACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbS,MAAAA,UAAU,CAAC,SAAD,EAAYD,KAAZ,CAAV;AACAE,MAAAA,yBAAyB;AAC1B,KAJH;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAG,QAAOd,uBAAuB,CAACW,KAAD,CAAQ;AAA1D,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQD,KAAR,CAPF,CADF;AAWD,CAhBD;;AAsBA,OAAO,MAAMK,YAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7D,MAAIA,QAAQ,KAAKlB,QAAQ,CAACmB,aAA1B,EAAyC,oBAAO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEzC,QAAMC,iBAAiB,GACrBF,QAAQ,KAAKlB,QAAQ,CAACqB,MAAtB,GAA+BjB,gBAA/B,GAAkDD,qBADpD;AAEA,sBACE,uDACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWe,QAAQ,CAACI,WAAT,EAAX,UADF,eAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACiB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjB,CAFF,eAKE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CACfG,IADF,CACO,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,QAAID,CAAC,GAAIC,CAAT,EAAa;AACX,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,CAAC,GAAIC,CAAT,EAAa;AACX,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GATF,EAUEC,GAVF,CAUMC,OAAO;AAAA;AACV;AACA;AACA;AACA;AACA;AACA,sBAAC,SAAD;AACE,IAAA,OAAO,EAAC,YADV;AAEE,IAAA,GAAG,EAAEA,OAFP;AAGE,IAAA,KAAK,EAAE1B,sBAAsB,CAAC0B,OAAD,CAH/B;AAIE,IAAA,KAAK,EAAEA,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBH,CADH,eAyBE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,YAAnB;AAAgC,IAAA,KAAK,EAAC,QAAtC;AAA+C,IAAA,KAAK,EAAC,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,CALF,CADF;AAmCD,CAxCM","sourcesContent":["import React, { useContext } from \"react\";\nimport { BigTitle, Title, SubTitle } from \"../../../UI/Titles\";\nimport { QuizType, Subject } from \"../../../../models/PublicQuizQuestion\";\nimport {\n  shortenLengthySubjects,\n  getSubjectBackgroundPic\n} from \"../../../../utils/functions\";\nimport {\n  ProgrammingCategories,\n  TriviaCategories\n} from \"../../../../constants/questionCategories\";\nimport { QuizzesContext } from \"../../../../contexts/quizzes/Quizzes\";\nimport { GridWrapper } from \"../../../UI/GridWrapper\";\nimport { GridCard } from \"../../../UI/GridCard\";\nimport { FingerDown } from \"../../../UI/FingerDown\";\nimport { UsersCustomQuizzes } from \"../UsersCustomQuizzes\";\nimport { Thumbnail } from \"../../../UI/Thumbnail\";\n\nconst SubjectElement: React.FC<{ title: string; value: Subject }> = ({\n  title,\n  value\n}) => {\n  const { configQuiz, goToNextQuizConfiguration } = useContext(QuizzesContext);\n  return (\n    <GridCard\n      onClick={() => {\n        configQuiz(\"subject\", value);\n        goToNextQuizConfiguration();\n      }}\n      style={{ backgroundImage: `url(\"${getSubjectBackgroundPic(value)})\"` }}\n    >\n      <Title>{title}</Title>\n    </GridCard>\n  );\n};\n\ninterface Props {\n  quizType: QuizType;\n}\n\nexport const SubjectsStep: React.FC<Props> = ({ quizType }) => {\n  if (quizType === QuizType.USERS_QUIZZES) return <UsersCustomQuizzes />;\n\n  const availableSubjects =\n    quizType === QuizType.TRIVIA ? TriviaCategories : ProgrammingCategories;\n  return (\n    <>\n      <BigTitle>{quizType.toUpperCase()} QUIZ</BigTitle>\n      <SubTitle>\n        Choose a topic <FingerDown />\n      </SubTitle>\n      <GridWrapper>\n        {availableSubjects\n          .sort((a, b) => {\n            if (a! < b!) {\n              return -1;\n            }\n            if (a! > b!) {\n              return 1;\n            }\n            return 0;\n          })\n          .map(subject => (\n            // <SubjectElement\n            //   key={subject}\n            //   value={subject as Subject}\n            //   title={shortenLengthySubjects(subject as string)!}\n            // />\n            <Thumbnail\n              purpose=\"apiQuizzes\"\n              key={subject}\n              title={shortenLengthySubjects(subject as string)!}\n              value={subject as Subject}\n            />\n          ))}\n        {/* <SubjectElement value=\"\" title=\"Random\" /> */}\n        <Thumbnail purpose=\"apiQuizzes\" title=\"Random\" value=\"\" />\n      </GridWrapper>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}