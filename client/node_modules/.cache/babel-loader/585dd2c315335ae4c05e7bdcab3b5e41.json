{"ast":null,"code":"// QUIZ CREATION\nexport const QuizCreationReducer = (state, action) => {\n  if (action.type === \"questions\") {\n    // manage delete question\n    if (typeof action.payload === \"string\") {\n      const questionToRemove = action.payload;\n      const remainingQuestions = state.questions.filter(question => question.question !== questionToRemove);\n      console.log(\"questions left will be \", remainingQuestions);\n      return { ...state,\n        questions: remainingQuestions\n      };\n    }\n\n    return { ...state,\n      questions: [...state.questions, action.payload]\n    };\n  }\n\n  const newState = { ...state,\n    [action.type]: action.payload\n  };\n  return newState;\n};\nexport const QuizCreationStartingValues = {\n  title: \"\",\n  backgroundImageUrl: \"\",\n  isPrivate: true,\n  questions: []\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/reducers/QuizCreation.ts"],"names":["QuizCreationReducer","state","action","type","payload","questionToRemove","remainingQuestions","questions","filter","question","console","log","newState","QuizCreationStartingValues","title","backgroundImageUrl","isPrivate"],"mappings":"AAcA;AAGA,OAAO,MAAMA,mBAGZ,GAAG,CACFC,KADE,EAEFC,MAFE,KAGyB;AAC3B,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,QAAI,OAAOD,MAAM,CAACE,OAAd,KAA0B,QAA9B,EAAwC;AACtC,YAAMC,gBAAgB,GAAGH,MAAM,CAACE,OAAhC;AACA,YAAME,kBAAkB,GAAGL,KAAK,CAACM,SAAN,CAAgBC,MAAhB,CACzBC,QAAQ,IAAIA,QAAQ,CAACA,QAAT,KAAsBJ,gBADT,CAA3B;AAIAK,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCL,kBAAvC;AACA,aAAO,EAAE,GAAGL,KAAL;AAAYM,QAAAA,SAAS,EAAED;AAAvB,OAAP;AACD;;AACD,WAAO,EACL,GAAGL,KADE;AAELM,MAAAA,SAAS,EAAE,CAAC,GAAGN,KAAK,CAACM,SAAV,EAAqBL,MAAM,CAACE,OAA5B;AAFN,KAAP;AAID;;AAED,QAAMQ,QAAQ,GAAG,EACf,GAAGX,KADY;AAEf,KAACC,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFP,GAAjB;AAIA,SAAOQ,QAAP;AACD,CA7BM;AA+BP,OAAO,MAAMC,0BAAkD,GAAG;AAChEC,EAAAA,KAAK,EAAE,EADyD;AAEhEC,EAAAA,kBAAkB,EAAE,EAF4C;AAGhEC,EAAAA,SAAS,EAAE,IAHqD;AAIhET,EAAAA,SAAS,EAAE;AAJqD,CAA3D","sourcesContent":["import React from \"react\";\nimport { PrivateQuiz, PrivateQuizQuestion } from \"../models/PrivateQuiz\";\n\nexport type InputName =\n  | \"title\"\n  | \"backgroundImageUrl\"\n  | \"questions\"\n  | \"isPrivate\";\n\nexport interface QuizCreationAction {\n  type: InputName;\n  payload?: string | boolean | PrivateQuizQuestion[] | PrivateQuizQuestion;\n}\n\n// QUIZ CREATION\nexport interface QuizCreationFormInputs extends PrivateQuiz {}\n\nexport const QuizCreationReducer: React.Reducer<\n  QuizCreationFormInputs,\n  QuizCreationAction\n> = (\n  state: QuizCreationFormInputs,\n  action: QuizCreationAction\n): QuizCreationFormInputs => {\n  if (action.type === \"questions\") {\n    // manage delete question\n    if (typeof action.payload === \"string\") {\n      const questionToRemove = action.payload;\n      const remainingQuestions = state.questions.filter(\n        question => question.question !== questionToRemove\n      );\n\n      console.log(\"questions left will be \", remainingQuestions);\n      return { ...state, questions: remainingQuestions };\n    }\n    return {\n      ...state,\n      questions: [...state.questions, action.payload as PrivateQuizQuestion]\n    };\n  }\n\n  const newState = {\n    ...state,\n    [action.type]: action.payload\n  };\n  return newState;\n};\n\nexport const QuizCreationStartingValues: QuizCreationFormInputs = {\n  title: \"\",\n  backgroundImageUrl: \"\",\n  isPrivate: true,\n  questions: []\n};\n"]},"metadata":{},"sourceType":"module"}