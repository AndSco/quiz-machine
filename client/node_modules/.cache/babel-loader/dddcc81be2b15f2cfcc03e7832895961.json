{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/QuestionSubForm.tsx\";\nimport React, { useState } from \"react\";\nimport { PrivateQuizQuestion } from \"../../../../models/PrivateQuiz\";\nimport { FormContainer, FormTitle } from \"../../../UI/Form\";\nimport { StyledInput, Container as InputContainer, StyledLabel } from \"../../../UI/Input\";\nimport { SmallButton } from \"../../../UI/Buttons\";\nimport { Modal } from \"../../../UI/Modal\";\nimport { shuffleArray, capitaliseInput } from \"../../../../utils/functions\";\nimport { Colors } from \"../../../../constants/colors\";\nimport { Icon } from \"../../../UI/Icon\";\nimport { Clickable } from \"../../../UI/Clickable\";\nimport { AddCodeButton, ComplexInputContainer, StyledUploadedReplies, PinkSubmitButton, StyledAnswer } from \"./QuizFormStyledComponents\";\n\nconst Answer = ({\n  label,\n  value,\n  isRight\n}) => {\n  return /*#__PURE__*/React.createElement(StyledAnswer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: isRight ? \"check-circle\" : \"times-circle\",\n    color: isRight ? Colors.GREEN : Colors.RED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: Colors.LIGHTEST_GREY,\n      marginRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, label), value));\n};\n\nconst QuestionInput = ({\n  label,\n  handleChangeFunction,\n  value,\n  isTextArea = false\n}) => {\n  return /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, label), !isTextArea ? /*#__PURE__*/React.createElement(StyledInput, {\n    type: \"text\",\n    onChange: handleChangeFunction,\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(StyledInput, {\n    as: \"textarea\",\n    value: value,\n    onChange: handleChangeFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst UploadedReplies = ({\n  replies\n}) => {\n  return /*#__PURE__*/React.createElement(StyledUploadedReplies, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, replies.map((reply, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Answer, {\n    label: \"A: \",\n    isRight: false,\n    value: reply,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport const QuestionSubForm = ({\n  saveQuestionInState,\n  closeItself\n}) => {\n  const [question, setQuestion] = useState(\"\");\n  const [hasEnteredQuestion, setHasEnteredQuestion] = useState(false);\n  const [hasEnteredRightReply, setHasEnteredRightReply] = useState(false);\n  const [currentReply, setCurrentReply] = useState(\"\");\n  const [rightReply, setRightReply] = useState(\"\");\n  const [allReplies, setAllReplies] = useState([]);\n  const [needsToAddCode, setNeedsToAddCode] = useState(false);\n  const [code, setCode] = useState(\"\");\n  console.log(\"CODE\", code);\n\n  const handleSubmit = () => {\n    const wrongAndRightReplies = shuffleArray([...allReplies, rightReply]);\n    const questionToSave = new PrivateQuizQuestion(question, wrongAndRightReplies, rightReply, code);\n    console.log(\"Now saving\", questionToSave);\n    saveQuestionInState(questionToSave);\n    closeItself();\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    handleClose: closeItself,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Add a question to your quiz\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, hasEnteredQuestion ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Q: \", question) : /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInput, {\n    label: \"Question\",\n    value: question,\n    handleChangeFunction: e => setQuestion(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }), !needsToAddCode ? /*#__PURE__*/React.createElement(Clickable, {\n    onClick: () => setNeedsToAddCode(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddCodeButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }, \"Click here to add code to this question\")) : /*#__PURE__*/React.createElement(QuestionInput, {\n    label: \"Add code\",\n    handleChangeFunction: e => setCode(e.target.value),\n    value: code,\n    isTextArea: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      if (question.length > 3) {\n        alert(\"Enter a valid input!\");\n        return;\n      }\n\n      setQuestion(prev => capitaliseInput(prev));\n      setHasEnteredQuestion(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, \"Continue\")), !hasEnteredRightReply && hasEnteredQuestion && /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInput, {\n    value: rightReply,\n    label: \"Add the right reply\",\n    handleChangeFunction: e => setRightReply(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      setRightReply(prev => capitaliseInput(prev));\n      setHasEnteredRightReply(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, \"Continue\")), hasEnteredRightReply && /*#__PURE__*/React.createElement(Answer, {\n    label: \"Correct answer: \",\n    value: rightReply,\n    isRight: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), allReplies.length > 0 && /*#__PURE__*/React.createElement(UploadedReplies, {\n    replies: allReplies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }), hasEnteredQuestion && hasEnteredRightReply && /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(QuestionInput, {\n    value: currentReply,\n    label: \"Add a (wrong) answer\",\n    handleChangeFunction: e => setCurrentReply(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      setAllReplies(prevReplies => [...prevReplies, capitaliseInput(currentReply)]);\n      setCurrentReply(\"\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, \"Add\")), /*#__PURE__*/React.createElement(PinkSubmitButton, {\n    type: \"submit\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, \"SAVE QUESTION\"))));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/QuestionSubForm.tsx"],"names":["React","useState","PrivateQuizQuestion","FormContainer","FormTitle","StyledInput","Container","InputContainer","StyledLabel","SmallButton","Modal","shuffleArray","capitaliseInput","Colors","Icon","Clickable","AddCodeButton","ComplexInputContainer","StyledUploadedReplies","PinkSubmitButton","StyledAnswer","Answer","label","value","isRight","GREEN","RED","color","LIGHTEST_GREY","marginRight","QuestionInput","handleChangeFunction","isTextArea","UploadedReplies","replies","map","reply","index","QuestionSubForm","saveQuestionInState","closeItself","question","setQuestion","hasEnteredQuestion","setHasEnteredQuestion","hasEnteredRightReply","setHasEnteredRightReply","currentReply","setCurrentReply","rightReply","setRightReply","allReplies","setAllReplies","needsToAddCode","setNeedsToAddCode","code","setCode","console","log","handleSubmit","wrongAndRightReplies","questionToSave","e","preventDefault","target","length","alert","prev","prevReplies"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PrivateQuizQuestion } from \"../../../../models/PrivateQuiz\";\nimport { FormContainer, FormTitle, SubmitButton } from \"../../../UI/Form\";\nimport {\n  StyledInput,\n  Container as InputContainer,\n  StyledLabel\n} from \"../../../UI/Input\";\nimport { SmallButton } from \"../../../UI/Buttons\";\nimport { Modal } from \"../../../UI/Modal\";\nimport { shuffleArray, capitaliseInput } from \"../../../../utils/functions\";\nimport { Colors } from \"../../../../constants/colors\";\nimport { Icon } from \"../../../UI/Icon\";\nimport { Clickable } from \"../../../UI/Clickable\";\nimport {\n  AddCodeButton,\n  ComplexInputContainer,\n  StyledUploadedReplies,\n  PinkSubmitButton,\n  StyledAnswer\n} from \"./QuizFormStyledComponents\";\n\nconst Answer: React.FC<{ label: string; value: string; isRight: boolean }> = ({\n  label,\n  value,\n  isRight\n}) => {\n  return (\n    <StyledAnswer>\n      <Icon\n        icon={isRight ? \"check-circle\" : \"times-circle\"}\n        color={isRight ? Colors.GREEN : Colors.RED}\n      />{\" \"}\n      <h5>\n        <span style={{ color: Colors.LIGHTEST_GREY, marginRight: 5 }}>\n          {label}\n        </span>\n        {value}\n      </h5>\n    </StyledAnswer>\n  );\n};\n\nconst QuestionInput: React.FC<{\n  label: string;\n  handleChangeFunction: any;\n  value: string;\n  isTextArea?: boolean;\n}> = ({ label, handleChangeFunction, value, isTextArea = false }) => {\n  return (\n    <InputContainer>\n      <StyledLabel>{label}</StyledLabel>\n      {!isTextArea ? (\n        <StyledInput\n          type=\"text\"\n          onChange={handleChangeFunction}\n          value={value}\n        />\n      ) : (\n        <StyledInput\n          as={\"textarea\"}\n          value={value}\n          onChange={handleChangeFunction}\n        />\n      )}\n    </InputContainer>\n  );\n};\n\nconst UploadedReplies: React.FC<{ replies: string[] }> = ({ replies }) => {\n  return (\n    <StyledUploadedReplies>\n      {replies.map((reply, index) => (\n        <li key={index}>\n          <Answer label=\"A: \" isRight={false} value={reply} />\n        </li>\n      ))}\n    </StyledUploadedReplies>\n  );\n};\n\ninterface Props {\n  saveQuestionInState: (question: PrivateQuizQuestion) => void;\n  closeItself: () => void;\n}\n\nexport const QuestionSubForm: React.FC<Props> = ({\n  saveQuestionInState,\n  closeItself\n}) => {\n  const [question, setQuestion] = useState(\"\");\n  const [hasEnteredQuestion, setHasEnteredQuestion] = useState(false);\n  const [hasEnteredRightReply, setHasEnteredRightReply] = useState(false);\n  const [currentReply, setCurrentReply] = useState(\"\");\n  const [rightReply, setRightReply] = useState(\"\");\n  const [allReplies, setAllReplies] = useState<string[]>([]);\n  const [needsToAddCode, setNeedsToAddCode] = useState(false);\n  const [code, setCode] = useState(\"\");\n  console.log(\"CODE\", code);\n\n  const handleSubmit = () => {\n    const wrongAndRightReplies = shuffleArray<string>([\n      ...allReplies,\n      rightReply\n    ]);\n    const questionToSave = new PrivateQuizQuestion(\n      question,\n      wrongAndRightReplies,\n      rightReply,\n      code\n    );\n    console.log(\"Now saving\", questionToSave);\n    saveQuestionInState(questionToSave);\n    closeItself();\n  };\n\n  return (\n    <Modal handleClose={closeItself}>\n      <FormContainer>\n        <FormTitle>Add a question to your quiz</FormTitle>\n        <form\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            e.preventDefault();\n          }}\n        >\n          {hasEnteredQuestion ? (\n            <h3>Q: {question}</h3>\n          ) : (\n            <ComplexInputContainer>\n              <QuestionInput\n                label=\"Question\"\n                value={question}\n                handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                  setQuestion(e.target.value)\n                }\n              />\n\n              {!needsToAddCode ? (\n                <Clickable onClick={() => setNeedsToAddCode(true)}>\n                  <AddCodeButton>\n                    Click here to add code to this question\n                  </AddCodeButton>\n                </Clickable>\n              ) : (\n                <QuestionInput\n                  label=\"Add code\"\n                  handleChangeFunction={(\n                    e: React.ChangeEvent<HTMLTextAreaElement>\n                  ) => setCode(e.target.value)}\n                  value={code}\n                  isTextArea={true}\n                />\n              )}\n              <SmallButton\n                onClick={() => {\n                  if (question.length > 3) {\n                    alert(\"Enter a valid input!\");\n                    return;\n                  }\n                  setQuestion(prev => capitaliseInput(prev));\n                  setHasEnteredQuestion(true);\n                }}\n              >\n                Continue\n              </SmallButton>\n            </ComplexInputContainer>\n          )}\n\n          {!hasEnteredRightReply && hasEnteredQuestion && (\n            <ComplexInputContainer>\n              <QuestionInput\n                value={rightReply}\n                label=\"Add the right reply\"\n                handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                  setRightReply(e.target.value)\n                }\n              />\n\n              <SmallButton\n                onClick={() => {\n                  setRightReply(prev => capitaliseInput(prev));\n                  setHasEnteredRightReply(true);\n                }}\n              >\n                Continue\n              </SmallButton>\n            </ComplexInputContainer>\n          )}\n\n          {hasEnteredRightReply && (\n            <Answer\n              label=\"Correct answer: \"\n              value={rightReply}\n              isRight={true}\n            />\n          )}\n          {allReplies.length > 0 && <UploadedReplies replies={allReplies} />}\n\n          {hasEnteredQuestion && hasEnteredRightReply && (\n            <ComplexInputContainer>\n              <QuestionInput\n                value={currentReply}\n                label=\"Add a (wrong) answer\"\n                handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                  setCurrentReply(e.target.value)\n                }\n              />\n\n              <SmallButton\n                onClick={() => {\n                  setAllReplies(prevReplies => [\n                    ...prevReplies,\n                    capitaliseInput(currentReply)\n                  ]);\n                  setCurrentReply(\"\");\n                }}\n              >\n                Add\n              </SmallButton>\n            </ComplexInputContainer>\n          )}\n\n          <PinkSubmitButton type=\"submit\" onClick={handleSubmit}>\n            SAVE QUESTION\n          </PinkSubmitButton>\n        </form>\n      </FormContainer>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}