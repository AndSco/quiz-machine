{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizCreationOrEditForm.tsx\";\nimport React, { useReducer, useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { QuizCreationReducer, QuizCreationStartingValues } from \"../../../reducers/QuizCreation\";\nimport { Input, StyledLabel, Container as InputContainer } from \"../../UI/Input\";\nimport { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\nimport { Colors } from \"../../../constants/colors\";\nimport { QuestionSubForm } from \"./QuestionSubForm\";\nimport { createQuiz, editQuiz } from \"../../../utils/dbFunctions\";\nimport { AuthContext } from \"../../../contexts/auth/Auth\";\nimport { SavedQuestionCard } from \"./SavedQuestionCard\";\nimport { Icon } from \"../../UI/Icon\";\nimport { capitaliseInput, getPropertyName } from \"../../../utils/functions\";\nconst RadioButtonsContainer = styled.div`\n  display: flex;\n  margin: 0.5rem 0 1rem 0;\n`;\nconst RadioContainer = styled.div`\n  display: flex;\n  margin: 0 1rem;\n  background-color: ${props => props.isSelected ? Colors.ORANGE : Colors.LIGHTEST_GREY};\n  color: ${props => props.isSelected ? \"white\" : \"grey\"};\n  padding: 0.4rem 0.9rem 0.4rem 0.6rem;\n  align-items: center;\n  border-radius: 40px;\n  cursor: pointer;\n\n  label {\n    padding-left: 6px;\n    font-size: 0.8rem;\n    cursor: pointer;\n  }\n\n  input {\n    margin: 0;\n    display: none;\n  }\n`;\nconst AddQuestionButton = styled.h4`\n  color: ${Colors.STEEL_PINK_2};\n  background-color: white;\n  padding: 0.5rem;\n  border-radius: 40px;\n  margin: 2.5rem;\n  cursor: pointer;\n  font-size: 1rem;\n\n  :hover {\n    color: white;\n    background-color: ${Colors.STEEL_PINK_2};\n  }\n`;\nexport const QuizCreationOrEditForm = ({\n  usage,\n  currentQuiz\n}) => {\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(QuizCreationReducer, usage === \"creation\" ? QuizCreationStartingValues : currentQuiz);\n  const [uploadMessage, setUploadMessage] = useState(\"\");\n  const [showUploadedQuestions, setShowUploadedQuestions] = useState(false);\n  console.log(\"title\", inputValues.title);\n\n  const handleChange = (input, inputName) => {\n    dispatch({\n      type: inputName,\n      payload: input\n    });\n  };\n\n  const handleSubmit = async () => {\n    const quizGenerated = { ...inputValues\n    };\n    quizGenerated.title = capitaliseInput(quizGenerated.title);\n    console.log(\"QUIZ generated\", quizGenerated);\n\n    if (usage === \"editing\") {\n      editQuiz(currentQuiz._id, quizGenerated);\n      return;\n    }\n\n    const response = await createQuiz(quizGenerated, currentUser._id);\n    setUploadMessage(response.message);\n  };\n\n  const handleRadioButtonChange = choice => {\n    const actionToDispatch = {\n      type: \"isPrivate\",\n      payload: false\n    };\n\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n\n    dispatch(actionToDispatch);\n  };\n\n  const saveQuestionInState = question => dispatch({\n    type: \"questions\",\n    payload: question\n  });\n\n  const closeQuestionForm = () => setIsAddingQuestions(false);\n\n  return /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, isAddingQuestions && /*#__PURE__*/React.createElement(QuestionSubForm, {\n    saveQuestionInState: saveQuestionInState,\n    closeItself: closeQuestionForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), uploadMessage ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, uploadMessage) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Create your quiz\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    inputName: \"title\",\n    onChangeFunction: handleChange,\n    value: getPropertyName(inputValues, \"title\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    inputName: \"backgroundImageUrl\",\n    onChangeFunction: handleChange,\n    value: getPropertyName(inputValues, \"backgroundImageUrl\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, \"What do you want to do with this quiz?\".toUpperCase()), /*#__PURE__*/React.createElement(RadioButtonsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RadioContainer, {\n    isSelected: inputValues.isPrivate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"yes\",\n    name: \"isPrivate\",\n    value: \"yes\",\n    onChange: e => handleRadioButtonChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"yes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, \"Keep private\")), /*#__PURE__*/React.createElement(RadioContainer, {\n    isSelected: !inputValues.isPrivate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"no\",\n    name: \"isPrivate\",\n    value: \"no\",\n    onChange: e => handleRadioButtonChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 19\n    }\n  }, \"Make public\")))), /*#__PURE__*/React.createElement(AddQuestionButton, {\n    onClick: () => setIsAddingQuestions(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"plus-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }), \"Add a question\"), /*#__PURE__*/React.createElement(\"h5\", {\n    onClick: () => setShowUploadedQuestions(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \"Show uploaded questions\"), inputValues.questions.length > 0 && showUploadedQuestions && inputValues.questions.map((question, index) => /*#__PURE__*/React.createElement(SavedQuestionCard, {\n    key: index,\n    question: question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(SubmitButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, \"SUBMIT\"))));\n}; // import React, { useReducer, useState, useContext } from \"react\";\n// import styled from \"styled-components\";\n// import {\n//   QuizCreationReducer,\n//   QuizCreationStartingValues,\n//   QuizCreationAction,\n//   InputName\n// } from \"../../../reducers/QuizCreation\";\n// import {\n//   Input,\n//   StyledLabel,\n//   Container as InputContainer\n// } from \"../../UI/Input\";\n// import { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\n// import { Colors } from \"../../../constants/colors\";\n// import {\n//   PrivateQuizQuestion,\n//   PrivacyChoice\n// } from \"../../../models/PrivateQuiz\";\n// import { QuestionSubForm } from \"./QuestionSubForm\";\n// import { createQuiz } from \"../../../utils/dbFunctions\";\n// import { AuthContext } from \"../../../contexts/auth/Auth\";\n// import { ApiResponse } from \"../../../models/ApiResponse\";\n// import { SavedQuestionCard } from \"./SavedQuestionCard\";\n// import { Icon } from \"../../UI/Icon\";\n// import { capitaliseInput } from \"../../../utils/functions\";\n// const RadioButtonsContainer = styled.div`\n//   display: flex;\n//   margin: 0.5rem 0 1rem 0;\n// `;\n// const RadioContainer = styled.div`\n//   display: flex;\n//   margin: 0 1rem;\n//   background-color: ${(props: { isSelected: boolean }) =>\n//     props.isSelected ? Colors.ORANGE : Colors.LIGHTEST_GREY};\n//   color: ${(props: { isSelected: boolean }) =>\n//     props.isSelected ? \"white\" : \"grey\"};\n//   padding: 0.4rem 0.9rem 0.4rem 0.6rem;\n//   align-items: center;\n//   border-radius: 40px;\n//   cursor: pointer;\n//   label {\n//     padding-left: 6px;\n//     font-size: 0.8rem;\n//     cursor: pointer;\n//   }\n//   input {\n//     margin: 0;\n//     display: none;\n//   }\n// `;\n// const AddQuestionButton = styled.h4`\n//   color: ${Colors.STEEL_PINK_2};\n//   background-color: white;\n//   padding: 0.5rem;\n//   border-radius: 40px;\n//   margin: 2.5rem;\n//   cursor: pointer;\n//   font-size: 1rem;\n//   :hover {\n//     color: white;\n//     background-color: ${Colors.STEEL_PINK_2};\n//   }\n// `;\n// export const QuizCreationForm: React.FC = () => {\n//   const { currentUser } = useContext(AuthContext);\n//   const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n//   const [inputValues, dispatch] = useReducer(\n//     QuizCreationReducer,\n//     QuizCreationStartingValues\n//   );\n//   const [uploadMessage, setUploadMessage] = useState(\"\");\n//   console.log(inputValues);\n//   const handleChange = (input: string, inputName: InputName) => {\n//     dispatch({ type: inputName, payload: input });\n//   };\n//   const handleSubmit = async () => {\n//     const quizCreated = { ...inputValues };\n//     quizCreated.title = capitaliseInput(quizCreated.title);\n//     console.log(\"QUIZ CREATED\", quizCreated);\n//     const response = await createQuiz(quizCreated, currentUser!._id);\n//     setUploadMessage((response as ApiResponse).message as string);\n//   };\n//   const handleRadioButtonChange = (choice: PrivacyChoice) => {\n//     const actionToDispatch: QuizCreationAction = {\n//       type: \"isPrivate\",\n//       payload: false\n//     };\n//     if (choice === \"yes\") {\n//       actionToDispatch.payload = true;\n//     }\n//     dispatch(actionToDispatch);\n//   };\n//   const saveQuestionInState = (question: PrivateQuizQuestion) =>\n//     dispatch({ type: \"questions\", payload: question });\n//   const closeQuestionForm = () => setIsAddingQuestions(false);\n//   return (\n//     <FormContainer>\n//       {isAddingQuestions && (\n//         <QuestionSubForm\n//           saveQuestionInState={saveQuestionInState}\n//           closeItself={closeQuestionForm}\n//         />\n//       )}\n//       {uploadMessage ? (\n//         <h2>{uploadMessage}</h2>\n//       ) : (\n//         <>\n//           <FormTitle>Create your quiz</FormTitle>\n//           <form\n//             onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n//               e.preventDefault();\n//               handleSubmit();\n//             }}\n//           >\n//             <Input inputName=\"title\" onChangeFunction={handleChange} />\n//             <Input\n//               inputName=\"backgroundImageUrl\"\n//               onChangeFunction={handleChange}\n//             />\n//             <InputContainer>\n//               <StyledLabel>\n//                 {\"What do you want to do with this quiz?\".toUpperCase()}\n//               </StyledLabel>\n//               <RadioButtonsContainer>\n//                 <RadioContainer isSelected={inputValues.isPrivate}>\n//                   <input\n//                     type=\"radio\"\n//                     id=\"yes\"\n//                     name=\"isPrivate\"\n//                     value=\"yes\"\n//                     onChange={e =>\n//                       handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                     }\n//                   />\n//                   <label htmlFor=\"yes\">Keep private</label>\n//                 </RadioContainer>\n//                 <RadioContainer isSelected={!inputValues.isPrivate}>\n//                   <input\n//                     type=\"radio\"\n//                     id=\"no\"\n//                     name=\"isPrivate\"\n//                     value=\"no\"\n//                     onChange={e =>\n//                       handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                     }\n//                   />\n//                   <label htmlFor=\"no\">Make public</label>\n//                 </RadioContainer>\n//               </RadioButtonsContainer>\n//             </InputContainer>\n//             <AddQuestionButton onClick={() => setIsAddingQuestions(true)}>\n//               <Icon icon={\"plus-circle\"} />\n//               Add a question\n//             </AddQuestionButton>\n//             {inputValues.questions.length > 0 &&\n//               inputValues.questions.map((question, index) => (\n//                 <SavedQuestionCard key={index} question={question} />\n//               ))}\n//             <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n//           </form>\n//         </>\n//       )}\n//     </FormContainer>\n//   );\n// };","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizCreationOrEditForm.tsx"],"names":["React","useReducer","useState","useContext","styled","QuizCreationReducer","QuizCreationStartingValues","Input","StyledLabel","Container","InputContainer","FormContainer","FormTitle","SubmitButton","Colors","QuestionSubForm","createQuiz","editQuiz","AuthContext","SavedQuestionCard","Icon","capitaliseInput","getPropertyName","RadioButtonsContainer","div","RadioContainer","props","isSelected","ORANGE","LIGHTEST_GREY","AddQuestionButton","h4","STEEL_PINK_2","QuizCreationOrEditForm","usage","currentQuiz","currentUser","isAddingQuestions","setIsAddingQuestions","inputValues","dispatch","uploadMessage","setUploadMessage","showUploadedQuestions","setShowUploadedQuestions","console","log","title","handleChange","input","inputName","type","payload","handleSubmit","quizGenerated","_id","response","message","handleRadioButtonChange","choice","actionToDispatch","saveQuestionInState","question","closeQuestionForm","e","preventDefault","toUpperCase","isPrivate","target","value","questions","length","map","index"],"mappings":"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":["import React, { useReducer, useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  QuizCreationReducer,\n  QuizCreationStartingValues,\n  QuizCreationAction,\n  InputName\n} from \"../../../reducers/QuizCreation\";\nimport {\n  Input,\n  StyledLabel,\n  Container as InputContainer\n} from \"../../UI/Input\";\nimport { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\nimport { Colors } from \"../../../constants/colors\";\nimport {\n  PrivateQuizQuestion,\n  PrivacyChoice,\n  PrivateQuiz\n} from \"../../../models/PrivateQuiz\";\nimport { QuestionSubForm } from \"./QuestionSubForm\";\nimport { createQuiz, editQuiz } from \"../../../utils/dbFunctions\";\nimport { AuthContext } from \"../../../contexts/auth/Auth\";\nimport { ApiResponse } from \"../../../models/ApiResponse\";\nimport { SavedQuestionCard } from \"./SavedQuestionCard\";\nimport { Icon } from \"../../UI/Icon\";\nimport { capitaliseInput, getPropertyName } from \"../../../utils/functions\";\n\nconst RadioButtonsContainer = styled.div`\n  display: flex;\n  margin: 0.5rem 0 1rem 0;\n`;\n\nconst RadioContainer = styled.div`\n  display: flex;\n  margin: 0 1rem;\n  background-color: ${(props: { isSelected: boolean }) =>\n    props.isSelected ? Colors.ORANGE : Colors.LIGHTEST_GREY};\n  color: ${(props: { isSelected: boolean }) =>\n    props.isSelected ? \"white\" : \"grey\"};\n  padding: 0.4rem 0.9rem 0.4rem 0.6rem;\n  align-items: center;\n  border-radius: 40px;\n  cursor: pointer;\n\n  label {\n    padding-left: 6px;\n    font-size: 0.8rem;\n    cursor: pointer;\n  }\n\n  input {\n    margin: 0;\n    display: none;\n  }\n`;\n\nconst AddQuestionButton = styled.h4`\n  color: ${Colors.STEEL_PINK_2};\n  background-color: white;\n  padding: 0.5rem;\n  border-radius: 40px;\n  margin: 2.5rem;\n  cursor: pointer;\n  font-size: 1rem;\n\n  :hover {\n    color: white;\n    background-color: ${Colors.STEEL_PINK_2};\n  }\n`;\n\ninterface Props {\n  usage: \"creation\" | \"editing\";\n  currentQuiz?: PrivateQuiz;\n}\n\nexport const QuizCreationOrEditForm: React.FC<Props> = ({\n  usage,\n  currentQuiz\n}) => {\n  const { currentUser } = useContext(AuthContext);\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(\n    QuizCreationReducer,\n    usage === \"creation\"\n      ? QuizCreationStartingValues\n      : (currentQuiz as PrivateQuiz)\n  );\n  const [uploadMessage, setUploadMessage] = useState(\"\");\n  const [showUploadedQuestions, setShowUploadedQuestions] = useState(false);\n\n  console.log(\"title\", inputValues.title);\n\n  const handleChange = (input: string, inputName: InputName) => {\n    dispatch({ type: inputName, payload: input });\n  };\n\n  const handleSubmit = async () => {\n    const quizGenerated = { ...inputValues };\n    quizGenerated.title = capitaliseInput(quizGenerated.title);\n    console.log(\"QUIZ generated\", quizGenerated);\n\n    if (usage === \"editing\") {\n      editQuiz(currentQuiz!._id as string, quizGenerated);\n      return;\n    }\n\n    const response = await createQuiz(quizGenerated, currentUser!._id);\n    setUploadMessage((response as ApiResponse).message as string);\n  };\n\n  const handleRadioButtonChange = (choice: PrivacyChoice) => {\n    const actionToDispatch: QuizCreationAction = {\n      type: \"isPrivate\",\n      payload: false\n    };\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n    dispatch(actionToDispatch);\n  };\n\n  const saveQuestionInState = (question: PrivateQuizQuestion) =>\n    dispatch({ type: \"questions\", payload: question });\n\n  const closeQuestionForm = () => setIsAddingQuestions(false);\n\n  return (\n    <FormContainer>\n      {isAddingQuestions && (\n        <QuestionSubForm\n          saveQuestionInState={saveQuestionInState}\n          closeItself={closeQuestionForm}\n        />\n      )}\n\n      {uploadMessage ? (\n        <h2>{uploadMessage}</h2>\n      ) : (\n        <>\n          <FormTitle>Create your quiz</FormTitle>\n          <form\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              handleSubmit();\n            }}\n          >\n            <Input\n              inputName=\"title\"\n              onChangeFunction={handleChange}\n              value={getPropertyName(inputValues, \"title\")}\n            />\n            <Input\n              inputName=\"backgroundImageUrl\"\n              onChangeFunction={handleChange}\n              value={getPropertyName(inputValues, \"backgroundImageUrl\" as any)}\n            />\n\n            <InputContainer>\n              <StyledLabel>\n                {\"What do you want to do with this quiz?\".toUpperCase()}\n              </StyledLabel>\n              <RadioButtonsContainer>\n                <RadioContainer isSelected={inputValues.isPrivate}>\n                  <input\n                    type=\"radio\"\n                    id=\"yes\"\n                    name=\"isPrivate\"\n                    value=\"yes\"\n                    onChange={e =>\n                      handleRadioButtonChange(e.target.value as PrivacyChoice)\n                    }\n                  />\n                  <label htmlFor=\"yes\">Keep private</label>\n                </RadioContainer>\n                <RadioContainer isSelected={!inputValues.isPrivate}>\n                  <input\n                    type=\"radio\"\n                    id=\"no\"\n                    name=\"isPrivate\"\n                    value=\"no\"\n                    onChange={e =>\n                      handleRadioButtonChange(e.target.value as PrivacyChoice)\n                    }\n                  />\n                  <label htmlFor=\"no\">Make public</label>\n                </RadioContainer>\n              </RadioButtonsContainer>\n            </InputContainer>\n            <AddQuestionButton onClick={() => setIsAddingQuestions(true)}>\n              <Icon icon={\"plus-circle\"} />\n              Add a question\n            </AddQuestionButton>\n\n            <h5 onClick={() => setShowUploadedQuestions(true)}>\n              Show uploaded questions\n            </h5>\n            {inputValues.questions.length > 0 &&\n              showUploadedQuestions &&\n              inputValues.questions.map((question, index) => (\n                <SavedQuestionCard key={index} question={question} />\n              ))}\n\n            <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n          </form>\n        </>\n      )}\n    </FormContainer>\n  );\n};\n\n// import React, { useReducer, useState, useContext } from \"react\";\n// import styled from \"styled-components\";\n// import {\n//   QuizCreationReducer,\n//   QuizCreationStartingValues,\n//   QuizCreationAction,\n//   InputName\n// } from \"../../../reducers/QuizCreation\";\n// import {\n//   Input,\n//   StyledLabel,\n//   Container as InputContainer\n// } from \"../../UI/Input\";\n// import { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\n// import { Colors } from \"../../../constants/colors\";\n// import {\n//   PrivateQuizQuestion,\n//   PrivacyChoice\n// } from \"../../../models/PrivateQuiz\";\n// import { QuestionSubForm } from \"./QuestionSubForm\";\n// import { createQuiz } from \"../../../utils/dbFunctions\";\n// import { AuthContext } from \"../../../contexts/auth/Auth\";\n// import { ApiResponse } from \"../../../models/ApiResponse\";\n// import { SavedQuestionCard } from \"./SavedQuestionCard\";\n// import { Icon } from \"../../UI/Icon\";\n// import { capitaliseInput } from \"../../../utils/functions\";\n\n// const RadioButtonsContainer = styled.div`\n//   display: flex;\n//   margin: 0.5rem 0 1rem 0;\n// `;\n\n// const RadioContainer = styled.div`\n//   display: flex;\n//   margin: 0 1rem;\n//   background-color: ${(props: { isSelected: boolean }) =>\n//     props.isSelected ? Colors.ORANGE : Colors.LIGHTEST_GREY};\n//   color: ${(props: { isSelected: boolean }) =>\n//     props.isSelected ? \"white\" : \"grey\"};\n//   padding: 0.4rem 0.9rem 0.4rem 0.6rem;\n//   align-items: center;\n//   border-radius: 40px;\n//   cursor: pointer;\n\n//   label {\n//     padding-left: 6px;\n//     font-size: 0.8rem;\n//     cursor: pointer;\n//   }\n\n//   input {\n//     margin: 0;\n//     display: none;\n//   }\n// `;\n\n// const AddQuestionButton = styled.h4`\n//   color: ${Colors.STEEL_PINK_2};\n//   background-color: white;\n//   padding: 0.5rem;\n//   border-radius: 40px;\n//   margin: 2.5rem;\n//   cursor: pointer;\n//   font-size: 1rem;\n\n//   :hover {\n//     color: white;\n//     background-color: ${Colors.STEEL_PINK_2};\n//   }\n// `;\n\n// export const QuizCreationForm: React.FC = () => {\n//   const { currentUser } = useContext(AuthContext);\n//   const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n//   const [inputValues, dispatch] = useReducer(\n//     QuizCreationReducer,\n//     QuizCreationStartingValues\n//   );\n//   const [uploadMessage, setUploadMessage] = useState(\"\");\n\n//   console.log(inputValues);\n\n//   const handleChange = (input: string, inputName: InputName) => {\n//     dispatch({ type: inputName, payload: input });\n//   };\n\n//   const handleSubmit = async () => {\n//     const quizCreated = { ...inputValues };\n//     quizCreated.title = capitaliseInput(quizCreated.title);\n//     console.log(\"QUIZ CREATED\", quizCreated);\n//     const response = await createQuiz(quizCreated, currentUser!._id);\n//     setUploadMessage((response as ApiResponse).message as string);\n//   };\n\n//   const handleRadioButtonChange = (choice: PrivacyChoice) => {\n//     const actionToDispatch: QuizCreationAction = {\n//       type: \"isPrivate\",\n//       payload: false\n//     };\n//     if (choice === \"yes\") {\n//       actionToDispatch.payload = true;\n//     }\n//     dispatch(actionToDispatch);\n//   };\n\n//   const saveQuestionInState = (question: PrivateQuizQuestion) =>\n//     dispatch({ type: \"questions\", payload: question });\n\n//   const closeQuestionForm = () => setIsAddingQuestions(false);\n\n//   return (\n//     <FormContainer>\n//       {isAddingQuestions && (\n//         <QuestionSubForm\n//           saveQuestionInState={saveQuestionInState}\n//           closeItself={closeQuestionForm}\n//         />\n//       )}\n\n//       {uploadMessage ? (\n//         <h2>{uploadMessage}</h2>\n//       ) : (\n//         <>\n//           <FormTitle>Create your quiz</FormTitle>\n//           <form\n//             onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n//               e.preventDefault();\n//               handleSubmit();\n//             }}\n//           >\n//             <Input inputName=\"title\" onChangeFunction={handleChange} />\n//             <Input\n//               inputName=\"backgroundImageUrl\"\n//               onChangeFunction={handleChange}\n//             />\n\n//             <InputContainer>\n//               <StyledLabel>\n//                 {\"What do you want to do with this quiz?\".toUpperCase()}\n//               </StyledLabel>\n//               <RadioButtonsContainer>\n//                 <RadioContainer isSelected={inputValues.isPrivate}>\n//                   <input\n//                     type=\"radio\"\n//                     id=\"yes\"\n//                     name=\"isPrivate\"\n//                     value=\"yes\"\n//                     onChange={e =>\n//                       handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                     }\n//                   />\n//                   <label htmlFor=\"yes\">Keep private</label>\n//                 </RadioContainer>\n//                 <RadioContainer isSelected={!inputValues.isPrivate}>\n//                   <input\n//                     type=\"radio\"\n//                     id=\"no\"\n//                     name=\"isPrivate\"\n//                     value=\"no\"\n//                     onChange={e =>\n//                       handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                     }\n//                   />\n//                   <label htmlFor=\"no\">Make public</label>\n//                 </RadioContainer>\n//               </RadioButtonsContainer>\n//             </InputContainer>\n//             <AddQuestionButton onClick={() => setIsAddingQuestions(true)}>\n//               <Icon icon={\"plus-circle\"} />\n//               Add a question\n//             </AddQuestionButton>\n\n//             {inputValues.questions.length > 0 &&\n//               inputValues.questions.map((question, index) => (\n//                 <SavedQuestionCard key={index} question={question} />\n//               ))}\n\n//             <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n//           </form>\n//         </>\n//       )}\n//     </FormContainer>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}