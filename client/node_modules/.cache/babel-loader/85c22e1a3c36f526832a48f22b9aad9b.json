{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/PublicQuizzes.tsx\";\nimport React, { useState } from \"react\";\nimport \"../../App.css\";\nimport { QuizType } from \"../../models/Question\";\nimport { NumQuestionsStep } from \"../steps/NumQuestionsStep\";\nimport { DifficultyStep } from \"../steps/DifficultyStep\";\nimport { SubjectsStep } from \"../steps/SubjectsStep\";\nimport { FinalSummaryStep } from \"../steps/FinalSummaryStep\";\nimport { ActualQuiz } from \"../ActualQuiz\";\nexport const PublicQuizzes = () => {\n  const [questions, setQuestions] = useState([]);\n  const [quizType, setQuizType] = useState(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [difficultyLevel, setDifficultyLevel] = useState(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setCurrentStep(1);\n    setNumOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const chooseQuiz = quizType => {\n    reset();\n    setQuizType(quizType);\n  };\n\n  const chooseAmountOfQuestions = num => {\n    setNumOfQuestions(num);\n  };\n\n  const changeLevel = level => setDifficultyLevel(level);\n\n  const chooseSubject = subject => {\n    setCurrentSubject(subject);\n  };\n\n  const goForward = () => setCurrentStep(prev => prev + 1);\n\n  const uploadQuestions = questions => {\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  console.log(\"QST\", questions);\n\n  const renderInstruction = () => {\n    switch (currentStep) {\n      case 1:\n        return /*#__PURE__*/React.createElement(SubjectsStep, {\n          quizType: quizType,\n          goForward: goForward,\n          updateSubject: chooseSubject,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        });\n\n      case 2:\n        return /*#__PURE__*/React.createElement(NumQuestionsStep, {\n          chooseAmountOfQuestions: chooseAmountOfQuestions,\n          currentAmount: numOfQuestions,\n          goForward: goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }\n        });\n\n      case 3:\n        return /*#__PURE__*/React.createElement(DifficultyStep, {\n          currentLevel: difficultyLevel,\n          changeLevel: changeLevel,\n          goForward: goForward,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }\n        });\n\n      case 4:\n        return /*#__PURE__*/React.createElement(FinalSummaryStep, {\n          quizType: quizType,\n          numberOfQuestions: numOfQuestions,\n          difficulty: difficultyLevel,\n          subject: currentSubject,\n          uploadQuestions: uploadQuestions,\n          reset: reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 16\n          }\n        }, \"SOMETHING WENT WRONG...\");\n    }\n  };\n\n  return !startedQuiz ? /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, renderInstruction()) : /*#__PURE__*/React.createElement(ActualQuiz, {\n    subject: currentSubject,\n    allQuestions: questions,\n    reset: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/PublicQuizzes.tsx"],"names":["React","useState","QuizType","NumQuestionsStep","DifficultyStep","SubjectsStep","FinalSummaryStep","ActualQuiz","PublicQuizzes","questions","setQuestions","quizType","setQuizType","TRIVIA","numOfQuestions","setNumOfQuestions","difficultyLevel","setDifficultyLevel","currentSubject","setCurrentSubject","currentStep","setCurrentStep","startedQuiz","setStartedQuiz","reset","chooseQuiz","chooseAmountOfQuestions","num","changeLevel","level","chooseSubject","subject","goForward","prev","uploadQuestions","console","log","renderInstruction"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../../App.css\";\nimport { QuizType, Question, Subject } from \"../../models/Question\";\nimport { NumQuestionsStep } from \"../steps/NumQuestionsStep\";\nimport { DifficultyStep } from \"../steps/DifficultyStep\";\nimport { Difficulty } from \"../../models/TriviaApi\";\nimport { SubjectsStep } from \"../steps/SubjectsStep\";\nimport { FinalSummaryStep } from \"../steps/FinalSummaryStep\";\nimport { ActualQuiz } from \"../ActualQuiz\";\n\nexport const PublicQuizzes: React.FC = () => {\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n  const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n  const [currentStep, setCurrentStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setCurrentStep(1);\n    setNumOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const chooseQuiz = (quizType: QuizType) => {\n    reset();\n    setQuizType(quizType);\n  };\n\n  const chooseAmountOfQuestions = (num: number) => {\n    setNumOfQuestions(num);\n  };\n\n  const changeLevel = (level: Difficulty) => setDifficultyLevel(level);\n\n  const chooseSubject = (subject: Subject) => {\n    setCurrentSubject(subject);\n  };\n\n  const goForward = () => setCurrentStep(prev => prev + 1);\n\n  const uploadQuestions = (questions: Question[]) => {\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  console.log(\"QST\", questions);\n\n  const renderInstruction = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <SubjectsStep\n            quizType={quizType}\n            goForward={goForward}\n            updateSubject={chooseSubject}\n          />\n        );\n\n      case 2:\n        return (\n          <NumQuestionsStep\n            chooseAmountOfQuestions={chooseAmountOfQuestions}\n            currentAmount={numOfQuestions}\n            goForward={goForward}\n          />\n        );\n\n      case 3:\n        return (\n          <DifficultyStep\n            currentLevel={difficultyLevel}\n            changeLevel={changeLevel}\n            goForward={goForward}\n          />\n        );\n\n      case 4:\n        return (\n          <FinalSummaryStep\n            quizType={quizType}\n            numberOfQuestions={numOfQuestions}\n            difficulty={difficultyLevel}\n            subject={currentSubject as Subject}\n            uploadQuestions={uploadQuestions}\n            reset={reset}\n          />\n        );\n\n      default:\n        return <h1>SOMETHING WENT WRONG...</h1>;\n    }\n  };\n\n  return !startedQuiz ? (\n    <header className=\"App-header\">{renderInstruction()}</header>\n  ) : (\n    <ActualQuiz\n      subject={currentSubject as Subject}\n      allQuestions={questions}\n      reset={reset}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}