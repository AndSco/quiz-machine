{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizCreationForm.tsx\";\nimport React, { useReducer, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { QuizCreationReducer, QuizCreationStartingValues } from \"../../../reducers/QuizCreation\";\nimport { UniversalForm } from \"../../UniversalForm\";\nimport { QuizCreationFormInputsValues } from \"../../../constants/formInputsValues\"; // const Container = styled(FormContainer)`\n//   height: 500px;\n//   /* background-color: ${Colors.ORANGE}; */\n// `;\n\nconst RadioButtonsContainer = styled.div`\n  display: flex;\n  margin: 0.5rem 0 1rem 0;\n`;\nconst RadioContainer = styled.div`\n  display: flex;\n  margin: 0 1rem;\n  background: white;\n  padding: 0.3rem 0.7rem;\n  border-radius: 40px;\n  cursor: pointer;\n\n  label {\n    padding-left: 6px;\n  }\n`;\nexport const QuizCreationForm = () => {\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(QuizCreationReducer, QuizCreationStartingValues);\n  const [questionsUploaded, setQuestionsUploaded] = useState([]);\n  console.log(\"Qs uploaded\", questionsUploaded);\n\n  const handleChange = (input, inputName) => {\n    dispatch({\n      type: inputName,\n      payload: input\n    });\n  };\n\n  const handleRadioButtonChange = choice => {\n    const actionToDispatch = {\n      type: \"isPrivate\",\n      payload: false\n    };\n\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n\n    dispatch(actionToDispatch);\n  };\n\n  const handleSubmit = () => {\n    // add the questions!\n    // dispatch({ type: \"questions\", payload: questionsUploaded });\n    console.log(\"Submitted\", inputValues);\n  };\n\n  const saveQuestionInState = question => dispatch({\n    type: \"questions\",\n    payload: question\n  }); // setQuestionsUploaded([...questionsUploaded, question]);\n\n\n  const closeQuestionForm = () => setIsAddingQuestions(false); ///\n\n\n  const onQuizCreationSubmit = async () => await console.log(\"SENDINg\");\n\n  return /*#__PURE__*/React.createElement(UniversalForm, {\n    title: \"Create your quiz\",\n    reducer: QuizCreationReducer,\n    inputStartingValues: QuizCreationStartingValues,\n    inputs: QuizCreationFormInputsValues,\n    handleSubmit: () => console.log(\"\"),\n    message: \"\",\n    resetMessage: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }) // <FormContainer>\n  //   {isAddingQuestions && (\n  //     <QuestionSubForm\n  //       saveQuestionInState={saveQuestionInState}\n  //       closeItself={closeQuestionForm}\n  //     />\n  //   )}\n  //   <FormTitle>Create your quiz</FormTitle>\n  //   <form\n  //     onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n  //       e.preventDefault();\n  //       handleSubmit();\n  //     }}\n  //   >\n  //     <Input inputName=\"title\" onChangeFunction={handleChange} />\n  //     <Input inputName=\"backgroundImageUrl\" onChangeFunction={handleChange} />\n  //     <InputContainer>\n  //       <StyledLabel>\n  //         {\"Do you want to keep the quiz private?\".toUpperCase()}\n  //       </StyledLabel>\n  //       <RadioButtonsContainer>\n  //         <RadioContainer>\n  //           <input\n  //             type=\"radio\"\n  //             id=\"yes\"\n  //             name=\"isPrivate\"\n  //             value=\"yes\"\n  //             onChange={e =>\n  //               handleRadioButtonChange(e.target.value as PrivacyChoice)\n  //             }\n  //           />\n  //           <label htmlFor=\"yes\">YES</label>\n  //         </RadioContainer>\n  //         <RadioContainer>\n  //           <input\n  //             type=\"radio\"\n  //             id=\"no\"\n  //             name=\"isPrivate\"\n  //             value=\"no\"\n  //             onChange={e =>\n  //               handleRadioButtonChange(e.target.value as PrivacyChoice)\n  //             }\n  //           />\n  //           <label htmlFor=\"no\">NO</label>\n  //         </RadioContainer>\n  //       </RadioButtonsContainer>\n  //     </InputContainer>\n  //     <h4 onClick={() => setIsAddingQuestions(true)}>ADD QUESTION</h4>\n  //     <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n  //   </form>\n  // </FormContainer>\n  ;\n}; // import React, { useReducer, useState } from \"react\";\n// import styled from \"styled-components\";\n// import {\n//   QuizCreationReducer,\n//   QuizCreationStartingValues,\n//   QuizCreationAction,\n//   InputName\n// } from \"../../../reducers/QuizCreation\";\n// import {\n//   Input,\n//   StyledLabel,\n//   Container as InputContainer\n// } from \"../../UI/Input\";\n// import { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\n// import { Colors } from \"../../../constants/colors\";\n// import {\n//   Question,\n//   PrivacyChoice,\n//   iQuestion\n// } from \"../../../models/PrivateQuiz\";\n// import { QuestionSubForm } from \"./QuestionSubForm\";\n// const Container = styled(FormContainer)`\n//   height: 500px;\n//   /* background-color: ${Colors.ORANGE}; */\n// `;\n// const RadioButtonsContainer = styled.div`\n//   display: flex;\n//   margin: 0.5rem 0 1rem 0;\n// `;\n// const RadioContainer = styled.div`\n//   display: flex;\n//   margin: 0 1rem;\n//   background: white;\n//   padding: 0.3rem 0.7rem;\n//   border-radius: 40px;\n//   cursor: pointer;\n//   label {\n//     padding-left: 6px;\n//   }\n// `;\n// export const QuizCreationForm: React.FC = () => {\n//   const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n//   const [inputValues, dispatch] = useReducer(\n//     QuizCreationReducer,\n//     QuizCreationStartingValues\n//   );\n//   const [questionsUploaded, setQuestionsUploaded] = useState<Question[]>([]);\n//   console.log(\"Qs uploaded\", questionsUploaded);\n//   const handleChange = (input: string, inputName: InputName) => {\n//     dispatch({ type: inputName, payload: input });\n//   };\n//   const handleRadioButtonChange = (choice: PrivacyChoice) => {\n//     const actionToDispatch: QuizCreationAction = {\n//       type: \"isPrivate\",\n//       payload: false\n//     };\n//     if (choice === \"yes\") {\n//       actionToDispatch.payload = true;\n//     }\n//     dispatch(actionToDispatch);\n//   };\n//   const handleSubmit = () => {\n//     // add the questions!\n//     // dispatch({ type: \"questions\", payload: questionsUploaded });\n//     console.log(\"Submitted\", inputValues);\n//   };\n//   const saveQuestionInState = (question: Question) =>\n//     dispatch({ type: \"questions\", payload: question });\n//   // setQuestionsUploaded([...questionsUploaded, question]);\n//   const closeQuestionForm = () => setIsAddingQuestions(false);\n//   return (\n//     <Container>\n//       {isAddingQuestions && (\n//         <QuestionSubForm\n//           saveQuestionInState={saveQuestionInState}\n//           closeItself={closeQuestionForm}\n//         />\n//       )}\n//       <FormTitle>Create your quiz</FormTitle>\n//       <form\n//         onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n//           e.preventDefault();\n//           handleSubmit();\n//         }}\n//       >\n//         <Input inputName=\"title\" onChangeFunction={handleChange} />\n//         <Input inputName=\"backgroundImageUrl\" onChangeFunction={handleChange} />\n//         <InputContainer>\n//           <StyledLabel>\n//             {\"Do you want to keep the quiz private?\".toUpperCase()}\n//           </StyledLabel>\n//           <RadioButtonsContainer>\n//             <RadioContainer>\n//               <input\n//                 type=\"radio\"\n//                 id=\"yes\"\n//                 name=\"isPrivate\"\n//                 value=\"yes\"\n//                 onChange={e =>\n//                   handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                 }\n//               />\n//               <label htmlFor=\"yes\">YES</label>\n//             </RadioContainer>\n//             <RadioContainer>\n//               <input\n//                 type=\"radio\"\n//                 id=\"no\"\n//                 name=\"isPrivate\"\n//                 value=\"no\"\n//                 onChange={e =>\n//                   handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                 }\n//               />\n//               <label htmlFor=\"no\">NO</label>\n//             </RadioContainer>\n//           </RadioButtonsContainer>\n//         </InputContainer>\n//         <h4 onClick={() => setIsAddingQuestions(true)}>ADD QUESTION</h4>\n//         <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n//       </form>\n//     </Container>\n//   );\n// };","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/QuizCreationForm.tsx"],"names":["React","useReducer","useState","styled","QuizCreationReducer","QuizCreationStartingValues","UniversalForm","QuizCreationFormInputsValues","RadioButtonsContainer","div","RadioContainer","QuizCreationForm","isAddingQuestions","setIsAddingQuestions","inputValues","dispatch","questionsUploaded","setQuestionsUploaded","console","log","handleChange","input","inputName","type","payload","handleRadioButtonChange","choice","actionToDispatch","handleSubmit","saveQuestionInState","question","closeQuestionForm","onQuizCreationSubmit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SACEC,mBADF,EAEEC,0BAFF,QAKO,gCALP;AAmBA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,4BAAT,QAA6C,qCAA7C,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,qBAAqB,GAAGL,MAAM,CAACM,GAAI;;;CAAzC;AAKA,MAAMC,cAAc,GAAGP,MAAM,CAACM,GAAI;;;;;;;;;;;CAAlC;AAaA,OAAO,MAAME,gBAA0B,GAAG,MAAM;AAC9C,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACY,WAAD,EAAcC,QAAd,IAA0Bd,UAAU,CACxCG,mBADwC,EAExCC,0BAFwC,CAA1C;AAIA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAa,EAAb,CAA1D;AAEAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,iBAA3B;;AAEA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAgBC,SAAhB,KAAyC;AAC5DP,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAED,SAAR;AAAmBE,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,uBAAuB,GAAIC,MAAD,IAA2B;AACzD,UAAMC,gBAAoC,GAAG;AAC3CJ,MAAAA,IAAI,EAAE,WADqC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAA7C;;AAIA,QAAIE,MAAM,KAAK,KAAf,EAAsB;AACpBC,MAAAA,gBAAgB,CAACH,OAAjB,GAA2B,IAA3B;AACD;;AACDT,IAAAA,QAAQ,CAACY,gBAAD,CAAR;AACD,GATD;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACzB;AACA;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,WAAzB;AACD,GAJD;;AAMA,QAAMe,mBAAmB,GAAIC,QAAD,IAC1Bf,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE,WAAR;AAAqBC,IAAAA,OAAO,EAAEM;AAA9B,GAAD,CADV,CA/B8C,CAiC9C;;;AAEA,QAAMC,iBAAiB,GAAG,MAAMlB,oBAAoB,CAAC,KAAD,CAApD,CAnC8C,CAqC9C;;;AACA,QAAMmB,oBAAoB,GAAG,YAAY,MAAMd,OAAO,CAACC,GAAR,CAAY,SAAZ,CAA/C;;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,kBADR;AAEE,IAAA,OAAO,EAAEf,mBAFX;AAGE,IAAA,mBAAmB,EAAEC,0BAHvB;AAIE,IAAA,MAAM,EAAEE,4BAJV;AAKE,IAAA,YAAY,EAAE,MAAMW,OAAO,CAACC,GAAR,CAAY,EAAZ,CALtB;AAME,IAAA,OAAO,EAAC,EANV;AAOE,IAAA,YAAY,EAAE,MAAM,CAAE,CAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DF;AA+DD,CAvGM,C,CAysourcesContent":["import React, { useReducer, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  QuizCreationReducer,\n  QuizCreationStartingValues,\n  QuizCreationAction,\n  InputName\n} from \"../../../reducers/QuizCreation\";\nimport {\n  Input,\n  StyledLabel,\n  Container as InputContainer\n} from \"../../UI/Input\";\nimport { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\nimport { Colors } from \"../../../constants/colors\";\nimport {\n  Question,\n  PrivacyChoice,\n  iQuestion\n} from \"../../../models/PrivateQuiz\";\nimport { QuestionSubForm } from \"./QuestionSubForm\";\nimport { UniversalForm } from \"../../UniversalForm\";\nimport { QuizCreationFormInputsValues } from \"../../../constants/formInputsValues\";\n\n// const Container = styled(FormContainer)`\n//   height: 500px;\n//   /* background-color: ${Colors.ORANGE}; */\n// `;\n\nconst RadioButtonsContainer = styled.div`\n  display: flex;\n  margin: 0.5rem 0 1rem 0;\n`;\n\nconst RadioContainer = styled.div`\n  display: flex;\n  margin: 0 1rem;\n  background: white;\n  padding: 0.3rem 0.7rem;\n  border-radius: 40px;\n  cursor: pointer;\n\n  label {\n    padding-left: 6px;\n  }\n`;\n\nexport const QuizCreationForm: React.FC = () => {\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(\n    QuizCreationReducer,\n    QuizCreationStartingValues\n  );\n  const [questionsUploaded, setQuestionsUploaded] = useState<Question[]>([]);\n\n  console.log(\"Qs uploaded\", questionsUploaded);\n\n  const handleChange = (input: string, inputName: InputName) => {\n    dispatch({ type: inputName, payload: input });\n  };\n\n  const handleRadioButtonChange = (choice: PrivacyChoice) => {\n    const actionToDispatch: QuizCreationAction = {\n      type: \"isPrivate\",\n      payload: false\n    };\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n    dispatch(actionToDispatch);\n  };\n\n  const handleSubmit = () => {\n    // add the questions!\n    // dispatch({ type: \"questions\", payload: questionsUploaded });\n    console.log(\"Submitted\", inputValues);\n  };\n\n  const saveQuestionInState = (question: Question) =>\n    dispatch({ type: \"questions\", payload: question });\n  // setQuestionsUploaded([...questionsUploaded, question]);\n\n  const closeQuestionForm = () => setIsAddingQuestions(false);\n\n  ///\n  const onQuizCreationSubmit = async () => await console.log(\"SENDINg\");\n\n  return (\n    <UniversalForm\n      title=\"Create your quiz\"\n      reducer={QuizCreationReducer}\n      inputStartingValues={QuizCreationStartingValues}\n      inputs={QuizCreationFormInputsValues}\n      handleSubmit={() => console.log(\"\")}\n      message=\"\"\n      resetMessage={() => {}}\n    />\n    // <FormContainer>\n    //   {isAddingQuestions && (\n    //     <QuestionSubForm\n    //       saveQuestionInState={saveQuestionInState}\n    //       closeItself={closeQuestionForm}\n    //     />\n    //   )}\n    //   <FormTitle>Create your quiz</FormTitle>\n    //   <form\n    //     onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n    //       e.preventDefault();\n    //       handleSubmit();\n    //     }}\n    //   >\n    //     <Input inputName=\"title\" onChangeFunction={handleChange} />\n    //     <Input inputName=\"backgroundImageUrl\" onChangeFunction={handleChange} />\n\n    //     <InputContainer>\n    //       <StyledLabel>\n    //         {\"Do you want to keep the quiz private?\".toUpperCase()}\n    //       </StyledLabel>\n    //       <RadioButtonsContainer>\n    //         <RadioContainer>\n    //           <input\n    //             type=\"radio\"\n    //             id=\"yes\"\n    //             name=\"isPrivate\"\n    //             value=\"yes\"\n    //             onChange={e =>\n    //               handleRadioButtonChange(e.target.value as PrivacyChoice)\n    //             }\n    //           />\n    //           <label htmlFor=\"yes\">YES</label>\n    //         </RadioContainer>\n    //         <RadioContainer>\n    //           <input\n    //             type=\"radio\"\n    //             id=\"no\"\n    //             name=\"isPrivate\"\n    //             value=\"no\"\n    //             onChange={e =>\n    //               handleRadioButtonChange(e.target.value as PrivacyChoice)\n    //             }\n    //           />\n    //           <label htmlFor=\"no\">NO</label>\n    //         </RadioContainer>\n    //       </RadioButtonsContainer>\n    //     </InputContainer>\n    //     <h4 onClick={() => setIsAddingQuestions(true)}>ADD QUESTION</h4>\n    //     <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n    //   </form>\n    // </FormContainer>\n  );\n};\n\n// import React, { useReducer, useState } from \"react\";\n// import styled from \"styled-components\";\n// import {\n//   QuizCreationReducer,\n//   QuizCreationStartingValues,\n//   QuizCreationAction,\n//   InputName\n// } from \"../../../reducers/QuizCreation\";\n// import {\n//   Input,\n//   StyledLabel,\n//   Container as InputContainer\n// } from \"../../UI/Input\";\n// import { FormContainer, FormTitle, SubmitButton } from \"../../UI/Form\";\n// import { Colors } from \"../../../constants/colors\";\n// import {\n//   Question,\n//   PrivacyChoice,\n//   iQuestion\n// } from \"../../../models/PrivateQuiz\";\n// import { QuestionSubForm } from \"./QuestionSubForm\";\n\n// const Container = styled(FormContainer)`\n//   height: 500px;\n//   /* background-color: ${Colors.ORANGE}; */\n// `;\n\n// const RadioButtonsContainer = styled.div`\n//   display: flex;\n//   margin: 0.5rem 0 1rem 0;\n// `;\n\n// const RadioContainer = styled.div`\n//   display: flex;\n//   margin: 0 1rem;\n//   background: white;\n//   padding: 0.3rem 0.7rem;\n//   border-radius: 40px;\n//   cursor: pointer;\n\n//   label {\n//     padding-left: 6px;\n//   }\n// `;\n\n// export const QuizCreationForm: React.FC = () => {\n//   const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n//   const [inputValues, dispatch] = useReducer(\n//     QuizCreationReducer,\n//     QuizCreationStartingValues\n//   );\n//   const [questionsUploaded, setQuestionsUploaded] = useState<Question[]>([]);\n\n//   console.log(\"Qs uploaded\", questionsUploaded);\n\n//   const handleChange = (input: string, inputName: InputName) => {\n//     dispatch({ type: inputName, payload: input });\n//   };\n\n//   const handleRadioButtonChange = (choice: PrivacyChoice) => {\n//     const actionToDispatch: QuizCreationAction = {\n//       type: \"isPrivate\",\n//       payload: false\n//     };\n//     if (choice === \"yes\") {\n//       actionToDispatch.payload = true;\n//     }\n//     dispatch(actionToDispatch);\n//   };\n\n//   const handleSubmit = () => {\n//     // add the questions!\n//     // dispatch({ type: \"questions\", payload: questionsUploaded });\n//     console.log(\"Submitted\", inputValues);\n//   };\n\n//   const saveQuestionInState = (question: Question) =>\n//     dispatch({ type: \"questions\", payload: question });\n//   // setQuestionsUploaded([...questionsUploaded, question]);\n\n//   const closeQuestionForm = () => setIsAddingQuestions(false);\n\n//   return (\n//     <Container>\n//       {isAddingQuestions && (\n//         <QuestionSubForm\n//           saveQuestionInState={saveQuestionInState}\n//           closeItself={closeQuestionForm}\n//         />\n//       )}\n//       <FormTitle>Create your quiz</FormTitle>\n//       <form\n//         onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n//           e.preventDefault();\n//           handleSubmit();\n//         }}\n//       >\n//         <Input inputName=\"title\" onChangeFunction={handleChange} />\n//         <Input inputName=\"backgroundImageUrl\" onChangeFunction={handleChange} />\n\n//         <InputContainer>\n//           <StyledLabel>\n//             {\"Do you want to keep the quiz private?\".toUpperCase()}\n//           </StyledLabel>\n//           <RadioButtonsContainer>\n//             <RadioContainer>\n//               <input\n//                 type=\"radio\"\n//                 id=\"yes\"\n//                 name=\"isPrivate\"\n//                 value=\"yes\"\n//                 onChange={e =>\n//                   handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                 }\n//               />\n//               <label htmlFor=\"yes\">YES</label>\n//             </RadioContainer>\n//             <RadioContainer>\n//               <input\n//                 type=\"radio\"\n//                 id=\"no\"\n//                 name=\"isPrivate\"\n//                 value=\"no\"\n//                 onChange={e =>\n//                   handleRadioButtonChange(e.target.value as PrivacyChoice)\n//                 }\n//               />\n//               <label htmlFor=\"no\">NO</label>\n//             </RadioContainer>\n//           </RadioButtonsContainer>\n//         </InputContainer>\n//         <h4 onClick={() => setIsAddingQuestions(true)}>ADD QUESTION</h4>\n//         <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n//       </form>\n//     </Container>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}