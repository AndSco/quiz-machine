{"ast":null,"code":"import { Question } from \"../models/Question\";\nexport const normalizeQuestions = (quizType, arrayOfQuestions) => {\n  return arrayOfQuestions.map(question => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question);\n    } else {\n      return formatProgrammingQuestion(question);\n    }\n  });\n};\n\nconst formatTrivia = q => {\n  return new Question(q.question, q.difficulty.toLowerCase(), q.category, shuffleArray([...q.incorrect_answers, q.correct_answer]), q.correct_answer);\n};\n\nconst formatProgrammingQuestion = q => {\n  let allAnswers = [];\n\n  for (const val of Object.values(q.answers)) {\n    allAnswers.push(val);\n  }\n\n  let rightAnswer;\n\n  for (const [key, val] of Object.entries(q.correct_answers)) {\n    if (val === \"true\") {\n      rightAnswer = getReplyLabel(key);\n    }\n  }\n\n  return new Question(q.question, q.difficulty.toLowerCase(), q.category, allAnswers, rightAnswer, q.explanation);\n};\n\nconst shuffleArray = array => array.sort((a, b) => 0.5 - Math.random());\n\nconst getReplyLabel = label => label.split(\"_correct\")[0];\n\nexport const shortenLengthySubjects = subjName => subjName.indexOf(\":\") === -1 ? subjName : subjName.split(\":\")[0];","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/utils/functions.ts"],"names":["Question","normalizeQuestions","quizType","arrayOfQuestions","map","question","formatTrivia","formatProgrammingQuestion","q","difficulty","toLowerCase","category","shuffleArray","incorrect_answers","correct_answer","allAnswers","val","Object","values","answers","push","rightAnswer","key","entries","correct_answers","getReplyLabel","explanation","array","sort","a","b","Math","random","label","split","shortenLengthySubjects","subjName","indexOf"],"mappings":"AAAA,SAAmBA,QAAnB,QAA4C,oBAA5C;AAMA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,QADgC,EAEhCC,gBAFgC,KAG7B;AACH,SAAOA,gBAAgB,CAACC,GAAjB,CAAsBC,QAAD,IAAsC;AAChE,QAAIH,QAAQ,KAAK,QAAjB,EAA2B;AACzB,aAAOI,YAAY,CAACD,QAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOE,yBAAyB,CAACF,QAAD,CAAhC;AACD;AACF,GANM,CAAP;AAOD,CAXM;;AAaP,MAAMC,YAAY,GAAIE,CAAD,IAAyB;AAC5C,SAAO,IAAIR,QAAJ,CACLQ,CAAC,CAACH,QADG,EAELG,CAAC,CAACC,UAAF,CAAaC,WAAb,EAFK,EAGLF,CAAC,CAACG,QAHG,EAILC,YAAY,CAAC,CAAC,GAAGJ,CAAC,CAACK,iBAAN,EAAyBL,CAAC,CAACM,cAA3B,CAAD,CAJP,EAKLN,CAAC,CAACM,cALG,CAAP;AAOD,CARD;;AAUA,MAAMP,yBAAyB,GAAIC,CAAD,IAAkC;AAClE,MAAIO,UAAoB,GAAG,EAA3B;;AACA,OAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,MAAP,CAAcV,CAAC,CAACW,OAAhB,CAAlB,EAA4C;AAC1CJ,IAAAA,UAAU,CAACK,IAAX,CAAgBJ,GAAhB;AACD;;AACD,MAAIK,WAAJ;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMN,GAAN,CAAX,IAAyBC,MAAM,CAACM,OAAP,CAAef,CAAC,CAACgB,eAAjB,CAAzB,EAA4D;AAC1D,QAAIR,GAAG,KAAK,MAAZ,EAAoB;AAClBK,MAAAA,WAAW,GAAGI,aAAa,CAACH,GAAD,CAA3B;AACD;AACF;;AAED,SAAO,IAAItB,QAAJ,CACLQ,CAAC,CAACH,QADG,EAELG,CAAC,CAACC,UAAF,CAAaC,WAAb,EAFK,EAGLF,CAAC,CAACG,QAHG,EAILI,UAJK,EAKLM,WALK,EAMLb,CAAC,CAACkB,WANG,CAAP;AAQD,CApBD;;AAsBA,MAAMd,YAAY,GAAIe,KAAD,IACnBA,KAAK,CAACC,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU,MAAMC,IAAI,CAACC,MAAL,EAA3B,CADF;;AAGA,MAAMP,aAAa,GAAIQ,KAAD,IAAmBA,KAAK,CAACC,KAAN,CAAY,UAAZ,EAAwB,CAAxB,CAAzC;;AAEA,OAAO,MAAMC,sBAAsB,GAAIC,QAAD,IACpCA,QAAQ,CAACC,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA3B,GAA+BD,QAA/B,GAA0CA,QAAQ,CAACF,KAAT,CAAe,GAAf,EAAoB,CAApB,CADrC","sourcesContent":["import { QuizType, Question, Subject } from \"../models/Question\";\nimport { TriviaResultType, Difficulty } from \"../models/TriviaApi\";\nimport { ProgrammingQuizResultType } from \"../models/ProgrammingQuizApi\";\n\ntype PossibleQuestionFormat = TriviaResultType | ProgrammingQuizResultType;\n\nexport const normalizeQuestions = (\n  quizType: QuizType,\n  arrayOfQuestions: any[]\n) => {\n  return arrayOfQuestions.map((question: PossibleQuestionFormat) => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question as TriviaResultType);\n    } else {\n      return formatProgrammingQuestion(question as ProgrammingQuizResultType);\n    }\n  });\n};\n\nconst formatTrivia = (q: TriviaResultType) => {\n  return new Question(\n    q.question,\n    q.difficulty.toLowerCase() as Difficulty,\n    q.category as Subject,\n    shuffleArray([...q.incorrect_answers, q.correct_answer]),\n    q.correct_answer\n  );\n};\n\nconst formatProgrammingQuestion = (q: ProgrammingQuizResultType) => {\n  let allAnswers: string[] = [];\n  for (const val of Object.values(q.answers)) {\n    allAnswers.push(val as string);\n  }\n  let rightAnswer: string;\n  for (const [key, val] of Object.entries(q.correct_answers)) {\n    if (val === \"true\") {\n      rightAnswer = getReplyLabel(key);\n    }\n  }\n\n  return new Question(\n    q.question,\n    q.difficulty.toLowerCase() as Difficulty,\n    q.category as Subject,\n    allAnswers,\n    rightAnswer!,\n    q.explanation\n  );\n};\n\nconst shuffleArray = (array: any[]) =>\n  array.sort((a, b) => 0.5 - Math.random());\n\nconst getReplyLabel = (label: string) => label.split(\"_correct\")[0];\n\nexport const shortenLengthySubjects = (subjName: string) =>\n  subjName.indexOf(\":\") === -1 ? subjName : subjName.split(\":\")[0];\n"]},"metadata":{},"sourceType":"module"}