{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { PublicQuizzes } from \"./components/sections/PublicQuizzes\";\nimport { QuizType } from \"./models/Question\";\nimport \"./constants/quizStartingConfigs\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBookOpen, faTachometerAlt, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faBookOpen, faTachometerAlt, faChevronRight);\n\nconst App = () => {\n  const [quizType, setQuizType] = useState(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [difficultyLevel, setDifficultyLevel] = useState(\"medium\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PublicQuizzes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App; // import React, { useState } from \"react\";\n// import \"./App.css\";\n// import { QuizType, Question, Subject } from \"./models/Question\";\n// import { NumQuestionsStep } from \"./components/steps/NumQuestionsStep\";\n// import { DifficultyStep } from \"./components/steps/DifficultyStep\";\n// import { Difficulty } from \"./models/TriviaApi\";\n// import { SubjectsStep } from \"./components/steps/SubjectsStep\";\n// import { FinalSummaryStep } from \"./components/steps/FinalSummaryStep\";\n// import { ActualQuiz } from \"./components/ActualQuiz\";\n// import { Navbar } from \"./components/Navbar\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n// import {\n//   faBookOpen,\n//   faTachometerAlt,\n//   faChevronRight\n// } from \"@fortawesome/free-solid-svg-icons\";\n// library.add(faBookOpen, faTachometerAlt, faChevronRight);\n// const App: React.FC = () => {\n//   const [questions, setQuestions] = useState<Question[]>([]);\n//   const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n//   const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n//   const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n//   const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n//   const [currentStep, setCurrentStep] = useState(1);\n//   const [startedQuiz, setStartedQuiz] = useState(false);\n//   const reset = () => {\n//     setStartedQuiz(false);\n//     setCurrentStep(1);\n//     setNumOfQuestions(5);\n//     setDifficultyLevel(\"medium\");\n//   };\n//   const chooseQuiz = (quizType: QuizType) => {\n//     reset();\n//     setQuizType(quizType);\n//   };\n//   const chooseAmountOfQuestions = (num: number) => {\n//     setNumOfQuestions(num);\n//   };\n//   const changeLevel = (level: Difficulty) => setDifficultyLevel(level);\n//   const chooseSubject = (subject: Subject) => {\n//     setCurrentSubject(subject);\n//   };\n//   const goForward = () => setCurrentStep(prev => prev + 1);\n//   const uploadQuestions = (questions: Question[]) => {\n//     setQuestions(questions);\n//     setStartedQuiz(true);\n//   };\n//   console.log(\"QST\", questions);\n//   const renderInstruction = () => {\n//     switch (currentStep) {\n//       case 1:\n//         return (\n//           <SubjectsStep\n//             quizType={quizType}\n//             goForward={goForward}\n//             updateSubject={chooseSubject}\n//           />\n//         );\n//       case 2:\n//         return (\n//           <NumQuestionsStep\n//             chooseAmountOfQuestions={chooseAmountOfQuestions}\n//             currentAmount={numOfQuestions}\n//             goForward={goForward}\n//           />\n//         );\n//       case 3:\n//         return (\n//           <DifficultyStep\n//             currentLevel={difficultyLevel}\n//             changeLevel={changeLevel}\n//             goForward={goForward}\n//           />\n//         );\n//       case 4:\n//         return (\n//           <FinalSummaryStep\n//             quizType={quizType}\n//             numberOfQuestions={numOfQuestions}\n//             difficulty={difficultyLevel}\n//             subject={currentSubject as Subject}\n//             uploadQuestions={uploadQuestions}\n//             reset={reset}\n//           />\n//         );\n//       default:\n//         return <h1>SOMETHING WENT WRONG...</h1>;\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <Navbar selectedQuiz={quizType} chooseQuiz={chooseQuiz} reset={reset} />\n//       {!startedQuiz ? (\n//         <header className=\"App-header\">{renderInstruction()}</header>\n//       ) : (\n//         <ActualQuiz\n//           subject={currentSubject as Subject}\n//           allQuestions={questions}\n//           reset={reset}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n// export default App;","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx"],"names":["React","useState","PublicQuizzes","QuizType","library","faBookOpen","faTachometerAlt","faChevronRight","add","App","quizType","setQuizType","TRIVIA","numOfQuestions","setNumOfQuestions","difficultyLevel","setDifficultyLevel"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAe,iCAAf;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SACEC,UADF,EAEEC,eAFF,EAGEC,cAHF,QAIO,mCAJP;AAMAH,OAAO,CAACI,GAAR,CAAYH,UAAZ,EAAwBC,eAAxB,EAAyCC,cAAzC;;AAEA,MAAME,GAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAWE,QAAQ,CAACS,MAApB,CAAxC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAS,CAAT,CAApD;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAa,QAAb,CAAtD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAVD;;AAYA,eAAeQ,GAAfsourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { PublicQuizzes } from \"./components/sections/PublicQuizzes\";\nimport { QuizType } from \"./models/Question\";\nimport { Difficulty } from \"./models/TriviaApi\";\nimport {} from \"./constants/quizStartingConfigs\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faBookOpen,\n  faTachometerAlt,\n  faChevronRight\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faBookOpen, faTachometerAlt, faChevronRight);\n\nconst App: React.FC = () => {\n  const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n  const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n\n  return (\n    <div className=\"App\">\n      <PublicQuizzes />\n    </div>\n  );\n};\n\nexport default App;\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n// import { QuizType, Question, Subject } from \"./models/Question\";\n// import { NumQuestionsStep } from \"./components/steps/NumQuestionsStep\";\n// import { DifficultyStep } from \"./components/steps/DifficultyStep\";\n// import { Difficulty } from \"./models/TriviaApi\";\n// import { SubjectsStep } from \"./components/steps/SubjectsStep\";\n// import { FinalSummaryStep } from \"./components/steps/FinalSummaryStep\";\n// import { ActualQuiz } from \"./components/ActualQuiz\";\n// import { Navbar } from \"./components/Navbar\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n// import {\n//   faBookOpen,\n//   faTachometerAlt,\n//   faChevronRight\n// } from \"@fortawesome/free-solid-svg-icons\";\n\n// library.add(faBookOpen, faTachometerAlt, faChevronRight);\n\n// const App: React.FC = () => {\n//   const [questions, setQuestions] = useState<Question[]>([]);\n//   const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n//   const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n//   const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n//   const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n//   const [currentStep, setCurrentStep] = useState(1);\n//   const [startedQuiz, setStartedQuiz] = useState(false);\n\n//   const reset = () => {\n//     setStartedQuiz(false);\n//     setCurrentStep(1);\n//     setNumOfQuestions(5);\n//     setDifficultyLevel(\"medium\");\n//   };\n\n//   const chooseQuiz = (quizType: QuizType) => {\n//     reset();\n//     setQuizType(quizType);\n//   };\n\n//   const chooseAmountOfQuestions = (num: number) => {\n//     setNumOfQuestions(num);\n//   };\n\n//   const changeLevel = (level: Difficulty) => setDifficultyLevel(level);\n\n//   const chooseSubject = (subject: Subject) => {\n//     setCurrentSubject(subject);\n//   };\n\n//   const goForward = () => setCurrentStep(prev => prev + 1);\n\n//   const uploadQuestions = (questions: Question[]) => {\n//     setQuestions(questions);\n//     setStartedQuiz(true);\n//   };\n\n//   console.log(\"QST\", questions);\n\n//   const renderInstruction = () => {\n//     switch (currentStep) {\n//       case 1:\n//         return (\n//           <SubjectsStep\n//             quizType={quizType}\n//             goForward={goForward}\n//             updateSubject={chooseSubject}\n//           />\n//         );\n\n//       case 2:\n//         return (\n//           <NumQuestionsStep\n//             chooseAmountOfQuestions={chooseAmountOfQuestions}\n//             currentAmount={numOfQuestions}\n//             goForward={goForward}\n//           />\n//         );\n\n//       case 3:\n//         return (\n//           <DifficultyStep\n//             currentLevel={difficultyLevel}\n//             changeLevel={changeLevel}\n//             goForward={goForward}\n//           />\n//         );\n\n//       case 4:\n//         return (\n//           <FinalSummaryStep\n//             quizType={quizType}\n//             numberOfQuestions={numOfQuestions}\n//             difficulty={difficultyLevel}\n//             subject={currentSubject as Subject}\n//             uploadQuestions={uploadQuestions}\n//             reset={reset}\n//           />\n//         );\n\n//       default:\n//         return <h1>SOMETHING WENT WRONG...</h1>;\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Navbar selectedQuiz={quizType} chooseQuiz={chooseQuiz} reset={reset} />\n//       {!startedQuiz ? (\n//         <header className=\"App-header\">{renderInstruction()}</header>\n//       ) : (\n//         <ActualQuiz\n//           subject={currentSubject as Subject}\n//           allQuestions={questions}\n//           reset={reset}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}