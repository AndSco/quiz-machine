{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nexport const ActualPrivateQuiz = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = await getSingleQuiz(quizId);\n      console.log(\"RECEIVED\", quiz);\n      setCurrentQuiz(quiz);\n    };\n\n    loadQuiz();\n  }, []);\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n\n  const thereAreStillQuestions = () => allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? /*#__PURE__*/React.createElement(QuizBackground, {\n    imageUrl: currentQuiz.backgroundImageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"QUIZ\") : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, \"Loading\"); //   {thereAreStillQuestions() ? (\n  //     <QuestionCard\n  //       question={allQuestions[currentQuestionIndex]}\n  //       next={goToNextQuestion}\n  //       numberOfQuestions={allQuestions.length}\n  //       currentNumberOfQuestion={currentQuestionIndex + 1}\n  //       givePoint={givePoint}\n  //     />\n  //   ) : (\n  //     <Ending\n  //       score={score}\n  //       totalQuestions={allQuestions.length}\n  //       playAgain={reset}\n  //     />\n  //   )}\n  // </QuizBackground>\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx"],"names":["React","useState","useEffect","QuizBackground","getSingleQuiz","ActualPrivateQuiz","quizId","currentQuiz","setCurrentQuiz","allQuestions","setAllQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","loadQuiz","quiz","console","log","questions","goToNextQuestion","prev","givePoint","prevScore","thereAreStillQuestions","length","backgroundImageUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAKA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AAOA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;AAClEC,EAAAA;AADkE,CAAD,KAE7D;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAqB,IAArB,CAA9C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAwB,EAAxB,CAAhD;AACA,QAAM,CAACU,oBAAD,EAAuBC,uBAAvB,IAAkDX,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAI,MAAMZ,aAAa,CAACE,MAAD,CAAjC;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACAR,MAAAA,cAAc,CAACQ,IAAD,CAAd;AACD,KAJD;;AAMAD,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT;AAUAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,WAAJ,EAAiB;AACfG,MAAAA,eAAe,CAACH,WAAW,CAACY,SAAb,CAAf;AACD;AACF,GAJQ,EAIN,CAACZ,WAAD,CAJM,CAAT;;AAMA,QAAMa,gBAAgB,GAAG,MAAMR,uBAAuB,CAACS,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAtD;;AACA,QAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAhC;;AACA,QAAMC,sBAAsB,GAAG,MAC7Bf,YAAY,CAACgB,MAAb,IAAuBd,oBAAoB,GAAG,CADhD;;AAGA,SAAOJ,WAAW,gBAChB,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEA,WAAW,CAACmB,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADgB,gBAKhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CA3BI,CAmCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CArDM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Question, Subject } from \"../../../models/Question\";\nimport { QuestionCard } from \"../../replies/QuestionCard\";\nimport { Ending } from \"../../Ending\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { PrivateQuiz, PrivateQuizQuestion } from \"../../../models/PrivateQuiz\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nimport { Wrapper } from \"../../UI/Wrapper\";\n\ninterface ActualPrivateQuizProps {\n  quizId: string;\n}\n\nexport const ActualPrivateQuiz: React.FC<ActualPrivateQuizProps> = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState<PrivateQuiz | null>(null);\n  const [allQuestions, setAllQuestions] = useState<PrivateQuizQuestion[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = (await getSingleQuiz(quizId)) as unknown;\n      console.log(\"RECEIVED\", quiz);\n      setCurrentQuiz(quiz as PrivateQuiz);\n    };\n\n    loadQuiz();\n  }, []);\n\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n  const thereAreStillQuestions = () =>\n    allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? (\n    <QuizBackground imageUrl={currentQuiz.backgroundImageUrl as string}>\n      QUIZ\n    </QuizBackground>\n  ) : (\n    <h1>Loading</h1>\n  );\n\n  //   {thereAreStillQuestions() ? (\n  //     <QuestionCard\n  //       question={allQuestions[currentQuestionIndex]}\n  //       next={goToNextQuestion}\n  //       numberOfQuestions={allQuestions.length}\n  //       currentNumberOfQuestion={currentQuestionIndex + 1}\n  //       givePoint={givePoint}\n  //     />\n  //   ) : (\n  //     <Ending\n  //       score={score}\n  //       totalQuestions={allQuestions.length}\n  //       playAgain={reset}\n  //     />\n  //   )}\n  // </QuizBackground>\n};\n"]},"metadata":{},"sourceType":"module"}