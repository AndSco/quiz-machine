{"ast":null,"code":"import { Question } from \"../models/Question\";\nexport const normalizeQuestions = (quizType, arrayOfQuestions) => {\n  return arrayOfQuestions.map(question => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question);\n    } else {\n      return formatProgrammingQuestion();\n    }\n  });\n};\n\nconst formatTrivia = q => {\n  return new Question(q.question, q.difficulty.toLowerCase(), q.category, shuffleArray([...q.incorrect_answers, q.correct_answer]), q.correct_answer);\n};\n\nconst formatProgrammingQuestion = () => {// let allQuestions = [];\n  // for (const val of Object.values(q.))\n};\n\nconst shuffleArray = array => array.sort((a, b) => 0.5 - Math.random());","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/utils/functions.ts"],"names":["Question","normalizeQuestions","quizType","arrayOfQuestions","map","question","formatTrivia","formatProgrammingQuestion","q","difficulty","toLowerCase","category","shuffleArray","incorrect_answers","correct_answer","array","sort","a","b","Math","random"],"mappings":"AAAA,SAAmBA,QAAnB,QAA4C,oBAA5C;AAMA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,QADgC,EAEhCC,gBAFgC,KAG7B;AACH,SAAOA,gBAAgB,CAACC,GAAjB,CAAsBC,QAAD,IAAsC;AAChE,QAAIH,QAAQ,KAAK,QAAjB,EAA2B;AACzB,aAAOI,YAAY,CAACD,QAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOE,yBAAyB,EAAhC;AACD;AACF,GANM,CAAP;AAOD,CAXM;;AAaP,MAAMD,YAAY,GAAIE,CAAD,IAAyB;AAC5C,SAAO,IAAIR,QAAJ,CACLQ,CAAC,CAACH,QADG,EAELG,CAAC,CAACC,UAAF,CAAaC,WAAb,EAFK,EAGLF,CAAC,CAACG,QAHG,EAILC,YAAY,CAAC,CAAC,GAAGJ,CAAC,CAACK,iBAAN,EAAyBL,CAAC,CAACM,cAA3B,CAAD,CAJP,EAKLN,CAAC,CAACM,cALG,CAAP;AAOD,CARD;;AAUA,MAAMP,yBAAyB,GAAG,MAAkB,CAClD;AACA;AACD,CAHD;;AAKA,MAAMK,YAAY,GAAIG,KAAD,IACnBA,KAAK,CAACC,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU,MAAMC,IAAI,CAACC,MAAL,EAA3B,CADF","sourcesContent":["import { QuizType, Question, Subject } from \"../models/Question\";\nimport { TriviaResultType, Difficulty } from \"../models/TriviaApi\";\nimport { ProgrammingQuizResultType } from \"../models/ProgrammingQuizApi\";\n\ntype PossibleQuestionFormat = TriviaResultType | ProgrammingQuizResultType;\n\nexport const normalizeQuestions = (\n  quizType: QuizType,\n  arrayOfQuestions: any[]\n) => {\n  return arrayOfQuestions.map((question: PossibleQuestionFormat) => {\n    if (quizType === \"trivia\") {\n      return formatTrivia(question as TriviaResultType);\n    } else {\n      return formatProgrammingQuestion();\n    }\n  });\n};\n\nconst formatTrivia = (q: TriviaResultType) => {\n  return new Question(\n    q.question,\n    q.difficulty.toLowerCase() as Difficulty,\n    q.category as Subject,\n    shuffleArray([...q.incorrect_answers, q.correct_answer]),\n    q.correct_answer\n  );\n};\n\nconst formatProgrammingQuestion = (): Question[] => {\n  // let allQuestions = [];\n  // for (const val of Object.values(q.))\n};\n\nconst shuffleArray = (array: any[]) =>\n  array.sort((a, b) => 0.5 - Math.random());\n"]},"metadata":{},"sourceType":"module"}