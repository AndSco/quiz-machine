{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/UniversalForm.tsx\";\nimport React, { useReducer } from \"react\";\nimport styled from \"styled-components\";\nimport { Input } from \"./UI/Input\";\nimport { FormContainer, FormTitle, SubmitButton } from \"./UI/Form\";\nconst ErrorMessage = styled.p`\n  font-size: 0.8rem;\n  color: red;\n  margin-top: 0;\n`;\nexport const UniversalForm = ({\n  title,\n  inputs,\n  reducer,\n  inputStartingValues,\n  handleSubmit,\n  message\n}) => {\n  const [inputValues, dispatch] = useReducer(reducer, inputStartingValues);\n\n  const handleChange = (input, inputName) => dispatch({\n    type: inputName,\n    payload: input\n  }); // const handleSubmit = async () => {\n  //   let response: ApiResponse;\n  //   if (scope === \"login\") {\n  //     response = await loginUser(inputValues);\n  //     console.log(\"RESSSS\", response);\n  //     loadCurrentUser(response.payload);\n  //   } else {\n  //     response = await registerUser(inputValues);\n  //     console.log(\"RESSSS\", response);\n  //     loadCurrentUser(response.payload);\n  //   }\n  //   if (response.message) {\n  //     setError(response.message);\n  //   }\n  // };\n\n\n  const resetError = () => setError(\"\");\n\n  return /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(inputValues);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, inputs.map(input => /*#__PURE__*/React.createElement(Input, {\n    key: input.name,\n    inputType: input.inputType ? input.inputType : \"text\",\n    inputName: input.name,\n    onChangeFunction: handleChange,\n    resetError: resetError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), message && /*#__PURE__*/React.createElement(ErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, message), /*#__PURE__*/React.createElement(SubmitButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"SUBMIT\")));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/UniversalForm.tsx"],"names":["React","useReducer","styled","Input","FormContainer","FormTitle","SubmitButton","ErrorMessage","p","UniversalForm","title","inputs","reducer","inputStartingValues","handleSubmit","message","inputValues","dispatch","handleChange","input","inputName","type","payload","resetError","setError","e","preventDefault","map","name","inputType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,YAAtB;AAUA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,YAAnC,QAAuD,WAAvD;AAEA,MAAMC,YAAY,GAAGL,MAAM,CAACM,CAAE;;;;CAA9B;AA4BA,OAAO,MAAMC,aAA8B,GAAG,CAAC;AAC7CC,EAAAA,KAD6C;AAE7CC,EAAAA,MAF6C;AAG7CC,EAAAA,OAH6C;AAI7CC,EAAAA,mBAJ6C;AAK7CC,EAAAA,YAL6C;AAM7CC,EAAAA;AAN6C,CAAD,KAOxC;AACJ,QAAM,CAACC,WAAD,EAAcC,QAAd,IAA0BhB,UAAU,CAACW,OAAD,EAAUC,mBAAV,CAA1C;;AAEA,QAAMK,YAAY,GAAG,CAACC,KAAD,EAAgBC,SAAhB,KACnBH,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAED,SAAR;AAAmBE,IAAAA,OAAO,EAAEH;AAA5B,GAAD,CADV,CAHI,CAMJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMI,UAAU,GAAG,MAAMC,QAAQ,CAAC,EAAD,CAAjC;;AAEA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYd,KAAZ,CADF,eAEE;AACE,IAAA,QAAQ,EAAEe,CAAC,IAAI;AACbA,MAAAA,CAAC,CAACC,cAAF;AACAZ,MAAAA,YAAY,CAACE,WAAD,CAAZ;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGL,MAAM,CAACgB,GAAP,CAAWR,KAAK,iBACf,oBAAC,KAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACS,IADb;AAEE,IAAA,SAAS,EAAET,KAAK,CAACU,SAAN,GAAkBV,KAAK,CAACU,SAAxB,GAAoC,MAFjD;AAGE,IAAA,SAAS,EAAEV,KAAK,CAACS,IAHnB;AAIE,IAAA,gBAAgB,EAAEV,YAJpB;AAKE,IAAA,UAAU,EAAEK,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CANH,EAeGR,OAAO,iBAAI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeA,OAAf,CAfd,eAgBE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF,CAFF,CADF;AAuBD,CAtDM","sourcesContent":["import React, { useReducer, useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { Input } from \"./UI/Input\";\nimport {\n  AuthReducers,\n  InputName as AuthInputName\n} from \"../reducers/AuthReducers\";\nimport { InputName as QuizInputName } from \"../reducers/AuthReducers\";\nimport { loginUser, registerUser } from \"../utils/dbFunctions\";\nimport { AuthScope } from \"../models/AuthScope\";\nimport { ApiResponse } from \"../models/ApiResponse\";\nimport { AuthContext } from \"../contexts/auth/Auth\";\nimport { FormContainer, FormTitle, SubmitButton } from \"./UI/Form\";\n\nconst ErrorMessage = styled.p`\n  font-size: 0.8rem;\n  color: red;\n  margin-top: 0;\n`;\n\ntype PossibleInputName = AuthInputName | QuizInputName;\n\nexport type InputConfig = {\n  name: PossibleInputName;\n  inputType?: \"text\" | \"password\";\n};\n\nexport interface Action {\n  type: PossibleInputName;\n  payload?: string;\n}\n\ntype Props = {\n  title: string;\n  inputs: InputConfig[];\n  reducer: React.Reducer<any, any>;\n  inputStartingValues: any;\n  handleSubmit: (filledInInputs: any[]) => Promise<void>;\n  message: string;\n  resetMessage: () => void;\n};\n\nexport const UniversalForm: React.FC<Props> = ({\n  title,\n  inputs,\n  reducer,\n  inputStartingValues,\n  handleSubmit,\n  message\n}) => {\n  const [inputValues, dispatch] = useReducer(reducer, inputStartingValues);\n\n  const handleChange = (input: string, inputName: PossibleInputName) =>\n    dispatch({ type: inputName, payload: input });\n\n  // const handleSubmit = async () => {\n  //   let response: ApiResponse;\n  //   if (scope === \"login\") {\n  //     response = await loginUser(inputValues);\n  //     console.log(\"RESSSS\", response);\n  //     loadCurrentUser(response.payload);\n  //   } else {\n  //     response = await registerUser(inputValues);\n  //     console.log(\"RESSSS\", response);\n  //     loadCurrentUser(response.payload);\n  //   }\n  //   if (response.message) {\n  //     setError(response.message);\n  //   }\n  // };\n\n  const resetError = () => setError(\"\");\n\n  return (\n    <FormContainer>\n      <FormTitle>{title}</FormTitle>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          handleSubmit(inputValues);\n        }}\n      >\n        {inputs.map(input => (\n          <Input\n            key={input.name}\n            inputType={input.inputType ? input.inputType : \"text\"}\n            inputName={input.name}\n            onChangeFunction={handleChange}\n            resetError={resetError}\n          />\n        ))}\n        {message && <ErrorMessage>{message}</ErrorMessage>}\n        <SubmitButton type=\"submit\">SUBMIT</SubmitButton>\n      </form>\n    </FormContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}