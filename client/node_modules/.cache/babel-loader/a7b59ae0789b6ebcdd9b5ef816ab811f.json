{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/questions_subform/QuestionSubForm.tsx\";\nimport React, { useState } from \"react\";\nimport { PrivateQuizQuestion } from \"../../../../../models/PrivateQuiz\";\nimport { FormContainer, FormTitle } from \"../../../../UI/Form\";\nimport { SmallButton, ResetButton } from \"../../../../UI/Buttons\";\nimport { shuffleArray, capitaliseInput, checkMinimumInputLength } from \"../../../../../utils/functions\";\nimport { Clickable } from \"../../../../UI/Clickable\";\nimport { AddCodeButton, ComplexInputContainer, PinkSubmitButton, UploadedQuestionPreview } from \"./Styled\";\nimport { UploadedAnswers, Answer } from \"./UploadedAnswers\";\nimport { CustomInput } from \"./CustomInput\";\nexport const QuestionSubForm = ({\n  saveQuestionInState,\n  closeItself\n}) => {\n  const [question, setQuestion] = useState(\"\");\n  const [hasEnteredQuestion, setHasEnteredQuestion] = useState(false);\n  const [hasEnteredRightReply, setHasEnteredRightReply] = useState(false);\n  const [currentReply, setCurrentReply] = useState(\"\");\n  const [rightReply, setRightReply] = useState(\"\");\n  const [allReplies, setAllReplies] = useState([]);\n  const [needsToAddCode, setNeedsToAddCode] = useState(false);\n  const [code, setCode] = useState(\"\");\n\n  const handleSubmit = () => {\n    const wrongAndRightReplies = shuffleArray([...allReplies, rightReply]);\n    const questionToSave = new PrivateQuizQuestion(question, wrongAndRightReplies, rightReply, code);\n    saveQuestionInState(questionToSave);\n    closeItself();\n  };\n\n  const updateReplies = updatedReplies => setAllReplies(updatedReplies);\n\n  return /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Add a question to your quiz\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, hasEnteredQuestion ? /*#__PURE__*/React.createElement(UploadedQuestionPreview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Q: \", question) : /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    label: \"Question\",\n    value: question,\n    handleChangeFunction: e => setQuestion(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), !needsToAddCode ? /*#__PURE__*/React.createElement(Clickable, {\n    onClick: () => setNeedsToAddCode(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AddCodeButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"If your question involves code, click here to add a code snippet\")) : /*#__PURE__*/React.createElement(CustomInput, {\n    label: \"Add code\",\n    handleChangeFunction: e => setCode(e.target.value),\n    value: code,\n    isTextArea: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      if (!checkMinimumInputLength(question, 4)) {\n        alert(\"Enter a valid question\");\n        return;\n      }\n\n      setQuestion(prev => capitaliseInput(prev));\n      setHasEnteredQuestion(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Continue\")), !hasEnteredRightReply && hasEnteredQuestion && /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    value: rightReply,\n    label: \"Add the right reply\",\n    handleChangeFunction: e => setRightReply(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      if (!checkMinimumInputLength(rightReply)) {\n        alert(\"Enter a valid reply\");\n        return;\n      }\n\n      setRightReply(prev => capitaliseInput(prev));\n      setHasEnteredRightReply(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Continue\")), hasEnteredRightReply && rightReply.length > 0 && /*#__PURE__*/React.createElement(Answer, {\n    label: \"Correct answer: \",\n    value: rightReply,\n    isRight: true,\n    handleDelete: () => {\n      setHasEnteredRightReply(false);\n      setRightReply(\"\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), allReplies.length > 0 && /*#__PURE__*/React.createElement(UploadedAnswers, {\n    replies: allReplies,\n    updateAnswersOnDelete: updateReplies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), hasEnteredQuestion && hasEnteredRightReply && /*#__PURE__*/React.createElement(ComplexInputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    value: currentReply,\n    label: \"Add a (wrong) answer\",\n    handleChangeFunction: e => setCurrentReply(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SmallButton, {\n    onClick: () => {\n      if (!checkMinimumInputLength(currentReply)) {\n        alert(\"Enter a valid reply\");\n        return;\n      }\n\n      setAllReplies(prevReplies => [...prevReplies, capitaliseInput(currentReply)]);\n      setCurrentReply(\"\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"Add\")), /*#__PURE__*/React.createElement(ResetButton, {\n    onClick: closeItself,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), hasEnteredQuestion && hasEnteredRightReply && allReplies.length > 0 && /*#__PURE__*/React.createElement(PinkSubmitButton, {\n    type: \"submit\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"SAVE QUESTION\")));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/questions_subform/QuestionSubForm.tsx"],"names":["React","useState","PrivateQuizQuestion","FormContainer","FormTitle","SmallButton","ResetButton","shuffleArray","capitaliseInput","checkMinimumInputLength","Clickable","AddCodeButton","ComplexInputContainer","PinkSubmitButton","UploadedQuestionPreview","UploadedAnswers","Answer","CustomInput","QuestionSubForm","saveQuestionInState","closeItself","question","setQuestion","hasEnteredQuestion","setHasEnteredQuestion","hasEnteredRightReply","setHasEnteredRightReply","currentReply","setCurrentReply","rightReply","setRightReply","allReplies","setAllReplies","needsToAddCode","setNeedsToAddCode","code","setCode","handleSubmit","wrongAndRightReplies","questionToSave","updateReplies","updatedReplies","e","preventDefault","target","value","alert","prev","length","prevReplies"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { PrivateQuizQuestion } from \"../../../../../models/PrivateQuiz\";\nimport { FormContainer, FormTitle } from \"../../../../UI/Form\";\nimport { SmallButton, ResetButton } from \"../../../../UI/Buttons\";\nimport {\n  shuffleArray,\n  capitaliseInput,\n  checkMinimumInputLength\n} from \"../../../../../utils/functions\";\nimport { Clickable } from \"../../../../UI/Clickable\";\nimport {\n  AddCodeButton,\n  ComplexInputContainer,\n  PinkSubmitButton,\n  UploadedQuestionPreview\n} from \"./Styled\";\nimport { UploadedAnswers, Answer } from \"./UploadedAnswers\";\nimport { CustomInput } from \"./CustomInput\";\n\ninterface Props {\n  saveQuestionInState: (question: PrivateQuizQuestion) => void;\n  closeItself: () => void;\n}\n\nexport const QuestionSubForm: React.FC<Props> = ({\n  saveQuestionInState,\n  closeItself\n}) => {\n  const [question, setQuestion] = useState(\"\");\n  const [hasEnteredQuestion, setHasEnteredQuestion] = useState(false);\n  const [hasEnteredRightReply, setHasEnteredRightReply] = useState(false);\n  const [currentReply, setCurrentReply] = useState(\"\");\n  const [rightReply, setRightReply] = useState(\"\");\n  const [allReplies, setAllReplies] = useState<string[]>([]);\n  const [needsToAddCode, setNeedsToAddCode] = useState(false);\n  const [code, setCode] = useState(\"\");\n\n  const handleSubmit = () => {\n    const wrongAndRightReplies = shuffleArray<string>([\n      ...allReplies,\n      rightReply\n    ]);\n    const questionToSave = new PrivateQuizQuestion(\n      question,\n      wrongAndRightReplies,\n      rightReply,\n      code\n    );\n    saveQuestionInState(questionToSave);\n    closeItself();\n  };\n\n  const updateReplies = (updatedReplies: string[]) =>\n    setAllReplies(updatedReplies);\n\n  return (\n    <FormContainer>\n      <FormTitle>Add a question to your quiz</FormTitle>\n      <form\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n        }}\n      >\n        {hasEnteredQuestion ? (\n          <UploadedQuestionPreview>Q: {question}</UploadedQuestionPreview>\n        ) : (\n          <ComplexInputContainer>\n            <CustomInput\n              label=\"Question\"\n              value={question}\n              handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                setQuestion(e.target.value)\n              }\n            />\n\n            {!needsToAddCode ? (\n              <Clickable onClick={() => setNeedsToAddCode(true)}>\n                <AddCodeButton>\n                  If your question involves code, click here to add a code\n                  snippet\n                </AddCodeButton>\n              </Clickable>\n            ) : (\n              <CustomInput\n                label=\"Add code\"\n                handleChangeFunction={(\n                  e: React.ChangeEvent<HTMLTextAreaElement>\n                ) => setCode(e.target.value)}\n                value={code}\n                isTextArea={true}\n              />\n            )}\n            <SmallButton\n              onClick={() => {\n                if (!checkMinimumInputLength(question, 4)) {\n                  alert(\"Enter a valid question\");\n                  return;\n                }\n                setQuestion(prev => capitaliseInput(prev));\n                setHasEnteredQuestion(true);\n              }}\n            >\n              Continue\n            </SmallButton>\n          </ComplexInputContainer>\n        )}\n\n        {!hasEnteredRightReply && hasEnteredQuestion && (\n          <ComplexInputContainer>\n            <CustomInput\n              value={rightReply}\n              label=\"Add the right reply\"\n              handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                setRightReply(e.target.value)\n              }\n            />\n\n            <SmallButton\n              onClick={() => {\n                if (!checkMinimumInputLength(rightReply)) {\n                  alert(\"Enter a valid reply\");\n                  return;\n                }\n                setRightReply(prev => capitaliseInput(prev));\n                setHasEnteredRightReply(true);\n              }}\n            >\n              Continue\n            </SmallButton>\n          </ComplexInputContainer>\n        )}\n\n        {hasEnteredRightReply && rightReply.length > 0 && (\n          <Answer\n            label=\"Correct answer: \"\n            value={rightReply}\n            isRight={true}\n            handleDelete={() => {\n              setHasEnteredRightReply(false);\n              setRightReply(\"\");\n            }}\n          />\n        )}\n        {allReplies.length > 0 && (\n          <UploadedAnswers\n            replies={allReplies}\n            updateAnswersOnDelete={updateReplies}\n          />\n        )}\n\n        {hasEnteredQuestion && hasEnteredRightReply && (\n          <ComplexInputContainer>\n            <CustomInput\n              value={currentReply}\n              label=\"Add a (wrong) answer\"\n              handleChangeFunction={(e: React.ChangeEvent<HTMLFormElement>) =>\n                setCurrentReply(e.target.value)\n              }\n            />\n\n            <SmallButton\n              onClick={() => {\n                if (!checkMinimumInputLength(currentReply)) {\n                  alert(\"Enter a valid reply\");\n                  return;\n                }\n                setAllReplies(prevReplies => [\n                  ...prevReplies,\n                  capitaliseInput(currentReply)\n                ]);\n                setCurrentReply(\"\");\n              }}\n            >\n              Add\n            </SmallButton>\n          </ComplexInputContainer>\n        )}\n\n        <ResetButton onClick={closeItself}>Cancel</ResetButton>\n\n        {hasEnteredQuestion && hasEnteredRightReply && allReplies.length > 0 && (\n          <PinkSubmitButton type=\"submit\" onClick={handleSubmit}>\n            SAVE QUESTION\n          </PinkSubmitButton>\n        )}\n      </form>\n    </FormContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}