{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/PublicQuizzes.tsx\";\nimport React, { useContext } from \"react\";\nimport \"../../App.css\";\nimport { NumQuestionsStep } from \"../steps/NumQuestionsStep\";\nimport { DifficultyStep } from \"../steps/DifficultyStep\";\nimport { SubjectsStep } from \"../steps/SubjectsStep\";\nimport { FinalSummaryStep } from \"../steps/FinalSummaryStep\";\nimport { ActualQuiz } from \"../ActualQuiz\";\nimport { QuizzesContext } from \"../../contexts/quizzes/Quizzes\";\nexport const PublicQuizzes = () => {\n  // const [questions, setQuestions] = useState<Question[]>([]);\n  // const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  // const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n  // const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n  // const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n  // const [currentStep, setCurrentStep] = useState(1);\n  // const [startedQuiz, setStartedQuiz] = useState(false);\n  const {\n    quizType,\n    currentSubject,\n    numberOfQuestions,\n    difficultyLevel,\n    configQuiz,\n    quizConfigurationStep,\n    startedQuiz,\n    uploadQuestions,\n    goToNextQuizConfiguration,\n    questions,\n    reset\n  } = useContext(QuizzesContext);\n\n  const renderInstruction = () => {\n    switch (quizConfigurationStep) {\n      case 1:\n        return /*#__PURE__*/React.createElement(SubjectsStep, {\n          quizType: quizType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 16\n          }\n        });\n\n      case 2:\n        return /*#__PURE__*/React.createElement(NumQuestionsStep, {\n          currentAmount: numberOfQuestions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 16\n          }\n        });\n\n      case 3:\n        return /*#__PURE__*/React.createElement(DifficultyStep, {\n          currentLevel: difficultyLevel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 16\n          }\n        });\n\n      case 4:\n        return /*#__PURE__*/React.createElement(FinalSummaryStep, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 16\n          }\n        }, \"SOMETHING WENT WRONG...\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !startedQuiz ? /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, renderInstruction()) : /*#__PURE__*/React.createElement(ActualQuiz, {\n    subject: currentSubject,\n    allQuestions: questions,\n    reset: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/PublicQuizzes.tsx"],"names":["React","useContext","NumQuestionsStep","DifficultyStep","SubjectsStep","FinalSummaryStep","ActualQuiz","QuizzesContext","PublicQuizzes","quizType","currentSubject","numberOfQuestions","difficultyLevel","configQuiz","quizConfigurationStep","startedQuiz","uploadQuestions","goToNextQuizConfiguration","questions","reset","renderInstruction"],"mappings":";AAAA,OAAOA,KAAP,IAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAO,eAAP;AAEA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,cAAT,QAA+B,gCAA/B;AAEA,OAAO,MAAMC,aAAuB,GAAG,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,eAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,qBANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA,yBATI;AAUJC,IAAAA,SAVI;AAWJC,IAAAA;AAXI,MAYFlB,UAAU,CAACM,cAAD,CAZd;;AAcA,QAAMa,iBAAiB,GAAG,MAAM;AAC9B,YAAQN,qBAAR;AACE,WAAK,CAAL;AACE,4BAAO,oBAAC,YAAD;AAAc,UAAA,QAAQ,EAAEL,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEF,WAAK,CAAL;AACE,4BAAO,oBAAC,gBAAD;AAAkB,UAAA,aAAa,EAAEE,iBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEF,WAAK,CAAL;AACE,4BAAO,oBAAC,cAAD;AAAgB,UAAA,YAAY,EAAEC,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEF,WAAK,CAAL;AACE,4BAAO,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AAdJ;AAgBD,GAjBD;;AAmBA,sBACE,0CACG,CAACG,WAAD,gBACC;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCK,iBAAiB,EAAjD,CADD,gBAGC,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEV,cADX;AAEE,IAAA,YAAY,EAAEQ,SAFhB;AAGE,IAAA,KAAK,EAAEC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AAaD,CAvDM","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport \"../../App.css\";\nimport { QuizType, Question, Subject } from \"../../models/Question\";\nimport { NumQuestionsStep } from \"../steps/NumQuestionsStep\";\nimport { DifficultyStep } from \"../steps/DifficultyStep\";\nimport { Difficulty } from \"../../models/TriviaApi\";\nimport { SubjectsStep } from \"../steps/SubjectsStep\";\nimport { FinalSummaryStep } from \"../steps/FinalSummaryStep\";\nimport { ActualQuiz } from \"../ActualQuiz\";\nimport { Navbar } from \"../../components/Navbar\";\nimport { QuizzesContext } from \"../../contexts/quizzes/Quizzes\";\n\nexport const PublicQuizzes: React.FC = () => {\n  // const [questions, setQuestions] = useState<Question[]>([]);\n  // const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  // const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n  // const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n  // const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n  // const [currentStep, setCurrentStep] = useState(1);\n  // const [startedQuiz, setStartedQuiz] = useState(false);\n\n  const {\n    quizType,\n    currentSubject,\n    numberOfQuestions,\n    difficultyLevel,\n    configQuiz,\n    quizConfigurationStep,\n    startedQuiz,\n    uploadQuestions,\n    goToNextQuizConfiguration,\n    questions,\n    reset\n  } = useContext(QuizzesContext);\n\n  const renderInstruction = () => {\n    switch (quizConfigurationStep) {\n      case 1:\n        return <SubjectsStep quizType={quizType} />;\n\n      case 2:\n        return <NumQuestionsStep currentAmount={numberOfQuestions} />;\n\n      case 3:\n        return <DifficultyStep currentLevel={difficultyLevel} />;\n\n      case 4:\n        return <FinalSummaryStep />;\n\n      default:\n        return <h1>SOMETHING WENT WRONG...</h1>;\n    }\n  };\n\n  return (\n    <>\n      {!startedQuiz ? (\n        <header className=\"App-header\">{renderInstruction()}</header>\n      ) : (\n        <ActualQuiz\n          subject={currentSubject as Subject}\n          allQuestions={questions}\n          reset={reset}\n        />\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}