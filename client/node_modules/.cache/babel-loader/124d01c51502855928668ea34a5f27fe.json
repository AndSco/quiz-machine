{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/quizzes/Quizzes.tsx\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { QuizType } from \"../../models/PublicQuizQuestion\";\nimport { getCustomUsersQuizzes } from \"../../utils/dbFunctions\";\nconst startingValue = {\n  quizType: QuizType.TRIVIA,\n  currentSubject: \"\",\n  numberOfQuestions: 5,\n  difficultyLevel: \"medium\",\n  quizConfigurationStep: 1,\n  questions: [],\n  configQuiz: (option, inputValue) => {},\n  startedQuiz: false,\n  goToNextQuizConfiguration: () => {},\n  uploadQuestions: ([]) => {},\n  reset: () => {},\n  usersCustomQuizzes: [],\n  refreshAllQuizzes: () => {}\n};\nexport const QuizzesContext = createContext(startingValue);\nexport const QuizzesContextProvider = ({\n  children\n}) => {\n  const [questions, setQuestions] = useState([]);\n  const [quizType, setQuizType] = useState(QuizType.TRIVIA);\n  const [numberOfQuestions, setNumberOfQuestions] = useState(5);\n  const [difficultyLevel, setDifficultyLevel] = useState(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState(\"\");\n  const [quizConfigurationStep, setQuizConfigurationStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n  const [usersCustomQuizzes, setUsersCustomQuizzes] = useState([]);\n  useEffect(() => {\n    const getCustomQuizzes = async () => {\n      const dbResponse = await getCustomUsersQuizzes();\n      const customQuizzes = dbResponse.payload;\n      setUsersCustomQuizzes(customQuizzes);\n    };\n\n    getCustomQuizzes();\n  }, []); ///////\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setQuizConfigurationStep(1);\n    setNumberOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const configQuiz = (option, inputValue) => {\n    if (option === \"quizType\") {\n      reset();\n      setQuizType(inputValue);\n    }\n\n    if (option === \"difficulty\") {\n      setDifficultyLevel(inputValue);\n    }\n\n    if (option === \"numberOfQuestions\") {\n      setNumberOfQuestions(inputValue);\n    }\n\n    if (option === \"subject\") {\n      setCurrentSubject(inputValue);\n    }\n  };\n\n  const goToNextQuizConfiguration = () => setQuizConfigurationStep(prev => prev + 1);\n\n  const uploadQuestions = questions => {\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  const refreshAllQuizzes = () => {};\n\n  const valuesToPass = {\n    quizType,\n    currentSubject,\n    difficultyLevel,\n    numberOfQuestions,\n    questions,\n    quizConfigurationStep,\n    configQuiz,\n    goToNextQuizConfiguration,\n    startedQuiz,\n    uploadQuestions,\n    reset,\n    usersCustomQuizzes,\n    refreshAllQuizzes\n  };\n  return /*#__PURE__*/React.createElement(QuizzesContext.Provider, {\n    value: { ...valuesToPass\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/quizzes/Quizzes.tsx"],"names":["React","createContext","useState","useEffect","QuizType","getCustomUsersQuizzes","startingValue","quizType","TRIVIA","currentSubject","numberOfQuestions","difficultyLevel","quizConfigurationStep","questions","configQuiz","option","inputValue","startedQuiz","goToNextQuizConfiguration","uploadQuestions","reset","usersCustomQuizzes","refreshAllQuizzes","QuizzesContext","QuizzesContextProvider","children","setQuestions","setQuizType","setNumberOfQuestions","setDifficultyLevel","setCurrentSubject","setQuizConfigurationStep","setStartedQuiz","setUsersCustomQuizzes","getCustomQuizzes","dbResponse","customQuizzes","payload","prev","valuesToPass"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { Question, QuizType, Subject } from \"../../models/PublicQuizQuestion\";\nimport { Difficulty } from \"../../models/TriviaApi\";\nimport { PrivateQuiz } from \"../../models/PrivateQuiz\";\nimport { getCustomUsersQuizzes } from \"../../utils/dbFunctions\";\n\ntype ConfigOption = \"quizType\" | \"difficulty\" | \"numberOfQuestions\" | \"subject\";\n\ninterface iQuizzesContext {\n  quizType: QuizType;\n  currentSubject: Subject;\n  numberOfQuestions: number;\n  difficultyLevel: Difficulty;\n  quizConfigurationStep: number;\n  questions: Question[];\n  configQuiz: (option: ConfigOption, inputValue: any) => void;\n  startedQuiz: boolean;\n  goToNextQuizConfiguration: () => void;\n  uploadQuestions: (questions: Question[]) => void;\n  reset: () => void;\n  usersCustomQuizzes: PrivateQuiz[];\n  refreshAllQuizzes: () => void;\n}\n\nconst startingValue: iQuizzesContext = {\n  quizType: QuizType.TRIVIA,\n  currentSubject: \"\",\n  numberOfQuestions: 5,\n  difficultyLevel: \"medium\",\n  quizConfigurationStep: 1,\n  questions: [],\n  configQuiz: (option: ConfigOption, inputValue: any) => {},\n  startedQuiz: false,\n  goToNextQuizConfiguration: () => {},\n  uploadQuestions: ([]) => {},\n  reset: () => {},\n  usersCustomQuizzes: [],\n  refreshAllQuizzes: () => {}\n};\n\nexport const QuizzesContext = createContext(startingValue);\n\nexport const QuizzesContextProvider: React.FC = ({ children }) => {\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  const [numberOfQuestions, setNumberOfQuestions] = useState<number>(5);\n  const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n  const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n  const [quizConfigurationStep, setQuizConfigurationStep] = useState(1);\n  const [startedQuiz, setStartedQuiz] = useState(false);\n  const [usersCustomQuizzes, setUsersCustomQuizzes] = useState<PrivateQuiz[]>(\n    []\n  );\n\n  useEffect(() => {\n    const getCustomQuizzes = async () => {\n      const dbResponse = await getCustomUsersQuizzes();\n      const customQuizzes = dbResponse.payload;\n      setUsersCustomQuizzes(customQuizzes);\n    };\n\n    getCustomQuizzes();\n  }, []);\n\n  ///////\n\n  const reset = () => {\n    setStartedQuiz(false);\n    setQuizConfigurationStep(1);\n    setNumberOfQuestions(5);\n    setDifficultyLevel(\"medium\");\n  };\n\n  const configQuiz = (option: ConfigOption, inputValue: any) => {\n    if (option === \"quizType\") {\n      reset();\n      setQuizType(inputValue);\n    }\n    if (option === \"difficulty\") {\n      setDifficultyLevel(inputValue);\n    }\n    if (option === \"numberOfQuestions\") {\n      setNumberOfQuestions(inputValue);\n    }\n    if (option === \"subject\") {\n      setCurrentSubject(inputValue);\n    }\n  };\n\n  const goToNextQuizConfiguration = () =>\n    setQuizConfigurationStep(prev => prev + 1);\n\n  const uploadQuestions = (questions: Question[]) => {\n    setQuestions(questions);\n    setStartedQuiz(true);\n  };\n\n  const refreshAllQuizzes = () => {};\n\n  const valuesToPass: iQuizzesContext = {\n    quizType,\n    currentSubject,\n    difficultyLevel,\n    numberOfQuestions,\n    questions,\n    quizConfigurationStep,\n    configQuiz,\n    goToNextQuizConfiguration,\n    startedQuiz,\n    uploadQuestions,\n    reset,\n    usersCustomQuizzes,\n    refreshAllQuizzes\n  };\n\n  return (\n    <QuizzesContext.Provider value={{ ...valuesToPass }}>\n      {children}\n    </QuizzesContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}