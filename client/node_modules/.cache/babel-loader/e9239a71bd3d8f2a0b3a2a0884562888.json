{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nexport const ActualPrivateQuiz = ({\n  quizId,\n  reset\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = await getSingleQuiz(quizId);\n      setCurrentQuiz(quiz);\n    };\n\n    loadQuiz();\n  }, []);\n  console.log(\"CURRENT QUIZ\", currentQuiz); // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // const [score, setScore] = useState(0);\n  // const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  // const givePoint = () => setScore(prevScore => prevScore + 1);\n  // const thereAreStillQuestions = () =>\n  //   allQuestions.length >= currentQuestionIndex + 1;\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \"hello\") // <QuizBackground imageUrl={subject}>\n  //   {thereAreStillQuestions() ? (\n  //     <QuestionCard\n  //       question={allQuestions[currentQuestionIndex]}\n  //       next={goToNextQuestion}\n  //       numberOfQuestions={allQuestions.length}\n  //       currentNumberOfQuestion={currentQuestionIndex + 1}\n  //       givePoint={givePoint}\n  //     />\n  //   ) : (\n  //     <Ending\n  //       score={score}\n  //       totalQuestions={allQuestions.length}\n  //       playAgain={reset}\n  //     />\n  //   )}\n  // </QuizBackground>\n  ;\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx"],"names":["React","useState","useEffect","getSingleQuiz","ActualPrivateQuiz","quizId","reset","currentQuiz","setCurrentQuiz","loadQuiz","quiz","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAOA,SAASC,aAAT,QAA8B,4BAA9B;AAOA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;AAClEC,EAAAA,MADkE;AAElEC,EAAAA;AAFkE,CAAD,KAG7D;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAqB,IAArB,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAI,MAAMP,aAAa,CAACE,MAAD,CAAjC;AACAG,MAAAA,cAAc,CAACE,IAAD,CAAd;AACD,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;AASAE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,WAA5B,EAZI,CAcJ;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBF;AAoBD,CA5CM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Question, Subject } from \"../../../models/Question\";\nimport { QuestionCard } from \"../../replies/QuestionCard\";\nimport { Ending } from \"../../Ending\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { PrivateQuiz } from \"../../../models/PrivateQuiz\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\n\ninterface ActualPrivateQuizProps {\n  quizId: string;\n  reset: () => void;\n}\n\nexport const ActualPrivateQuiz: React.FC<ActualPrivateQuizProps> = ({\n  quizId,\n  reset\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState<PrivateQuiz | null>(null);\n\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = (await getSingleQuiz(quizId)) as unknown;\n      setCurrentQuiz(quiz as PrivateQuiz);\n    };\n\n    loadQuiz();\n  }, []);\n\n  console.log(\"CURRENT QUIZ\", currentQuiz);\n\n  // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // const [score, setScore] = useState(0);\n  // const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  // const givePoint = () => setScore(prevScore => prevScore + 1);\n  // const thereAreStillQuestions = () =>\n  //   allQuestions.length >= currentQuestionIndex + 1;\n\n  return (\n    <h1>hello</h1>\n    // <QuizBackground imageUrl={subject}>\n    //   {thereAreStillQuestions() ? (\n    //     <QuestionCard\n    //       question={allQuestions[currentQuestionIndex]}\n    //       next={goToNextQuestion}\n    //       numberOfQuestions={allQuestions.length}\n    //       currentNumberOfQuestion={currentQuestionIndex + 1}\n    //       givePoint={givePoint}\n    //     />\n    //   ) : (\n    //     <Ending\n    //       score={score}\n    //       totalQuestions={allQuestions.length}\n    //       playAgain={reset}\n    //     />\n    //   )}\n    // </QuizBackground>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}