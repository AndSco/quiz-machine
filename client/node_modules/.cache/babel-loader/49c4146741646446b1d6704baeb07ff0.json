{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { getTriviaApiQuestions } from \"./utils/triviaAPI\";\nimport { getProgrammingQuizApiQuestions } from \"./utils/programmingQuizAPI\";\nimport { QuizType } from \"./models/Question\";\nimport { normalizeQuestions } from \"./utils/functions\";\nimport { FirstStep } from \"./components/steps/FirstStep\";\nimport { SecondStep } from \"./components/steps/SecondStep\";\n\nconst App = () => {\n  const [questions, setQuestions] = useState([]);\n  const [quizType, setQuizType] = useState(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [currentStep, setCurrentStep] = useState(1);\n  console.log(\"curr step\", currentStep);\n\n  const chooseQuiz = quizType => {\n    setQuizType(quizType);\n  };\n\n  const chooseAmountOfQuestions = num => {\n    setNumOfQuestions(num);\n  };\n\n  const goForward = () => setCurrentStep(prev => prev + 1);\n\n  const getQuestions = async () => {\n    let questions;\n\n    if (quizType === QuizType.TRIVIA) {\n      questions = await getTriviaApiQuestions(numOfQuestions, \"Entertainment: Books\", \"hard\");\n    } else {\n      questions = await getProgrammingQuizApiQuestions(numOfQuestions, \"code\", \"Hard\");\n    }\n\n    const formattedQuestions = normalizeQuestions(quizType, questions);\n    setQuestions(formattedQuestions);\n  };\n\n  console.log(\"QST\", questions);\n\n  const renderContent = () => currentStep === 1 ? /*#__PURE__*/React.createElement(FirstStep, {\n    chooseQuiz: chooseQuiz,\n    goForward: goForward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }) : currentStep === 2 ? /*#__PURE__*/React.createElement(SecondStep, {\n    chooseAmountOfQuestions: chooseAmountOfQuestions,\n    currentAmount: numOfQuestions,\n    goForward: goForward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"NOTHING\");\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, renderContent()));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx"],"names":["React","useState","getTriviaApiQuestions","getProgrammingQuizApiQuestions","QuizType","normalizeQuestions","FirstStep","SecondStep","App","questions","setQuestions","quizType","setQuizType","TRIVIA","numOfQuestions","setNumOfQuestions","currentStep","setCurrentStep","console","log","chooseQuiz","chooseAmountOfQuestions","num","goForward","prev","getQuestions","formattedQuestions","renderContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,SAASC,8BAAT,QAA+C,4BAA/C;AACA,SAASC,QAAT,QAAmC,mBAAnC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AAEA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,UAAT,QAA2B,+BAA3B;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAa,EAAb,CAA1C;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAWG,QAAQ,CAACS,MAApB,CAAxC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAS,CAAT,CAApD;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,CAAD,CAA9C;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,WAAzB;;AAEA,QAAMI,UAAU,GAAIT,QAAD,IAAwB;AACzCC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAFD;;AAIA,QAAMU,uBAAuB,GAAIC,GAAD,IAAiB;AAC/CP,IAAAA,iBAAiB,CAACO,GAAD,CAAjB;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAMN,cAAc,CAACO,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAtC;;AAEA,QAAMC,YAAY,GAAG,YAAY;AAC/B,QAAIhB,SAAJ;;AACA,QAAIE,QAAQ,KAAKP,QAAQ,CAACS,MAA1B,EAAkC;AAChCJ,MAAAA,SAAS,GAAG,MAAMP,qBAAqB,CACrCY,cADqC,EAErC,sBAFqC,EAGrC,MAHqC,CAAvC;AAKD,KAND,MAMO;AACLL,MAAAA,SAAS,GAAG,MAAMN,8BAA8B,CAC9CW,cAD8C,EAE9C,MAF8C,EAG9C,MAH8C,CAAhD;AAKD;;AAED,UAAMY,kBAAkB,GAAGrB,kBAAkB,CAACM,QAAD,EAAWF,SAAX,CAA7C;AACAC,IAAAA,YAAY,CAACgB,kBAAD,CAAZ;AACD,GAlBD;;AAoBAR,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBV,SAAnB;;AAEA,QAAMkB,aAAa,GAAG,MACpBX,WAAW,KAAK,CAAhB,gBACE,oBAAC,SAAD;AAAW,IAAA,UAAU,EAAEI,UAAvB;AAAmC,IAAA,SAAS,EAAEG,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAEIP,WAAW,KAAK,CAAhB,gBACF,oBAAC,UAAD;AACE,IAAA,uBAAuB,EAAEK,uBAD3B;AAEE,IAAA,aAAa,EAAEP,cAFjB;AAGE,IAAA,SAAS,EAAES,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,gBAOF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVJ;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,aAAa,EADhB,CADF,CADF;AAQD,CA7DD;;AA+DA,eAAenB,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { getTriviaApiQuestions } from \"./utils/triviaAPI\";\nimport { getProgrammingQuizApiQuestions } from \"./utils/programmingQuizAPI\";\nimport { QuizType, Question } from \"./models/Question\";\nimport { normalizeQuestions } from \"./utils/functions\";\nimport { QuizChoiceButton } from \"./components/QuizChoiceButton\";\nimport { FirstStep } from \"./components/steps/FirstStep\";\nimport { SecondStep } from \"./components/steps/SecondStep\";\n\nconst App: React.FC = () => {\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n  const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n  const [currentStep, setCurrentStep] = useState(1);\n\n  console.log(\"curr step\", currentStep);\n\n  const chooseQuiz = (quizType: QuizType) => {\n    setQuizType(quizType);\n  };\n\n  const chooseAmountOfQuestions = (num: number) => {\n    setNumOfQuestions(num);\n  };\n\n  const goForward = () => setCurrentStep(prev => prev + 1);\n\n  const getQuestions = async () => {\n    let questions;\n    if (quizType === QuizType.TRIVIA) {\n      questions = await getTriviaApiQuestions(\n        numOfQuestions,\n        \"Entertainment: Books\",\n        \"hard\"\n      );\n    } else {\n      questions = await getProgrammingQuizApiQuestions(\n        numOfQuestions,\n        \"code\",\n        \"Hard\"\n      );\n    }\n\n    const formattedQuestions = normalizeQuestions(quizType, questions);\n    setQuestions(formattedQuestions);\n  };\n\n  console.log(\"QST\", questions);\n\n  const renderContent = () =>\n    currentStep === 1 ? (\n      <FirstStep chooseQuiz={chooseQuiz} goForward={goForward} />\n    ) : currentStep === 2 ? (\n      <SecondStep\n        chooseAmountOfQuestions={chooseAmountOfQuestions}\n        currentAmount={numOfQuestions}\n        goForward={goForward}\n      />\n    ) : (\n      <h1>NOTHING</h1>\n    );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {renderContent()}\n        {/* <button onClick={getQuestions}>GET QUESTIONS</button> */}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}