{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/loading/Loading.tsx\";\nimport React, { createContext, useState } from \"react\";\nconst startingValue = {\n  isLoading: false,\n  startLoading: () => {},\n  stopLoading: () => {}\n};\nexport const LoadingContext = createContext(startingValue);\nexport const LoadingContextProvider = ({\n  children\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const startLoading = () => setIsLoading(true);\n\n  const stopLoading = () => setIsLoading(false);\n\n  const valuesToPass = {\n    isLoading,\n    startLoading,\n    stopLoading\n  };\n  return /*#__PURE__*/React.createElement(LoadingContext.Provider, {\n    value: { ...valuesToPass\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/contexts/loading/Loading.tsx"],"names":["React","createContext","useState","startingValue","isLoading","startLoading","stopLoading","LoadingContext","LoadingContextProvider","children","setIsLoading","valuesToPass"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAQA,MAAMC,aAA8B,GAAG;AACrCC,EAAAA,SAAS,EAAE,KAD0B;AAErCC,EAAAA,YAAY,EAAE,MAAM,CAAE,CAFe;AAGrCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAHgB,CAAvC;AAMA,OAAO,MAAMC,cAAc,GAAGN,aAAa,CAACE,aAAD,CAApC;AAEP,OAAO,MAAMK,sBAAgC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChE,QAAM,CAACL,SAAD,EAAYM,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMG,YAAY,GAAG,MAAMK,YAAY,CAAC,IAAD,CAAvC;;AACA,QAAMJ,WAAW,GAAG,MAAMI,YAAY,CAAC,KAAD,CAAtC;;AAEA,QAAMC,YAA6B,GAAG;AACpCP,IAAAA,SADoC;AAEpCC,IAAAA,YAFoC;AAGpCC,IAAAA;AAHoC,GAAtC;AAMA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE,EAAE,GAAGK;AAAL,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD,CAhBM","sourcesContent":["import React, { createContext, useState } from \"react\";\n\ninterface iLoadingContext {\n  isLoading: boolean;\n  startLoading: () => void;\n  stopLoading: () => void;\n}\n\nconst startingValue: iLoadingContext = {\n  isLoading: false,\n  startLoading: () => {},\n  stopLoading: () => {}\n};\n\nexport const LoadingContext = createContext(startingValue);\n\nexport const LoadingContextProvider: React.FC = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const startLoading = () => setIsLoading(true);\n  const stopLoading = () => setIsLoading(false);\n\n  const valuesToPass: iLoadingContext = {\n    isLoading,\n    startLoading,\n    stopLoading\n  };\n\n  return (\n    <LoadingContext.Provider value={{ ...valuesToPass }}>\n      {children}\n    </LoadingContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}