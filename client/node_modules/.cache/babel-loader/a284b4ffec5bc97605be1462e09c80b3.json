{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/QuestionCard.tsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StyledButton } from \"../QuizChoiceButton\";\nimport { Colors } from \"../../constants/colors\";\nimport { Reply } from \"./Reply\";\nconst StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n`;\nconst NextButton = styled(StyledButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${props => props.hasReplied ? Colors.VIOLET : \"lightgrey\"};\n  cursor: ${props => props.hasReplied ? \"pointer\" : \"auto\"};\n`;\nconst RepliesContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n`;\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nexport const QuestionCard = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion\n}) => {\n  console.log(\"QUESTION\", question);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n\n  const isRightReply = reply => reply === question.rightReply;\n\n  const goToNextQuestion = async () => {\n    await setHasReplied(false);\n    next();\n  };\n\n  return /*#__PURE__*/React.createElement(StyledCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, question.question), /*#__PURE__*/React.createElement(RepliesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, question.allReplies.filter(reply => reply !== null).map((reply, index) => /*#__PURE__*/React.createElement(Reply, {\n    key: index,\n    isRight: isRightReply(reply),\n    hasReplied: hasReplied,\n    replyText: reply,\n    replyQuestion: replyQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, `${index + 1}. ${reply}`))), /*#__PURE__*/React.createElement(NextButton, {\n    hasReplied: hasReplied,\n    disabled: !hasReplied,\n    onClick: goToNextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(QuestionNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, `${currentNumberOfQuestion}/${numberOfQuestions}`));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/QuestionCard.tsx"],"names":["React","useState","styled","StyledButton","Colors","Reply","StyledCard","div","NextButton","VIOLET","props","hasReplied","RepliesContainer","QuestionNumber","h4","QuestionCard","question","next","numberOfQuestions","currentNumberOfQuestion","console","log","setHasReplied","replyQuestion","isRightReply","reply","rightReply","goToNextQuestion","allReplies","filter","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,MAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAI;;;;;;;CAA9B;AASA,MAAMC,UAAU,GAAGN,MAAM,CAACC,YAAD,CAAe;sBAClBC,MAAM,CAACK,MAAO;sBACbC,KAAD,IAClBA,KAAK,CAACC,UAAN,GAAmBP,MAAM,CAACK,MAA1B,GAAmC,WAAY;YACtCC,KAAD,IACRA,KAAK,CAACC,UAAN,GAAmB,SAAnB,GAA+B,MAAO;CAL1C;AAQA,MAAMC,gBAAgB,GAAGV,MAAM,CAACK,GAAI;;;;CAApC;AAMA,MAAMM,cAAc,GAAGX,MAAM,CAACY,EAAG;;;;;;;;;CAAjC;AAkBA,OAAO,MAAMC,YAAyC,GAAG,CAAC;AACxDC,EAAAA,QADwD;AAExDC,EAAAA,IAFwD;AAGxDC,EAAAA,iBAHwD;AAIxDC,EAAAA;AAJwD,CAAD,KAKnD;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;AACA,QAAM,CAACL,UAAD,EAAaW,aAAb,IAA8BrB,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMsB,aAAa,GAAG,MAAMD,aAAa,CAAC,IAAD,CAAzC;;AACA,QAAME,YAAY,GAAIC,KAAD,IAAmBA,KAAK,KAAKT,QAAQ,CAACU,UAA3D;;AAEA,QAAMC,gBAAgB,GAAG,YAAY;AACnC,UAAML,aAAa,CAAC,KAAD,CAAnB;AACAL,IAAAA,IAAI;AACL,GAHD;;AAKA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,QAAQ,CAACA,QAAd,CADF,eAEE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,CAACY,UAAT,CACEC,MADF,CACSJ,KAAK,IAAIA,KAAK,KAAK,IAD5B,EAEEK,GAFF,CAEM,CAACL,KAAD,EAAQM,KAAR,kBACH,oBAAC,KAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,OAAO,EAAEP,YAAY,CAACC,KAAD,CAFvB;AAGE,IAAA,UAAU,EAAEd,UAHd;AAIE,IAAA,SAAS,EAAEc,KAJb;AAKE,IAAA,aAAa,EAAEF,aALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOI,GAAEQ,KAAK,GAAG,CAAE,KAAIN,KAAM,EAP1B,CAHH,CADH,CAFF,eAiBE,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEd,UADd;AAEE,IAAA,QAAQ,EAAE,CAACA,UAFb;AAGE,IAAA,OAAO,EAAEgB,gBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAwBE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkB,GAAER,uBAAwB,IAAGD,iBAAkB,EAAjE,CAxBF,CADF;AA4BD,CA7CM","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Question } from \"../../models/Question\";\nimport { StyledButton } from \"../QuizChoiceButton\";\nimport { Colors } from \"../../constants/colors\";\nimport { Reply } from \"./Reply\";\n\nconst StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n`;\n\nconst NextButton = styled(StyledButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${(props: { hasReplied: boolean }) =>\n    props.hasReplied ? Colors.VIOLET : \"lightgrey\"};\n  cursor: ${(props: { hasReplied: boolean }) =>\n    props.hasReplied ? \"pointer\" : \"auto\"};\n`;\n\nconst RepliesContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface QuestionCardProps {\n  question: Question;\n  numberOfQuestions: number;\n  currentNumberOfQuestion: number;\n  next: () => void;\n}\n\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion\n}) => {\n  console.log(\"QUESTION\", question);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n  const isRightReply = (reply: string) => reply === question.rightReply;\n\n  const goToNextQuestion = async () => {\n    await setHasReplied(false);\n    next();\n  };\n\n  return (\n    <StyledCard>\n      <h4>{question.question}</h4>\n      <RepliesContainer>\n        {question.allReplies\n          .filter(reply => reply !== null)\n          .map((reply, index) => (\n            <Reply\n              key={index}\n              isRight={isRightReply(reply)}\n              hasReplied={hasReplied}\n              replyText={reply}\n              replyQuestion={replyQuestion}\n            >\n              {`${index + 1}. ${reply}`}\n            </Reply>\n          ))}\n      </RepliesContainer>\n      <NextButton\n        hasReplied={hasReplied}\n        disabled={!hasReplied}\n        onClick={goToNextQuestion}\n      >\n        NEXT\n      </NextButton>\n      <QuestionNumber>{`${currentNumberOfQuestion}/${numberOfQuestions}`}</QuestionNumber>\n    </StyledCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}