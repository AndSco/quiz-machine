{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/QuizCreationOrEditForm.tsx\";\nimport React, { useReducer, useState, useContext } from \"react\";\nimport { QuizCreationReducer, QuizCreationStartingValues } from \"../../../../reducers/QuizCreation\";\nimport { Input, StyledLabel, Container as InputContainer } from \"../../../UI/Input\";\nimport { FormContainer, FormTitle } from \"../../../UI/Form\";\nimport { QuestionSubForm } from \"./questions_subform/QuestionSubForm\";\nimport { createQuiz, editQuiz } from \"../../../../utils/dbFunctions\";\nimport { AuthContext } from \"../../../../contexts/auth/Auth\";\nimport { QuizzesContext } from \"../../../../contexts/quizzes/Quizzes\";\nimport { SavedQuestionCard } from \"./SavedQuestionCard\";\nimport { Icon } from \"../../../UI/Icon\";\nimport { capitaliseInput, getPropertyName } from \"../../../../utils/functions\";\nimport { AddQuestionButton, RadioButtonsContainer, RadioContainer, FormButton } from \"./Styled\";\nimport { BackgroundImagePreview } from \"./BackgroundImagePreview\";\nexport const QuizCreationOrEditForm = ({\n  usage,\n  currentQuiz,\n  onFormClose\n}) => {\n  const {\n    currentUser,\n    refreshUserQuizzes\n  } = useContext(AuthContext);\n  const {\n    getCustomQuizzes\n  } = useContext(QuizzesContext);\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(QuizCreationReducer, usage === \"creation\" ? QuizCreationStartingValues : currentQuiz);\n  const [uploadMessage, setUploadMessage] = useState(\"\");\n  const [showUploadedQuestions, setShowUploadedQuestions] = useState(false);\n  const [wantsToChangeBackground, setWantsToChangeBackground] = useState(false);\n\n  const startChangingBackground = () => setWantsToChangeBackground(true);\n\n  const handleChange = (input, inputName) => {\n    dispatch({\n      type: inputName,\n      payload: input\n    });\n  };\n\n  const handleSubmit = async () => {\n    const quizGenerated = { ...inputValues\n    };\n    quizGenerated.title = capitaliseInput(quizGenerated.title);\n\n    if (quizGenerated.questions.length < 1) {\n      alert(\"You cannot create a quiz without questions!\");\n      return;\n    }\n\n    if (usage === \"editing\") {\n      await editQuiz(currentQuiz._id, quizGenerated);\n    } else {\n      const response = await createQuiz(quizGenerated, currentUser._id);\n      setUploadMessage(response.message);\n    }\n\n    refreshUserQuizzes();\n    getCustomQuizzes();\n    onFormClose();\n  };\n\n  const handleRadioButtonChange = choice => {\n    const actionToDispatch = {\n      type: \"isPrivate\",\n      payload: false\n    };\n\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n\n    dispatch(actionToDispatch);\n  };\n\n  const saveQuestionInState = question => dispatch({\n    type: \"questions\",\n    payload: question\n  });\n\n  const deleteQuestionFromState = questionText => {\n    dispatch({\n      type: \"questions\",\n      payload: questionText\n    });\n  };\n\n  const closeQuestionForm = () => setIsAddingQuestions(false);\n\n  return /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, isAddingQuestions ? /*#__PURE__*/React.createElement(QuestionSubForm, {\n    saveQuestionInState: saveQuestionInState,\n    closeItself: closeQuestionForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }) : uploadMessage ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, uploadMessage) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, usage === \"creation\" ? \"Create\" : \"Edit\", \" your quiz\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    inputName: \"title\",\n    label: \"quiz title\",\n    onChangeFunction: handleChange,\n    value: getPropertyName(inputValues, \"title\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), wantsToChangeBackground ? /*#__PURE__*/React.createElement(Input, {\n    inputName: \"backgroundImageUrl\",\n    label: \"image background url\",\n    onChangeFunction: handleChange,\n    value: getPropertyName(inputValues, \"backgroundImageUrl\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(BackgroundImagePreview, {\n    changeBackground: startChangingBackground,\n    imageUrl: inputValues.backgroundImageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(InputContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"What do you want to do with this quiz?\".toUpperCase()), /*#__PURE__*/React.createElement(RadioButtonsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RadioContainer, {\n    isSelected: inputValues.isPrivate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"yes\",\n    name: \"isPrivate\",\n    value: \"yes\",\n    onChange: e => handleRadioButtonChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"yes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }, \"Keep private\")), /*#__PURE__*/React.createElement(RadioContainer, {\n    isSelected: !inputValues.isPrivate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"no\",\n    name: \"isPrivate\",\n    value: \"no\",\n    onChange: e => handleRadioButtonChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, \"Make public\")))), /*#__PURE__*/React.createElement(AddQuestionButton, {\n    onClick: () => setIsAddingQuestions(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"plus-circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }), \"Add a question\"), inputValues.questions.map((question, index) => /*#__PURE__*/React.createElement(SavedQuestionCard, {\n    key: index,\n    question: question,\n    removeQuestion: deleteQuestionFromState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"SUBMIT\"))));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/quizForm/QuizCreationOrEditForm.tsx"],"names":["React","useReducer","useState","useContext","QuizCreationReducer","QuizCreationStartingValues","Input","StyledLabel","Container","InputContainer","FormContainer","FormTitle","QuestionSubForm","createQuiz","editQuiz","AuthContext","QuizzesContext","SavedQuestionCard","Icon","capitaliseInput","getPropertyName","AddQuestionButton","RadioButtonsContainer","RadioContainer","FormButton","BackgroundImagePreview","QuizCreationOrEditForm","usage","currentQuiz","onFormClose","currentUser","refreshUserQuizzes","getCustomQuizzes","isAddingQuestions","setIsAddingQuestions","inputValues","dispatch","uploadMessage","setUploadMessage","showUploadedQuestions","setShowUploadedQuestions","wantsToChangeBackground","setWantsToChangeBackground","startChangingBackground","handleChange","input","inputName","type","payload","handleSubmit","quizGenerated","title","questions","length","alert","_id","response","message","handleRadioButtonChange","choice","actionToDispatch","saveQuestionInState","question","deleteQuestionFromState","questionText","closeQuestionForm","e","preventDefault","backgroundImageUrl","toUpperCase","isPrivate","target","value","map","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,SACEC,mBADF,EAEEC,0BAFF,QAKO,mCALP;AAMA,SACEC,KADF,EAEEC,WAFF,EAGEC,SAAS,IAAIC,cAHf,QAIO,mBAJP;AAKA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,kBAAzC;AAMA,SAASC,eAAT,QAAgC,qCAAhC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,+BAArC;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,6BAAjD;AACA,SACEC,iBADF,EAEEC,qBAFF,EAGEC,cAHF,EAKEC,UALF,QAMO,UANP;AAOA,SAASC,sBAAT,QAAuC,0BAAvC;AAUA,OAAO,MAAMC,sBAAuC,GAAG,CAAC;AACtDC,EAAAA,KADsD;AAEtDC,EAAAA,WAFsD;AAGtDC,EAAAA;AAHsD,CAAD,KAIjD;AACJ,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAsC5B,UAAU,CAACY,WAAD,CAAtD;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAuB7B,UAAU,CAACa,cAAD,CAAvC;AACA,QAAM,CAACiB,iBAAD,EAAoBC,oBAApB,IAA4ChC,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACiC,WAAD,EAAcC,QAAd,IAA0BnC,UAAU,CACxCG,mBADwC,EAExCuB,KAAK,KAAK,UAAV,GACItB,0BADJ,GAEKuB,WAJmC,CAA1C;AAMA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCpC,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACqC,qBAAD,EAAwBC,wBAAxB,IAAoDtC,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACuC,uBAAD,EAA0BC,0BAA1B,IAAwDxC,QAAQ,CAAC,KAAD,CAAtE;;AAEA,QAAMyC,uBAAuB,GAAG,MAAMD,0BAA0B,CAAC,IAAD,CAAhE;;AAEA,QAAME,YAAY,GAAG,CAACC,KAAD,EAAgBC,SAAhB,KAAyC;AAC5DV,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAED,SAAR;AAAmBE,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,YAAY,GAAG,YAAY;AAC/B,UAAMC,aAAa,GAAG,EAAE,GAAGf;AAAL,KAAtB;AACAe,IAAAA,aAAa,CAACC,KAAd,GAAsBhC,eAAe,CAAC+B,aAAa,CAACC,KAAf,CAArC;;AACA,QAAID,aAAa,CAACE,SAAd,CAAwBC,MAAxB,GAAiC,CAArC,EAAwC;AACtCC,MAAAA,KAAK,CAAC,6CAAD,CAAL;AACA;AACD;;AAED,QAAI3B,KAAK,KAAK,SAAd,EAAyB;AACvB,YAAMb,QAAQ,CAACc,WAAW,CAAE2B,GAAd,EAA6BL,aAA7B,CAAd;AACD,KAFD,MAEO;AACL,YAAMM,QAAQ,GAAG,MAAM3C,UAAU,CAACqC,aAAD,EAAgBpB,WAAW,CAAEyB,GAA7B,CAAjC;AACAjB,MAAAA,gBAAgB,CAAEkB,QAAD,CAA0BC,OAA3B,CAAhB;AACD;;AACD1B,IAAAA,kBAAkB;AAClBC,IAAAA,gBAAgB;AAChBH,IAAAA,WAAW;AACZ,GAjBD;;AAmBA,QAAM6B,uBAAuB,GAAIC,MAAD,IAA2B;AACzD,UAAMC,gBAAoC,GAAG;AAC3Cb,MAAAA,IAAI,EAAE,WADqC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAA7C;;AAIA,QAAIW,MAAM,KAAK,KAAf,EAAsB;AACpBC,MAAAA,gBAAgB,CAACZ,OAAjB,GAA2B,IAA3B;AACD;;AACDZ,IAAAA,QAAQ,CAACwB,gBAAD,CAAR;AACD,GATD;;AAWA,QAAMC,mBAAmB,GAAIC,QAAD,IAC1B1B,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAE,WAAR;AAAqBC,IAAAA,OAAO,EAAEc;AAA9B,GAAD,CADV;;AAGA,QAAMC,uBAAuB,GAAIC,YAAD,IAA0B;AACxD5B,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEgB;AAA9B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,MAAM/B,oBAAoB,CAAC,KAAD,CAApD;;AAEA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,iBAAiB,gBAChB,oBAAC,eAAD;AACE,IAAA,mBAAmB,EAAE4B,mBADvB;AAEE,IAAA,WAAW,EAAEI,iBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAKd5B,aAAa,gBACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,aAAL,CADe,gBAGf,uDACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,KAAK,KAAK,UAAV,GAAuB,QAAvB,GAAkC,MADrC,eADF,eAIE;AACE,IAAA,QAAQ,EAAGuC,CAAD,IAAyC;AACjDA,MAAAA,CAAC,CAACC,cAAF;AACAlB,MAAAA,YAAY;AACb,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,IAAA,gBAAgB,EAAEL,YAHpB;AAIE,IAAA,KAAK,EAAExB,eAAe,CAACe,WAAD,EAAc,OAAd,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAYGM,uBAAuB,gBACtB,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,KAAK,EAAC,sBAFR;AAGE,IAAA,gBAAgB,EAAEG,YAHpB;AAIE,IAAA,KAAK,EAAExB,eAAe,CACpBe,WADoB,EAEpB,oBAFoB,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADsB,gBAWtB,oBAAC,sBAAD;AACE,IAAA,gBAAgB,EAAEQ,uBADpB;AAEE,IAAA,QAAQ,EAAER,WAAW,CAACiC,kBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,eA6BE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,yCAAyCC,WAAzC,EADH,CADF,eAIE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAElC,WAAW,CAACmC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,EAAE,EAAC,KAFL;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,QAAQ,EAAEJ,CAAC,IACTR,uBAAuB,CAACQ,CAAC,CAACK,MAAF,CAASC,KAAV,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAO,IAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADF,eAaE,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAE,CAACrC,WAAW,CAACmC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,EAAE,EAAC,IAFL;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,KAAK,EAAC,IAJR;AAKE,IAAA,QAAQ,EAAEJ,CAAC,IACTR,uBAAuB,CAACQ,CAAC,CAACK,MAAF,CAASC,KAAV,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVF,CAbF,CAJF,CA7BF,eA4DE,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE,MAAMtC,oBAAoB,CAAC,IAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,mBA5DF,EAwEGC,WAAW,CAACiB,SAAZ,CAAsBqB,GAAtB,CAA0B,CAACX,QAAD,EAAWY,KAAX,kBACzB,oBAAC,iBAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,QAAQ,EAAEZ,QAFZ;AAGE,IAAA,cAAc,EAAEC,uBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAxEH,eAgFE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhFF,CAJF,CATJ,CADF;AAoGD,CAnKM","sourcesContent":["import React, { useReducer, useState, useContext } from \"react\";\nimport {\n  QuizCreationReducer,\n  QuizCreationStartingValues,\n  QuizCreationAction,\n  InputName\n} from \"../../../../reducers/QuizCreation\";\nimport {\n  Input,\n  StyledLabel,\n  Container as InputContainer\n} from \"../../../UI/Input\";\nimport { FormContainer, FormTitle } from \"../../../UI/Form\";\nimport {\n  PrivateQuizQuestion,\n  PrivacyChoice,\n  PrivateQuiz\n} from \"../../../../models/PrivateQuiz\";\nimport { QuestionSubForm } from \"./questions_subform/QuestionSubForm\";\nimport { createQuiz, editQuiz } from \"../../../../utils/dbFunctions\";\nimport { AuthContext } from \"../../../../contexts/auth/Auth\";\nimport { QuizzesContext } from \"../../../../contexts/quizzes/Quizzes\";\nimport { ApiResponse } from \"../../../../models/ApiResponse\";\nimport { SavedQuestionCard } from \"./SavedQuestionCard\";\nimport { Icon } from \"../../../UI/Icon\";\nimport { capitaliseInput, getPropertyName } from \"../../../../utils/functions\";\nimport {\n  AddQuestionButton,\n  RadioButtonsContainer,\n  RadioContainer,\n  ToggleQuestionVisibilityButton,\n  FormButton\n} from \"./Styled\";\nimport { BackgroundImagePreview } from \"./BackgroundImagePreview\";\n\nexport type PossibleUsage = \"creation\" | \"editing\";\n\ninterface Props {\n  usage: PossibleUsage;\n  currentQuiz?: PrivateQuiz;\n  onFormClose: () => void;\n}\n\nexport const QuizCreationOrEditForm: React.FC<Props> = ({\n  usage,\n  currentQuiz,\n  onFormClose\n}) => {\n  const { currentUser, refreshUserQuizzes } = useContext(AuthContext);\n  const { getCustomQuizzes } = useContext(QuizzesContext);\n  const [isAddingQuestions, setIsAddingQuestions] = useState(false);\n  const [inputValues, dispatch] = useReducer(\n    QuizCreationReducer,\n    usage === \"creation\"\n      ? QuizCreationStartingValues\n      : (currentQuiz as PrivateQuiz)\n  );\n  const [uploadMessage, setUploadMessage] = useState(\"\");\n  const [showUploadedQuestions, setShowUploadedQuestions] = useState(false);\n  const [wantsToChangeBackground, setWantsToChangeBackground] = useState(false);\n\n  const startChangingBackground = () => setWantsToChangeBackground(true);\n\n  const handleChange = (input: string, inputName: InputName) => {\n    dispatch({ type: inputName, payload: input });\n  };\n\n  const handleSubmit = async () => {\n    const quizGenerated = { ...inputValues };\n    quizGenerated.title = capitaliseInput(quizGenerated.title);\n    if (quizGenerated.questions.length < 1) {\n      alert(\"You cannot create a quiz without questions!\");\n      return;\n    }\n\n    if (usage === \"editing\") {\n      await editQuiz(currentQuiz!._id as string, quizGenerated);\n    } else {\n      const response = await createQuiz(quizGenerated, currentUser!._id);\n      setUploadMessage((response as ApiResponse).message as string);\n    }\n    refreshUserQuizzes();\n    getCustomQuizzes();\n    onFormClose();\n  };\n\n  const handleRadioButtonChange = (choice: PrivacyChoice) => {\n    const actionToDispatch: QuizCreationAction = {\n      type: \"isPrivate\",\n      payload: false\n    };\n    if (choice === \"yes\") {\n      actionToDispatch.payload = true;\n    }\n    dispatch(actionToDispatch);\n  };\n\n  const saveQuestionInState = (question: PrivateQuizQuestion) =>\n    dispatch({ type: \"questions\", payload: question });\n\n  const deleteQuestionFromState = (questionText: string) => {\n    dispatch({ type: \"questions\", payload: questionText });\n  };\n\n  const closeQuestionForm = () => setIsAddingQuestions(false);\n\n  return (\n    <FormContainer>\n      {isAddingQuestions ? (\n        <QuestionSubForm\n          saveQuestionInState={saveQuestionInState}\n          closeItself={closeQuestionForm}\n        />\n      ) : uploadMessage ? (\n        <h2>{uploadMessage}</h2>\n      ) : (\n        <>\n          <FormTitle>\n            {usage === \"creation\" ? \"Create\" : \"Edit\"} your quiz\n          </FormTitle>\n          <form\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              handleSubmit();\n            }}\n          >\n            <Input\n              inputName=\"title\"\n              label=\"quiz title\"\n              onChangeFunction={handleChange}\n              value={getPropertyName(inputValues, \"title\")}\n            />\n            {wantsToChangeBackground ? (\n              <Input\n                inputName=\"backgroundImageUrl\"\n                label=\"image background url\"\n                onChangeFunction={handleChange}\n                value={getPropertyName(\n                  inputValues,\n                  \"backgroundImageUrl\" as any\n                )}\n              />\n            ) : (\n              <BackgroundImagePreview\n                changeBackground={startChangingBackground}\n                imageUrl={inputValues.backgroundImageUrl as string}\n              />\n            )}\n\n            <InputContainer>\n              <StyledLabel>\n                {\"What do you want to do with this quiz?\".toUpperCase()}\n              </StyledLabel>\n              <RadioButtonsContainer>\n                <RadioContainer isSelected={inputValues.isPrivate}>\n                  <input\n                    type=\"radio\"\n                    id=\"yes\"\n                    name=\"isPrivate\"\n                    value=\"yes\"\n                    onChange={e =>\n                      handleRadioButtonChange(e.target.value as PrivacyChoice)\n                    }\n                  />\n                  <label htmlFor=\"yes\">Keep private</label>\n                </RadioContainer>\n                <RadioContainer isSelected={!inputValues.isPrivate}>\n                  <input\n                    type=\"radio\"\n                    id=\"no\"\n                    name=\"isPrivate\"\n                    value=\"no\"\n                    onChange={e =>\n                      handleRadioButtonChange(e.target.value as PrivacyChoice)\n                    }\n                  />\n                  <label htmlFor=\"no\">Make public</label>\n                </RadioContainer>\n              </RadioButtonsContainer>\n            </InputContainer>\n            <AddQuestionButton onClick={() => setIsAddingQuestions(true)}>\n              <Icon icon={\"plus-circle\"} />\n              Add a question\n            </AddQuestionButton>\n\n            {/* {inputValues.questions.length > 0 && (\n              <ToggleQuestionVisibilityButton\n                onClick={() => setShowUploadedQuestions(prev => !prev)}\n              >\n                {showUploadedQuestions ? \"Hide\" : \"Show\"} uploaded questions\n              </ToggleQuestionVisibilityButton>\n            )} */}\n            {inputValues.questions.map((question, index) => (\n              <SavedQuestionCard\n                key={index}\n                question={question}\n                removeQuestion={deleteQuestionFromState}\n              />\n            ))}\n\n            <FormButton type=\"submit\">SUBMIT</FormButton>\n          </form>\n        </>\n      )}\n    </FormContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}