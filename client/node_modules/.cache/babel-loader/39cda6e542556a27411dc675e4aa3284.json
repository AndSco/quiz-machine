{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/UI/QuestionCard.tsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StyledButton } from \"../QuizChoiceButton\";\nimport { Colors } from \"../../constants/colors\";\nconst StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n`;\nconst NextButton = styled(StyledButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${props => props.hasReplied ? Colors.VIOLET : \"lightgrey\"};\n`;\nconst RepliesContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n`;\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst StyledReply = styled.p`\n  text-align: left;\n  line-height: 24px;\n  cursor: pointer;\n  padding: 1rem;\n  background-color: ${props => props.wasSelected && props.isRight ? \"#31ea31\" : props.wasSelected && !props.isRight ? \"#ff0f0f\" : props.isRight && props.hasReplied ? \"#31ea31\" : \"none\"};\n\n  /* :hover {\n    background-color: lightgrey;\n  } */\n`;\n\nconst Reply = ({\n  hasReplied,\n  isRight // reply,\n\n}) => {\n  const [wasSelected, setWasSelected] = useState(false);\n  return /*#__PURE__*/React.createElement(StyledReply, {\n    hasReplied: hasReplied,\n    isRight: isRight,\n    wasSelected: wasSelected,\n    onClick: () => {\n      // reply();\n      setWasSelected(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  });\n};\n\nexport const QuestionCard = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion\n}) => {\n  console.log(\"QUESTION\", question);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const reply = () => setHasReplied(true);\n\n  const isRightReply = reply => reply === question.rightReply;\n\n  return /*#__PURE__*/React.createElement(StyledCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, question.question), /*#__PURE__*/React.createElement(RepliesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, question.allReplies.filter(reply => reply !== null).map((reply, index) => /*#__PURE__*/React.createElement(Reply, {\n    key: index,\n    isRight: isRightReply(reply),\n    hasReplied: hasReplied // reply={reply}\n    // select={select}\n    // onClick={() => {\n    //   setHasReplied(true);\n    //   setWasSelected(true);\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, `${index + 1}. ${reply}`))), /*#__PURE__*/React.createElement(NextButton, {\n    hasReplied: hasReplied,\n    disabled: !hasReplied,\n    onClick: next,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(QuestionNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, `${currentNumberOfQuestion}/${numberOfQuestions}`));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/UI/QuestionCard.tsx"],"names":["React","useState","styled","StyledButton","Colors","StyledCard","div","NextButton","VIOLET","props","hasReplied","RepliesContainer","QuestionNumber","h4","StyledReply","p","wasSelected","isRight","Reply","setWasSelected","QuestionCard","question","next","numberOfQuestions","currentNumberOfQuestion","console","log","setHasReplied","reply","isRightReply","rightReply","allReplies","filter","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Question } from \"../../models/Question\";\nimport { StyledButton } from \"../QuizChoiceButton\";\nimport { Colors } from \"../../constants/colors\";\n\nconst StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n`;\n\nconst NextButton = styled(StyledButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${(props: { hasReplied: boolean }) =>\n    props.hasReplied ? Colors.VIOLET : \"lightgrey\"};\n`;\n\nconst RepliesContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface ReplyProps {\n  isRight: boolean;\n  hasReplied: boolean;\n  wasSelected: boolean;\n}\n\ninterface StyledReplyProp extends ReplyProps {\n  wasSelected: boolean;\n}\n\nconst StyledReply = styled.p`\n  text-align: left;\n  line-height: 24px;\n  cursor: pointer;\n  padding: 1rem;\n  background-color: ${(props: StyledReplyProps) =>\n    props.wasSelected && props.isRight\n      ? \"#31ea31\"\n      : props.wasSelected && !props.isRight\n      ? \"#ff0f0f\"\n      : props.isRight && props.hasReplied\n      ? \"#31ea31\"\n      : \"none\"};\n\n  /* :hover {\n    background-color: lightgrey;\n  } */\n`;\n\nconst Reply: React.FC<ReplyProps> = ({\n  hasReplied,\n  isRight\n  // reply,\n}) => {\n  const [wasSelected, setWasSelected] = useState(false);\n\n  return (\n    <StyledReply\n      hasReplied={hasReplied}\n      isRight={isRight}\n      wasSelected={wasSelected}\n      onClick={() => {\n        // reply();\n        setWasSelected(true);\n      }}\n    />\n  );\n};\n\ninterface QuestionCardProps {\n  question: Question;\n  numberOfQuestions: number;\n  currentNumberOfQuestion: number;\n  next: () => void;\n}\n\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion\n}) => {\n  console.log(\"QUESTION\", question);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const reply = () => setHasReplied(true);\n\n  const isRightReply = (reply: string) => reply === question.rightReply;\n\n  return (\n    <StyledCard>\n      <h4>{question.question}</h4>\n      <RepliesContainer>\n        {question.allReplies\n          .filter(reply => reply !== null)\n          .map((reply, index) => (\n            <Reply\n              key={index}\n              isRight={isRightReply(reply)}\n              hasReplied={hasReplied}\n              // reply={reply}\n              // select={select}\n              // onClick={() => {\n              //   setHasReplied(true);\n              //   setWasSelected(true);\n              // }}\n            >\n              {`${index + 1}. ${reply}`}\n            </Reply>\n          ))}\n      </RepliesContainer>\n      <NextButton hasReplied={hasReplied} disabled={!hasReplied} onClick={next}>\n        NEXT\n      </NextButton>\n      <QuestionNumber>{`${currentNumberOfQuestion}/${numberOfQuestions}`}</QuestionNumber>\n    </StyledCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}