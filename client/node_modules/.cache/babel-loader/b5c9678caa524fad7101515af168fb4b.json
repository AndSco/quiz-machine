{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nexport const ActualPrivateQuiz = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = await getSingleQuiz(quizId);\n      setCurrentQuiz(quiz);\n      setAllQuestions(quiz.questions);\n    };\n\n    loadQuiz();\n  }, []);\n  console.log(\"MATCH PARAMS\", quizId);\n  console.log(\"CURR QUIZ\", currentQuiz);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n\n  const thereAreStillQuestions = () => allQuestions.length >= currentQuestionIndex + 1;\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"hello from quiz \", quizId) // <QuizBackground imageUrl={subject}>\n  //   {thereAreStillQuestions() ? (\n  //     <QuestionCard\n  //       question={allQuestions[currentQuestionIndex]}\n  //       next={goToNextQuestion}\n  //       numberOfQuestions={allQuestions.length}\n  //       currentNumberOfQuestion={currentQuestionIndex + 1}\n  //       givePoint={givePoint}\n  //     />\n  //   ) : (\n  //     <Ending\n  //       score={score}\n  //       totalQuestions={allQuestions.length}\n  //       playAgain={reset}\n  //     />\n  //   )}\n  // </QuizBackground>\n  ;\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx"],"names":["React","useState","useEffect","getSingleQuiz","ActualPrivateQuiz","quizId","currentQuiz","setCurrentQuiz","loadQuiz","quiz","setAllQuestions","questions","console","log","allQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","goToNextQuestion","prev","givePoint","prevScore","thereAreStillQuestions","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAOA,SAASC,aAAT,QAA8B,4BAA9B;AAMA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;AAClEC,EAAAA;AADkE,CAAD,KAE7D;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAqB,IAArB,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAI,MAAMN,aAAa,CAACE,MAAD,CAAjC;AACAE,MAAAA,cAAc,CAACE,IAAD,CAAd;AACAC,MAAAA,eAAe,CAAED,IAAD,CAAsBE,SAAvB,CAAf;AACD,KAJD;;AAMAH,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT;AAUAI,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BR,MAA5B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,WAAzB;AAEA,QAAM,CAACQ,YAAD,EAAeJ,eAAf,IAAkCT,QAAQ,CAAwB,EAAxB,CAAhD;AACA,QAAM,CAACc,oBAAD,EAAuBC,uBAAvB,IAAkDf,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMkB,gBAAgB,GAAG,MAAMH,uBAAuB,CAACI,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAtD;;AACA,QAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAhC;;AACA,QAAMC,sBAAsB,GAAG,MAC7BT,YAAY,CAACU,MAAb,IAAuBT,oBAAoB,GAAG,CADhD;;AAGA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqBV,MAArB,CADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBF;AAoBD,CA/CM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Question, Subject } from \"../../../models/Question\";\nimport { QuestionCard } from \"../../replies/QuestionCard\";\nimport { Ending } from \"../../Ending\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { PrivateQuiz, PrivateQuizQuestion } from \"../../../models/PrivateQuiz\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\n\ninterface ActualPrivateQuizProps {\n  quizId: string;\n}\n\nexport const ActualPrivateQuiz: React.FC<ActualPrivateQuizProps> = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState<PrivateQuiz | null>(null);\n\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = (await getSingleQuiz(quizId)) as unknown;\n      setCurrentQuiz(quiz as PrivateQuiz);\n      setAllQuestions((quiz as PrivateQuiz).questions);\n    };\n\n    loadQuiz();\n  }, []);\n\n  console.log(\"MATCH PARAMS\", quizId);\n  console.log(\"CURR QUIZ\", currentQuiz);\n\n  const [allQuestions, setAllQuestions] = useState<PrivateQuizQuestion[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n  const thereAreStillQuestions = () =>\n    allQuestions.length >= currentQuestionIndex + 1;\n\n  return (\n    <h1>hello from quiz {quizId}</h1>\n    // <QuizBackground imageUrl={subject}>\n    //   {thereAreStillQuestions() ? (\n    //     <QuestionCard\n    //       question={allQuestions[currentQuestionIndex]}\n    //       next={goToNextQuestion}\n    //       numberOfQuestions={allQuestions.length}\n    //       currentNumberOfQuestion={currentQuestionIndex + 1}\n    //       givePoint={givePoint}\n    //     />\n    //   ) : (\n    //     <Ending\n    //       score={score}\n    //       totalQuestions={allQuestions.length}\n    //       playAgain={reset}\n    //     />\n    //   )}\n    // </QuizBackground>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}