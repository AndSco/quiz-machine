{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { QuestionCard } from \"../../ActualQuizComponents/QuestionCard\";\nimport { Ending } from \"../../ActualQuizComponents/Ending\";\nimport { QuizBackground } from \"../../ActualQuizComponents/QuizBackground\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nimport { useHistory } from \"react-router-dom\";\nimport { LoadingContext } from \"../../../contexts/loading/Loading\";\nexport const ActualPrivateQuiz = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const history = useHistory();\n  const {\n    stopLoading\n  } = useContext(LoadingContext);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = await getSingleQuiz(quizId);\n      setCurrentQuiz(quiz);\n    };\n\n    loadQuiz();\n  }, [quizId]);\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n\n  const thereAreStillQuestions = () => allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? /*#__PURE__*/React.createElement(QuizBackground, {\n    imageUrl: currentQuiz.backgroundImageUrl,\n    stopPlaying: () => history.push(\"/\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, thereAreStillQuestions() ? /*#__PURE__*/React.createElement(QuestionCard, {\n    question: allQuestions[currentQuestionIndex],\n    next: goToNextQuestion,\n    numberOfQuestions: allQuestions.length,\n    currentNumberOfQuestion: currentQuestionIndex + 1,\n    givePoint: givePoint,\n    quizType: \"private\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Ending, {\n    score: score,\n    totalQuestions: allQuestions.length,\n    playAgain: () => history.push(\"/\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })) : null;\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx"],"names":["React","useState","useEffect","useContext","QuestionCard","Ending","QuizBackground","getSingleQuiz","useHistory","LoadingContext","ActualPrivateQuiz","quizId","currentQuiz","setCurrentQuiz","allQuestions","setAllQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","history","stopLoading","loadQuiz","quiz","questions","goToNextQuestion","prev","givePoint","prevScore","thereAreStillQuestions","length","backgroundImageUrl","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,YAAT,QAA6B,yCAA7B;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,cAAT,QAA+B,2CAA/B;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AAMA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;AAClEC,EAAAA;AADkE,CAAD,KAE7D;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAqB,IAArB,CAA9C;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAwB,EAAxB,CAAhD;AACA,QAAM,CAACe,oBAAD,EAAuBC,uBAAvB,IAAkDhB,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMmB,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBlB,UAAU,CAACM,cAAD,CAAlC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAI,MAAMhB,aAAa,CAACI,MAAD,CAAjC;AACAE,MAAAA,cAAc,CAACU,IAAD,CAAd;AACD,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAON,CAACX,MAAD,CAPM,CAAT;AASAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAJ,EAAiB;AACfG,MAAAA,eAAe,CAACH,WAAW,CAACY,SAAb,CAAf;AACD;AACF,GAJQ,EAIN,CAACZ,WAAD,CAJM,CAAT;;AAMA,QAAMa,gBAAgB,GAAG,MAAMR,uBAAuB,CAACS,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAtD;;AACA,QAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAhC;;AACA,QAAMC,sBAAsB,GAAG,MAC7Bf,YAAY,CAACgB,MAAb,IAAuBd,oBAAoB,GAAG,CADhD;;AAGA,SAAOJ,WAAW,gBAChB,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAEA,WAAW,CAACmB,kBADxB;AAEE,IAAA,WAAW,EAAE,MAAMX,OAAO,CAACY,IAAR,CAAa,GAAb,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGH,sBAAsB,kBACrB,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEf,YAAY,CAACE,oBAAD,CADxB;AAEE,IAAA,IAAI,EAAES,gBAFR;AAGE,IAAA,iBAAiB,EAAEX,YAAY,CAACgB,MAHlC;AAIE,IAAA,uBAAuB,EAAEd,oBAAoB,GAAG,CAJlD;AAKE,IAAA,SAAS,EAAEW,SALb;AAME,IAAA,QAAQ,EAAC,SANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADqB,gBAUrB,oBAAC,MAAD;AACE,IAAA,KAAK,EAAET,KADT;AAEE,IAAA,cAAc,EAAEJ,YAAY,CAACgB,MAF/B;AAGE,IAAA,SAAS,EAAE,MAAMV,OAAO,CAACY,IAAR,CAAa,GAAb,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADgB,GAsBd,IAtBJ;AAuBD,CArDM","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { QuestionCard } from \"../../ActualQuizComponents/QuestionCard\";\nimport { Ending } from \"../../ActualQuizComponents/Ending\";\nimport { QuizBackground } from \"../../ActualQuizComponents/QuizBackground\";\nimport { PrivateQuiz, PrivateQuizQuestion } from \"../../../models/PrivateQuiz\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nimport { useHistory } from \"react-router-dom\";\nimport { LoadingContext } from \"../../../contexts/loading/Loading\";\n\ninterface ActualPrivateQuizProps {\n  quizId: string;\n}\n\nexport const ActualPrivateQuiz: React.FC<ActualPrivateQuizProps> = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState<PrivateQuiz | null>(null);\n  const [allQuestions, setAllQuestions] = useState<PrivateQuizQuestion[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const history = useHistory();\n  const { stopLoading } = useContext(LoadingContext);\n\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = (await getSingleQuiz(quizId)) as unknown;\n      setCurrentQuiz(quiz as PrivateQuiz);\n    };\n\n    loadQuiz();\n  }, [quizId]);\n\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n  const thereAreStillQuestions = () =>\n    allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? (\n    <QuizBackground\n      imageUrl={currentQuiz.backgroundImageUrl as string}\n      stopPlaying={() => history.push(\"/\")}\n    >\n      {thereAreStillQuestions() ? (\n        <QuestionCard\n          question={allQuestions[currentQuestionIndex]}\n          next={goToNextQuestion}\n          numberOfQuestions={allQuestions.length}\n          currentNumberOfQuestion={currentQuestionIndex + 1}\n          givePoint={givePoint}\n          quizType=\"private\"\n        />\n      ) : (\n        <Ending\n          score={score}\n          totalQuestions={allQuestions.length}\n          playAgain={() => history.push(\"/\")}\n        />\n      )}\n    </QuizBackground>\n  ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}