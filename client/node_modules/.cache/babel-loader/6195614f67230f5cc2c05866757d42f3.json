{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/Reply.tsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nconst StyledReply = styled.p`\n  text-align: left;\n  line-height: 24px;\n  cursor: pointer;\n  padding: 1rem;\n  background-color: ${props => props.hasReplied && props.isRight ? \"#31ea31\" : props.wasSelected && !props.isRight ? \"#ff0f0f\" : props.isRight && props.hasReplied ? \"#31ea31\" : \"none\"};\n\n  :hover {\n    background-color: ${props => !props.hasReplied ? \"lightgrey\" : \"none\"};\n  }\n`;\nexport const Reply = ({\n  hasReplied,\n  isRight,\n  replyText,\n  replyQuestion\n}) => {\n  const [wasSelected, setWasSelected] = useState(false);\n  return /*#__PURE__*/React.createElement(StyledReply, {\n    hasReplied: hasReplied,\n    isRight: isRight,\n    wasSelected: wasSelected,\n    onClick: () => {\n      setWasSelected(true);\n      replyQuestion();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, replyText);\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/Reply.tsx"],"names":["React","useState","styled","StyledReply","p","props","hasReplied","isRight","wasSelected","Reply","replyText","replyQuestion","setWasSelected"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAeA,MAAMC,WAAW,GAAGD,MAAM,CAACE,CAAE;;;;;sBAKNC,KAAD,IAClBA,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,OAA1B,GACI,SADJ,GAEIF,KAAK,CAACG,WAAN,IAAqB,CAACH,KAAK,CAACE,OAA5B,GACA,SADA,GAEAF,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACC,UAAvB,GACA,SADA,GAEA,MAAO;;;wBAGUD,KAAD,IAClB,CAACA,KAAK,CAACC,UAAP,GAAoB,WAApB,GAAkC,MAAO;;CAhB/C;AAoBA,OAAO,MAAMG,KAA2B,GAAG,CAAC;AAC1CH,EAAAA,UAD0C;AAE1CC,EAAAA,OAF0C;AAG1CG,EAAAA,SAH0C;AAI1CC,EAAAA;AAJ0C,CAAD,KAKrC;AACJ,QAAM,CAACH,WAAD,EAAcI,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,sBACE,oBAAC,WAAD;AACE,IAAA,UAAU,EAAEK,UADd;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAD,MAAAA,aAAa;AACd,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGD,SATH,CADF;AAaD,CArBM","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\ninterface ReplyProps {\n  isRight: boolean;\n  hasReplied: boolean;\n  replyText: string;\n  replyQuestion: () => void;\n}\n\ntype PartialProps = Omit<ReplyProps, \"replyText\" | \"replyQuestion\">;\n\ninterface StyledReplyProps extends PartialProps {\n  wasSelected: boolean;\n}\n\nconst StyledReply = styled.p`\n  text-align: left;\n  line-height: 24px;\n  cursor: pointer;\n  padding: 1rem;\n  background-color: ${(props: StyledReplyProps) =>\n    props.hasReplied && props.isRight\n      ? \"#31ea31\"\n      : props.wasSelected && !props.isRight\n      ? \"#ff0f0f\"\n      : props.isRight && props.hasReplied\n      ? \"#31ea31\"\n      : \"none\"};\n\n  :hover {\n    background-color: ${(props: StyledReplyProps) =>\n      !props.hasReplied ? \"lightgrey\" : \"none\"};\n  }\n`;\n\nexport const Reply: React.FC<ReplyProps> = ({\n  hasReplied,\n  isRight,\n  replyText,\n  replyQuestion\n}) => {\n  const [wasSelected, setWasSelected] = useState(false);\n\n  return (\n    <StyledReply\n      hasReplied={hasReplied}\n      isRight={isRight}\n      wasSelected={wasSelected}\n      onClick={() => {\n        setWasSelected(true);\n        replyQuestion();\n      }}\n    >\n      {replyText}\n    </StyledReply>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}