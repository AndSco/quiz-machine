{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { PublicQuizzes } from \"./components/sections/PublicQuizzes\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBookOpen, faTachometerAlt, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { PrivateSection } from \"./components/sections/private/PrivateSection\";\nimport { AuthContextProvider } from \"./contexts/auth/Auth\";\nimport { QuizzesContextProvider } from \"./contexts/quizzes/Quizzes\";\nlibrary.add(faBookOpen, faTachometerAlt, faChevronRight);\n\nconst App = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(QuizzesContextProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: PublicQuizzes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: () => /*#__PURE__*/React.createElement(AuthContextProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PrivateSection, {\n      activity: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/register\",\n    render: () => /*#__PURE__*/React.createElement(AuthContextProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PrivateSection, {\n      activity: \"register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default App; // import React, { useState } from \"react\";\n// import \"./App.css\";\n// import { QuizType, Question, Subject } from \"./models/Question\";\n// import { NumQuestionsStep } from \"./components/steps/NumQuestionsStep\";\n// import { DifficultyStep } from \"./components/steps/DifficultyStep\";\n// import { Difficulty } from \"./models/TriviaApi\";\n// import { SubjectsStep } from \"./components/steps/SubjectsStep\";\n// import { FinalSummaryStep } from \"./components/steps/FinalSummaryStep\";\n// import { ActualQuiz } from \"./components/ActualQuiz\";\n// import { Navbar } from \"./components/Navbar\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n// import {\n//   faBookOpen,\n//   faTachometerAlt,\n//   faChevronRight\n// } from \"@fortawesome/free-solid-svg-icons\";\n// library.add(faBookOpen, faTachometerAlt, faChevronRight);\n// const App: React.FC = () => {\n//   const [questions, setQuestions] = useState<Question[]>([]);\n//   const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n//   const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n//   const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n//   const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n//   const [currentStep, setCurrentStep] = useState(1);\n//   const [startedQuiz, setStartedQuiz] = useState(false);\n//   const reset = () => {\n//     setStartedQuiz(false);\n//     setCurrentStep(1);\n//     setNumOfQuestions(5);\n//     setDifficultyLevel(\"medium\");\n//   };\n//   const chooseQuiz = (quizType: QuizType) => {\n//     reset();\n//     setQuizType(quizType);\n//   };\n//   const chooseAmountOfQuestions = (num: number) => {\n//     setNumOfQuestions(num);\n//   };\n//   const changeLevel = (level: Difficulty) => setDifficultyLevel(level);\n//   const chooseSubject = (subject: Subject) => {\n//     setCurrentSubject(subject);\n//   };\n//   const goForward = () => setCurrentStep(prev => prev + 1);\n//   const uploadQuestions = (questions: Question[]) => {\n//     setQuestions(questions);\n//     setStartedQuiz(true);\n//   };\n//   console.log(\"QST\", questions);\n//   const renderInstruction = () => {\n//     switch (currentStep) {\n//       case 1:\n//         return (\n//           <SubjectsStep\n//             quizType={quizType}\n//             goForward={goForward}\n//             updateSubject={chooseSubject}\n//           />\n//         );\n//       case 2:\n//         return (\n//           <NumQuestionsStep\n//             chooseAmountOfQuestions={chooseAmountOfQuestions}\n//             currentAmount={numOfQuestions}\n//             goForward={goForward}\n//           />\n//         );\n//       case 3:\n//         return (\n//           <DifficultyStep\n//             currentLevel={difficultyLevel}\n//             changeLevel={changeLevel}\n//             goForward={goForward}\n//           />\n//         );\n//       case 4:\n//         return (\n//           <FinalSummaryStep\n//             quizType={quizType}\n//             numberOfQuestions={numOfQuestions}\n//             difficulty={difficultyLevel}\n//             subject={currentSubject as Subject}\n//             uploadQuestions={uploadQuestions}\n//             reset={reset}\n//           />\n//         );\n//       default:\n//         return <h1>SOMETHING WENT WRONG...</h1>;\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <Navbar selectedQuiz={quizType} chooseQuiz={chooseQuiz} reset={reset} />\n//       {!startedQuiz ? (\n//         <header className=\"App-header\">{renderInstruction()}</header>\n//       ) : (\n//         <ActualQuiz\n//           subject={currentSubject as Subject}\n//           allQuestions={questions}\n//           reset={reset}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n// export default App;","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/App.tsx"],"names":["React","BrowserRouter","Router","Switch","Route","PublicQuizzes","library","faBookOpen","faTachometerAlt","faChevronRight","PrivateSection","AuthContextProvider","QuizzesContextProvider","add","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAO,WAAP;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SACEC,UADF,EAEEC,eAFF,EAGEC,cAHF,QAIO,mCAJP;AAKA,SAASC,cAAT,QAA+B,8CAA/B;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AAEAN,OAAO,CAACO,GAAR,CAAYN,UAAZ,EAAwBC,eAAxB,EAAyCC,cAAzC;;AAEA,MAAMK,GAAa,GAAG,MAAM;AAC1B,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAET,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,MAAM,EAAE,mBACN,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AAAgB,MAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAWE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,MAAM,EAAE,mBACN,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AAAgB,MAAA,QAAQ,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,CADF,CADF,CADF;AA6BD,CA9BD;;AAgCA,eAAeS,GAAfsourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { PublicQuizzes } from \"./components/sections/PublicQuizzes\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faBookOpen,\n  faTachometerAlt,\n  faChevronRight\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { PrivateSection } from \"./components/sections/private/PrivateSection\";\nimport { AuthContextProvider } from \"./contexts/auth/Auth\";\nimport { QuizzesContextProvider } from \"./contexts/quizzes/Quizzes\";\n\nlibrary.add(faBookOpen, faTachometerAlt, faChevronRight);\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <QuizzesContextProvider>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={PublicQuizzes} />\n            <Route\n              exact\n              path=\"/login\"\n              render={() => (\n                <AuthContextProvider>\n                  <PrivateSection activity=\"login\" />\n                </AuthContextProvider>\n              )}\n            />\n            <Route\n              exact\n              path=\"/register\"\n              render={() => (\n                <AuthContextProvider>\n                  <PrivateSection activity=\"register\" />\n                </AuthContextProvider>\n              )}\n            />\n          </Switch>\n        </Router>\n      </QuizzesContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n// import { QuizType, Question, Subject } from \"./models/Question\";\n// import { NumQuestionsStep } from \"./components/steps/NumQuestionsStep\";\n// import { DifficultyStep } from \"./components/steps/DifficultyStep\";\n// import { Difficulty } from \"./models/TriviaApi\";\n// import { SubjectsStep } from \"./components/steps/SubjectsStep\";\n// import { FinalSummaryStep } from \"./components/steps/FinalSummaryStep\";\n// import { ActualQuiz } from \"./components/ActualQuiz\";\n// import { Navbar } from \"./components/Navbar\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n// import {\n//   faBookOpen,\n//   faTachometerAlt,\n//   faChevronRight\n// } from \"@fortawesome/free-solid-svg-icons\";\n\n// library.add(faBookOpen, faTachometerAlt, faChevronRight);\n\n// const App: React.FC = () => {\n//   const [questions, setQuestions] = useState<Question[]>([]);\n//   const [quizType, setQuizType] = useState<QuizType>(QuizType.TRIVIA);\n//   const [numOfQuestions, setNumOfQuestions] = useState<number>(5);\n//   const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(\"medium\");\n//   const [currentSubject, setCurrentSubject] = useState<Subject | \"\">(\"\");\n//   const [currentStep, setCurrentStep] = useState(1);\n//   const [startedQuiz, setStartedQuiz] = useState(false);\n\n//   const reset = () => {\n//     setStartedQuiz(false);\n//     setCurrentStep(1);\n//     setNumOfQuestions(5);\n//     setDifficultyLevel(\"medium\");\n//   };\n\n//   const chooseQuiz = (quizType: QuizType) => {\n//     reset();\n//     setQuizType(quizType);\n//   };\n\n//   const chooseAmountOfQuestions = (num: number) => {\n//     setNumOfQuestions(num);\n//   };\n\n//   const changeLevel = (level: Difficulty) => setDifficultyLevel(level);\n\n//   const chooseSubject = (subject: Subject) => {\n//     setCurrentSubject(subject);\n//   };\n\n//   const goForward = () => setCurrentStep(prev => prev + 1);\n\n//   const uploadQuestions = (questions: Question[]) => {\n//     setQuestions(questions);\n//     setStartedQuiz(true);\n//   };\n\n//   console.log(\"QST\", questions);\n\n//   const renderInstruction = () => {\n//     switch (currentStep) {\n//       case 1:\n//         return (\n//           <SubjectsStep\n//             quizType={quizType}\n//             goForward={goForward}\n//             updateSubject={chooseSubject}\n//           />\n//         );\n\n//       case 2:\n//         return (\n//           <NumQuestionsStep\n//             chooseAmountOfQuestions={chooseAmountOfQuestions}\n//             currentAmount={numOfQuestions}\n//             goForward={goForward}\n//           />\n//         );\n\n//       case 3:\n//         return (\n//           <DifficultyStep\n//             currentLevel={difficultyLevel}\n//             changeLevel={changeLevel}\n//             goForward={goForward}\n//           />\n//         );\n\n//       case 4:\n//         return (\n//           <FinalSummaryStep\n//             quizType={quizType}\n//             numberOfQuestions={numOfQuestions}\n//             difficulty={difficultyLevel}\n//             subject={currentSubject as Subject}\n//             uploadQuestions={uploadQuestions}\n//             reset={reset}\n//           />\n//         );\n\n//       default:\n//         return <h1>SOMETHING WENT WRONG...</h1>;\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Navbar selectedQuiz={quizType} chooseQuiz={chooseQuiz} reset={reset} />\n//       {!startedQuiz ? (\n//         <header className=\"App-header\">{renderInstruction()}</header>\n//       ) : (\n//         <ActualQuiz\n//           subject={currentSubject as Subject}\n//           allQuestions={questions}\n//           reset={reset}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}