{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/QuestionCard.tsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BaseButton } from \"../UI/Buttons\";\nimport { Colors } from \"../../constants/colors\";\nimport { Reply } from \"./Reply\";\nimport { Icon } from \"../UI/Icon\";\nimport { shuffleArray } from \"../../utils/functions\";\nexport const StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  background-color: rgba(255, 255, 255, 0.95);\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n  border: 3px solid;\n`;\nconst NextButton = styled(BaseButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${props => props.hasReplied ? Colors.VIOLET : Colors.LIGHTER_GREY};\n  cursor: ${props => props.hasReplied ? \"pointer\" : \"auto\"};\n\n  :hover {\n    background-color: ${props => props.hasReplied ? Colors.STEEL_PINK : Colors.LIGHTER_GREY};\n  }\n`;\nconst RepliesContainer = styled.div`\n  margin: 1.5rem 0;\n  display: flex;\n  flex-direction: column;\n`;\nconst CardBottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding-top: 2rem;\n`;\nconst CardBottomItem = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${Colors.LIGHTER_GREY};\n  font-size: 0.8rem;\n`;\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n`;\nconst StyledQuestion = styled.h4`\n  font-size: 1.4rem;\n  line-height: 30px;\n`;\nexport const QuestionCard = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion,\n  givePoint,\n  quizType\n}) => {\n  console.log(\"QUESTION\", question); // If the quiz is private, need to include the right answer\n\n  const allAnswers = quizType === \"public\" ? question.allReplies.filter(reply => reply !== null) : shuffleArray([...question.allReplies, question.rightReply]);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n\n  const isRightReply = reply => reply === question.rightReply;\n\n  const goToNextQuestion = () => {\n    setHasReplied(false);\n    next();\n  };\n\n  return /*#__PURE__*/React.createElement(StyledCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledQuestion, {\n    dangerouslySetInnerHTML: {\n      __html: question.question\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(RepliesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \"allAnswers.map((reply, index) => (\", /*#__PURE__*/React.createElement(Reply, {\n    key: index,\n    isRight: isRightReply(reply),\n    hasReplied: hasReplied,\n    replyText: reply,\n    replyQuestion: replyQuestion,\n    givePoint: givePoint,\n    replyNumber: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), \"))}\"), /*#__PURE__*/React.createElement(NextButton, {\n    hasReplied: hasReplied,\n    disabled: !hasReplied,\n    onClick: goToNextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(CardBottom, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, quizType === \"public\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardBottomItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"book-open\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }), question.subject), /*#__PURE__*/React.createElement(CardBottomItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"tachometer-alt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }), question.difficulty.toUpperCase())), /*#__PURE__*/React.createElement(QuestionNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, `${currentNumberOfQuestion}/${numberOfQuestions}`)));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/replies/QuestionCard.tsx"],"names":["React","useState","styled","BaseButton","Colors","Reply","Icon","shuffleArray","StyledCard","div","NextButton","VIOLET","props","hasReplied","LIGHTER_GREY","STEEL_PINK","RepliesContainer","CardBottom","CardBottomItem","QuestionNumber","h4","StyledQuestion","QuestionCard","question","next","numberOfQuestions","currentNumberOfQuestion","givePoint","quizType","console","log","allAnswers","allReplies","filter","reply","rightReply","setHasReplied","replyQuestion","isRightReply","goToNextQuestion","__html","index","subject","difficulty","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Question as PublicQuizQuestion } from \"../../models/PublicQuizQuestion\";\nimport { PrivateQuizQuestion } from \"../../models/PrivateQuiz\";\nimport { BaseButton } from \"../UI/Buttons\";\nimport { Colors } from \"../../constants/colors\";\nimport { Reply } from \"./Reply\";\nimport { Icon } from \"../UI/Icon\";\nimport { shuffleArray } from \"../../utils/functions\";\n\nexport const StyledCard = styled.div`\n  width: 600px;\n  padding: 2rem;\n  background-color: white;\n  background-color: rgba(255, 255, 255, 0.95);\n  align-items: flex-start;\n  position: relative;\n  border-radius: 20px;\n  border: 3px solid;\n`;\n\nconst NextButton = styled(BaseButton)`\n  background-color: ${Colors.VIOLET};\n  background-color: ${(props: { hasReplied: boolean }) =>\n    props.hasReplied ? Colors.VIOLET : Colors.LIGHTER_GREY};\n  cursor: ${(props: { hasReplied: boolean }) =>\n    props.hasReplied ? \"pointer\" : \"auto\"};\n\n  :hover {\n    background-color: ${(props: { hasReplied: boolean }) =>\n      props.hasReplied ? Colors.STEEL_PINK : Colors.LIGHTER_GREY};\n  }\n`;\n\nconst RepliesContainer = styled.div`\n  margin: 1.5rem 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CardBottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding-top: 2rem;\n`;\n\nconst CardBottomItem = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${Colors.LIGHTER_GREY};\n  font-size: 0.8rem;\n`;\n\nconst QuestionNumber = styled.h4`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #cccccc;\n  color: #696969;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n`;\n\nconst StyledQuestion = styled.h4`\n  font-size: 1.4rem;\n  line-height: 30px;\n`;\n\ninterface QuestionCardProps {\n  question: PublicQuizQuestion | PrivateQuizQuestion;\n  numberOfQuestions: number;\n  currentNumberOfQuestion: number;\n  next: () => void;\n  givePoint: () => void;\n  quizType: \"private\" | \"public\";\n}\n\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion,\n  givePoint,\n  quizType\n}) => {\n  console.log(\"QUESTION\", question);\n\n  // If the quiz is private, need to include the right answer\n  const allAnswers =\n    quizType === \"public\"\n      ? question.allReplies.filter(reply => reply !== null)\n      : shuffleArray([...question.allReplies, question.rightReply]);\n\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n  const isRightReply = (reply: string) => reply === question.rightReply;\n\n  const goToNextQuestion = () => {\n    setHasReplied(false);\n    next();\n  };\n\n  return (\n    <StyledCard>\n      <StyledQuestion dangerouslySetInnerHTML={{ __html: question.question }} />\n      <RepliesContainer>\n        {/* {question.allReplies\n          .filter(reply => reply !== null) */}\n        allAnswers.map((reply, index) => (\n        <Reply\n          key={index}\n          isRight={isRightReply(reply)}\n          hasReplied={hasReplied}\n          replyText={reply}\n          replyQuestion={replyQuestion}\n          givePoint={givePoint}\n          replyNumber={index}\n        />\n        ))}\n      </RepliesContainer>\n      <NextButton\n        hasReplied={hasReplied}\n        disabled={!hasReplied}\n        onClick={goToNextQuestion}\n      >\n        NEXT\n      </NextButton>\n      <CardBottom>\n        {quizType === \"public\" && (\n          <>\n            <CardBottomItem>\n              <Icon icon={\"book-open\"} />\n              {(question as PublicQuizQuestion).subject}\n            </CardBottomItem>\n            <CardBottomItem>\n              <Icon icon={\"tachometer-alt\"} />\n              {(question as PublicQuizQuestion).difficulty.toUpperCase()}\n            </CardBottomItem>\n          </>\n        )}\n\n        <QuestionNumber>{`${currentNumberOfQuestion}/${numberOfQuestions}`}</QuestionNumber>\n      </CardBottom>\n    </StyledCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}