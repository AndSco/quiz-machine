{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { QuestionCard } from \"../../replies/QuestionCard\";\nimport { Ending } from \"../../Ending\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nexport const ActualPrivateQuiz = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState(null);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  console.log(\"curr quiz\", currentQuiz);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = await getSingleQuiz(quizId);\n      setCurrentQuiz(quiz);\n    };\n\n    loadQuiz();\n  }, []);\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n\n  const thereAreStillQuestions = () => allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? /*#__PURE__*/React.createElement(QuizBackground, {\n    imageUrl: currentQuiz.backgroundImageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, thereAreStillQuestions() ? /*#__PURE__*/React.createElement(QuestionCard, {\n    question: allQuestions[currentQuestionIndex],\n    next: goToNextQuestion,\n    numberOfQuestions: allQuestions.length,\n    currentNumberOfQuestion: currentQuestionIndex + 1,\n    givePoint: givePoint,\n    quizType: \"private\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Ending, {\n    score: score,\n    totalQuestions: allQuestions.length,\n    playAgain: () => console.log(\"What to do?\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \"Loading\");\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/sections/private/ActualPrivateQuiz.tsx"],"names":["React","useState","useEffect","QuestionCard","Ending","QuizBackground","getSingleQuiz","ActualPrivateQuiz","quizId","currentQuiz","setCurrentQuiz","allQuestions","setAllQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","console","log","loadQuiz","quiz","questions","goToNextQuestion","prev","givePoint","prevScore","thereAreStillQuestions","length","backgroundImageUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AAOA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;AAClEC,EAAAA;AADkE,CAAD,KAE7D;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAqB,IAArB,CAA9C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAwB,EAAxB,CAAhD;AACA,QAAM,CAACY,oBAAD,EAAuBC,uBAAvB,IAAkDb,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAlC;AAEAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBT,WAAzB;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,QAAQ,GAAG,YAAY;AAC3B,YAAMC,IAAI,GAAI,MAAMd,aAAa,CAACE,MAAD,CAAjC;AACAE,MAAAA,cAAc,CAACU,IAAD,CAAd;AACD,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;AASAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,WAAJ,EAAiB;AACfG,MAAAA,eAAe,CAACH,WAAW,CAACY,SAAb,CAAf;AACD;AACF,GAJQ,EAIN,CAACZ,WAAD,CAJM,CAAT;;AAMA,QAAMa,gBAAgB,GAAG,MAAMR,uBAAuB,CAACS,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAtD;;AACA,QAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAhC;;AACA,QAAMC,sBAAsB,GAAG,MAC7Bf,YAAY,CAACgB,MAAb,IAAuBd,oBAAoB,GAAG,CADhD;;AAGA,SAAOJ,WAAW,gBAChB,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEA,WAAW,CAACmB,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,sBAAsB,kBACrB,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEf,YAAY,CAACE,oBAAD,CADxB;AAEE,IAAA,IAAI,EAAES,gBAFR;AAGE,IAAA,iBAAiB,EAAEX,YAAY,CAACgB,MAHlC;AAIE,IAAA,uBAAuB,EAAEd,oBAAoB,GAAG,CAJlD;AAKE,IAAA,SAAS,EAAEW,SALb;AAME,IAAA,QAAQ,EAAC,SANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADqB,gBAUrB,oBAAC,MAAD;AACE,IAAA,KAAK,EAAET,KADT;AAEE,IAAA,cAAc,EAAEJ,YAAY,CAACgB,MAF/B;AAGE,IAAA,SAAS,EAAE,MAAMV,OAAO,CAACC,GAAR,CAAY,aAAZ,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADgB,gBAoBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eApBF;AAsBD,CAnDM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { QuestionCard } from \"../../replies/QuestionCard\";\nimport { Ending } from \"../../Ending\";\nimport { QuizBackground } from \"../../UI/QuizBackground\";\nimport { PrivateQuiz, PrivateQuizQuestion } from \"../../../models/PrivateQuiz\";\nimport { getSingleQuiz } from \"../../../utils/dbFunctions\";\nimport { shuffleArray } from \"../../../utils/functions\";\n\ninterface ActualPrivateQuizProps {\n  quizId: string;\n}\n\nexport const ActualPrivateQuiz: React.FC<ActualPrivateQuizProps> = ({\n  quizId\n}) => {\n  const [currentQuiz, setCurrentQuiz] = useState<PrivateQuiz | null>(null);\n  const [allQuestions, setAllQuestions] = useState<PrivateQuizQuestion[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n\n  console.log(\"curr quiz\", currentQuiz);\n  useEffect(() => {\n    const loadQuiz = async () => {\n      const quiz = (await getSingleQuiz(quizId)) as unknown;\n      setCurrentQuiz(quiz as PrivateQuiz);\n    };\n\n    loadQuiz();\n  }, []);\n\n  useEffect(() => {\n    if (currentQuiz) {\n      setAllQuestions(currentQuiz.questions);\n    }\n  }, [currentQuiz]);\n\n  const goToNextQuestion = () => setCurrentQuestionIndex(prev => prev + 1);\n  const givePoint = () => setScore(prevScore => prevScore + 1);\n  const thereAreStillQuestions = () =>\n    allQuestions.length >= currentQuestionIndex + 1;\n\n  return currentQuiz ? (\n    <QuizBackground imageUrl={currentQuiz.backgroundImageUrl as string}>\n      {thereAreStillQuestions() ? (\n        <QuestionCard\n          question={allQuestions[currentQuestionIndex]}\n          next={goToNextQuestion}\n          numberOfQuestions={allQuestions.length}\n          currentNumberOfQuestion={currentQuestionIndex + 1}\n          givePoint={givePoint}\n          quizType=\"private\"\n        />\n      ) : (\n        <Ending\n          score={score}\n          totalQuestions={allQuestions.length}\n          playAgain={() => console.log(\"What to do?\")}\n        />\n      )}\n    </QuizBackground>\n  ) : (\n    <h1>Loading</h1>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}