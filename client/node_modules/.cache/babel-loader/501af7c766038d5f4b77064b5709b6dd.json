{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/steps/FinalSummaryStep.tsx\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"../../constants/colors\";\nimport { getQuestions } from \"../../utils/functions\";\nimport { StepTemplate } from \"./StepTemplate\";\nimport { StyledButton } from \"../QuizChoiceButton\";\nconst StyledFeature = styled.p`\n  color: ${Colors.LIGHTER_GREY};\n  font-size: 1rem;\n  margin: 0.8rem 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  span {\n    color: ${Colors.BLACK};\n    text-transform: uppercase;\n    font-weight: bold;\n    margin-top: 0.5rem;\n  }\n`;\nconst FeaturesContainer = styled.div`\n  width: 50vw;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  justify-content: center;\n  align-items: center;\n`;\nconst StartButton = styled(StyledButton)`\n  background-color: ${Colors.DARK_BLUE};\n  margin-top: 1.5rem;\n\n  :hover {\n    background-color: ${Colors.ORANGE};\n  }\n`;\nconst StyledResetButton = styled(StyledButton)`\n  background-color: white;\n  border: 1px solid ${Colors.LIGHTER_GREY};\n  color: ${Colors.LIGHTER_GREY};\n  margin-top: 0.6rem;\n\n  :hover {\n    background-color: ${Colors.YELLOW};\n    color: ${Colors.BLACK};\n    border: none;\n  }\n`;\n\nconst ResetButton = ({\n  reset\n}) => /*#__PURE__*/React.createElement(StyledButton, {\n  onClick: reset,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }\n}, \"RESET\");\n\nexport const FinalSummaryStep = ({\n  quizType,\n  numberOfQuestions,\n  difficulty,\n  subject,\n  uploadQuestions\n}) => {\n  return /*#__PURE__*/React.createElement(StepTemplate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FeaturesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StyledFeature, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Quiz: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, quizType)), /*#__PURE__*/React.createElement(StyledFeature, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"No. of questions: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, numberOfQuestions)), /*#__PURE__*/React.createElement(StyledFeature, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Difficulty: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }\n  }, difficulty)), /*#__PURE__*/React.createElement(StyledFeature, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Subject: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 20\n    }\n  }, subject)), /*#__PURE__*/React.createElement(StartButton, {\n    onClick: async () => {\n      const questionsToUpload = await getQuestions({\n        quizType,\n        difficulty,\n        numOfQuestions: numberOfQuestions,\n        subject\n      });\n      uploadQuestions(questionsToUpload);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"START QUIZ\"), /*#__PURE__*/React.createElement(ResetButton, {\n    reset: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/steps/FinalSummaryStep.tsx"],"names":["React","styled","Colors","getQuestions","StepTemplate","StyledButton","StyledFeature","p","LIGHTER_GREY","BLACK","FeaturesContainer","div","StartButton","DARK_BLUE","ORANGE","StyledResetButton","YELLOW","ResetButton","reset","FinalSummaryStep","quizType","numberOfQuestions","difficulty","subject","uploadQuestions","questionsToUpload","numOfQuestions"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAASC,MAAT,QAAuB,wBAAvB;AAEA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,MAAMC,aAAa,GAAGL,MAAM,CAACM,CAAE;WACpBL,MAAM,CAACM,YAAa;;;;;;;;;aASlBN,MAAM,CAACO,KAAM;;;;;CAV1B;AAiBA,MAAMC,iBAAiB,GAAGT,MAAM,CAACU,GAAI;;;;;;;;CAArC;AAUA,MAAMC,WAAW,GAAGX,MAAM,CAACI,YAAD,CAAe;sBACnBH,MAAM,CAACW,SAAU;;;;wBAIfX,MAAM,CAACY,MAAO;;CALtC;AASA,MAAMC,iBAAiB,GAAGd,MAAM,CAACI,YAAD,CAAe;;sBAEzBH,MAAM,CAACM,YAAa;WAC/BN,MAAM,CAACM,YAAa;;;;wBAIPN,MAAM,CAACc,MAAO;aACzBd,MAAM,CAACO,KAAM;;;CAR1B;;AAaA,MAAMQ,WAA4C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACnD,oBAAC,YAAD;AAAc,EAAA,OAAO,EAAEA,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;;AAaA,OAAO,MAAMC,gBAAiC,GAAG,CAAC;AAChDC,EAAAA,QADgD;AAEhDC,EAAAA,iBAFgD;AAGhDC,EAAAA,UAHgD;AAIhDC,EAAAA,OAJgD;AAKhDC,EAAAA;AALgD,CAAD,KAM3C;AACJ,sBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOJ,QAAP,CADR,CADF,eAIE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,iBAAP,CADpB,CAJF,eAOE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,UAAP,CADd,CAPF,eAUE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,OAAP,CADX,CAVF,eAaE,oBAAC,WAAD;AACE,IAAA,OAAO,EAAE,YAAY;AACnB,YAAME,iBAAiB,GAAG,MAAMtB,YAAY,CAAC;AAC3CiB,QAAAA,QAD2C;AAE3CE,QAAAA,UAF2C;AAG3CI,QAAAA,cAAc,EAAEL,iBAH2B;AAI3CE,QAAAA;AAJ2C,OAAD,CAA5C;AAOAC,MAAAA,eAAe,CAACC,iBAAD,CAAf;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eA2BE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEP,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF,CADF;AAiCD,CAxCM","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { QuizType, Subject } from \"../../models/Question\";\nimport { Difficulty } from \"../../models/TriviaApi\";\nimport { Colors } from \"../../constants/colors\";\nimport { Question } from \"../../models/Question\";\nimport { getQuestions } from \"../../utils/functions\";\nimport { StepTemplate } from \"./StepTemplate\";\nimport { StyledButton } from \"../QuizChoiceButton\";\n\nconst StyledFeature = styled.p`\n  color: ${Colors.LIGHTER_GREY};\n  font-size: 1rem;\n  margin: 0.8rem 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  span {\n    color: ${Colors.BLACK};\n    text-transform: uppercase;\n    font-weight: bold;\n    margin-top: 0.5rem;\n  }\n`;\n\nconst FeaturesContainer = styled.div`\n  width: 50vw;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StartButton = styled(StyledButton)`\n  background-color: ${Colors.DARK_BLUE};\n  margin-top: 1.5rem;\n\n  :hover {\n    background-color: ${Colors.ORANGE};\n  }\n`;\n\nconst StyledResetButton = styled(StyledButton)`\n  background-color: white;\n  border: 1px solid ${Colors.LIGHTER_GREY};\n  color: ${Colors.LIGHTER_GREY};\n  margin-top: 0.6rem;\n\n  :hover {\n    background-color: ${Colors.YELLOW};\n    color: ${Colors.BLACK};\n    border: none;\n  }\n`;\n\nconst ResetButton: React.FC<{ reset: () => void }> = ({ reset }) => (\n  <StyledButton onClick={reset}>RESET</StyledButton>\n);\n\ninterface Props {\n  quizType: QuizType;\n  numberOfQuestions: number;\n  difficulty: Difficulty;\n  subject: Subject;\n  uploadQuestions: (questions: Question[]) => void;\n  reset: () => void;\n}\n\nexport const FinalSummaryStep: React.FC<Props> = ({\n  quizType,\n  numberOfQuestions,\n  difficulty,\n  subject,\n  uploadQuestions\n}) => {\n  return (\n    <StepTemplate>\n      <FeaturesContainer>\n        <StyledFeature>\n          Quiz: <span>{quizType}</span>\n        </StyledFeature>\n        <StyledFeature>\n          No. of questions: <span>{numberOfQuestions}</span>\n        </StyledFeature>\n        <StyledFeature>\n          Difficulty: <span>{difficulty}</span>\n        </StyledFeature>\n        <StyledFeature>\n          Subject: <span>{subject}</span>\n        </StyledFeature>\n        <StartButton\n          onClick={async () => {\n            const questionsToUpload = await getQuestions({\n              quizType,\n              difficulty,\n              numOfQuestions: numberOfQuestions,\n              subject\n            });\n\n            uploadQuestions(questionsToUpload);\n          }}\n        >\n          START QUIZ\n        </StartButton>\n        <ResetButton reset={reset} />\n      </FeaturesContainer>\n    </StepTemplate>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}