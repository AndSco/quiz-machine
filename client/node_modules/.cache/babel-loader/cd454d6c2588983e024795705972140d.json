{"ast":null,"code":"var _jsxFileName = \"/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/ActualQuizComponents/QuestionCard.tsx\";\nimport React, { useState } from \"react\";\nimport { Reply } from \"./Reply\";\nimport { Icon } from \"../UI/Icon\";\nimport { CardBottom, CardBottomItem, NextButton, QuestionNumber, RepliesContainer, StyledCard, StyledQuestion, CodeContainer } from \"./StyledComponents\";\nexport const QuestionCard = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion,\n  givePoint,\n  quizType\n}) => {\n  console.log(\"QUESTION\", question);\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n\n  const isRightReply = reply => reply === question.rightReply;\n\n  const goToNextQuestion = () => {\n    setHasReplied(false);\n    next();\n  };\n\n  return /*#__PURE__*/React.createElement(StyledCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledQuestion, {\n    dangerouslySetInnerHTML: {\n      __html: question.question\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), question.code && /*#__PURE__*/React.createElement(CodeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    style: {\n      whiteSpace: \"pre-wrap\"\n    },\n    dangerouslySetInnerHTML: {\n      __html: question.code\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(RepliesContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, question.allReplies.filter(reply => reply !== null).map((reply, index) => /*#__PURE__*/React.createElement(Reply, {\n    key: index,\n    isRight: isRightReply(reply),\n    hasReplied: hasReplied,\n    replyText: reply,\n    replyQuestion: replyQuestion,\n    givePoint: givePoint,\n    replyNumber: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NextButton, {\n    hasReplied: hasReplied,\n    disabled: !hasReplied,\n    onClick: goToNextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(CardBottom, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, quizType === \"public\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardBottomItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"book-open\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }), question.subject), /*#__PURE__*/React.createElement(CardBottomItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"tachometer-alt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }), question.difficulty.toUpperCase())), /*#__PURE__*/React.createElement(QuestionNumber, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, `${currentNumberOfQuestion}/${numberOfQuestions}`)));\n};","map":{"version":3,"sources":["/Users/andreascorcia/Downloads/CODING/quiz-machine/client/src/components/ActualQuizComponents/QuestionCard.tsx"],"names":["React","useState","Reply","Icon","CardBottom","CardBottomItem","NextButton","QuestionNumber","RepliesContainer","StyledCard","StyledQuestion","CodeContainer","QuestionCard","question","next","numberOfQuestions","currentNumberOfQuestion","givePoint","quizType","console","log","hasReplied","setHasReplied","replyQuestion","isRightReply","reply","rightReply","goToNextQuestion","__html","code","whiteSpace","allReplies","filter","map","index","subject","difficulty","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Question as PublicQuizQuestion } from \"../../models/PublicQuizQuestion\";\nimport { PrivateQuizQuestion } from \"../../models/PrivateQuiz\";\nimport { Reply } from \"./Reply\";\nimport { Icon } from \"../UI/Icon\";\nimport {\n  CardBottom,\n  CardBottomItem,\n  NextButton,\n  QuestionNumber,\n  RepliesContainer,\n  StyledCard,\n  StyledQuestion,\n  CodeContainer\n} from \"./StyledComponents\";\n\ninterface QuestionCardProps {\n  question: PublicQuizQuestion | PrivateQuizQuestion;\n  numberOfQuestions: number;\n  currentNumberOfQuestion: number;\n  next: () => void;\n  givePoint: () => void;\n  quizType: \"private\" | \"public\";\n}\n\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\n  question,\n  next,\n  numberOfQuestions,\n  currentNumberOfQuestion,\n  givePoint,\n  quizType\n}) => {\n  console.log(\"QUESTION\", question);\n\n  const [hasReplied, setHasReplied] = useState(false);\n\n  const replyQuestion = () => setHasReplied(true);\n  const isRightReply = (reply: string) => reply === question.rightReply;\n\n  const goToNextQuestion = () => {\n    setHasReplied(false);\n    next();\n  };\n\n  return (\n    <StyledCard>\n      <StyledQuestion dangerouslySetInnerHTML={{ __html: question.question }} />\n      {(question as PrivateQuizQuestion).code && (\n        <CodeContainer>\n          {/* <code style={{ whiteSpace: \"pre-wrap\" }}>\n            {(question as PrivateQuizQuestion).code as string}\n          </code> */}\n          <code\n            style={{ whiteSpace: \"pre-wrap\" }}\n            dangerouslySetInnerHTML={{\n              __html: (question as PrivateQuizQuestion).code as string\n            }}\n          />\n        </CodeContainer>\n      )}\n      <RepliesContainer>\n        {question.allReplies\n          .filter(reply => reply !== null)\n          .map((reply, index) => (\n            <Reply\n              key={index}\n              isRight={isRightReply(reply)}\n              hasReplied={hasReplied}\n              replyText={reply}\n              replyQuestion={replyQuestion}\n              givePoint={givePoint}\n              replyNumber={index}\n            />\n          ))}\n      </RepliesContainer>\n      <NextButton\n        hasReplied={hasReplied}\n        disabled={!hasReplied}\n        onClick={goToNextQuestion}\n      >\n        NEXT\n      </NextButton>\n      <CardBottom>\n        {quizType === \"public\" && (\n          <>\n            <CardBottomItem>\n              <Icon icon={\"book-open\"} />\n              {(question as PublicQuizQuestion).subject}\n            </CardBottomItem>\n            <CardBottomItem>\n              <Icon icon={\"tachometer-alt\"} />\n              {(question as PublicQuizQuestion).difficulty.toUpperCase()}\n            </CardBottomItem>\n          </>\n        )}\n\n        <QuestionNumber>{`${currentNumberOfQuestion}/${numberOfQuestions}`}</QuestionNumber>\n      </CardBottom>\n    </StyledCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}